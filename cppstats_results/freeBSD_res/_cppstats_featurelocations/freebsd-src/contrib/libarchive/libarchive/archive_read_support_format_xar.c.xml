<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_xar.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBXML_XMLREADER_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlreader.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_BSDXML_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bsdxml.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_EXPAT_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bzlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzma.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_digest_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBXML_XMLREADER_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSDXML_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_H</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><name>int</name></type>
<name>archive_read_support_format_xar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_format_xar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Xar not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_PRINT_TOC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_TOC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>outbytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned char *x = (unsigned char *)(uintptr_t)d; unsigned char c = x[outbytes-1]; x[outbytes - 1] = 0; fprintf(stderr, "%s", x); fprintf(stderr, "%c", c); x[outbytes - 1] = c; } while (0)</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_TOC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>outbytes</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_MAGIC</name></cpp:macro> <cpp:value>0x78617221</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CKSUM_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CKSUM_SHA1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CKSUM_MD5</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA1_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUM_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<enum>enum <name>enctype</name> <block>{
<decl><name>NONE</name></decl>,
<decl><name>GZIP</name></decl>,
<decl><name>BZIP2</name></decl>,
<decl><name>LZMA</name></decl>,
<decl><name>XZ</name></decl>,
}</block>;</enum>

<struct>struct <name>chksumval</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>alg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>val</name><index>[<expr><name>MAX_SUM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>chksumwork</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>alg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_md5_ctx</name></type> <name>md5ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_HAS_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>archive_sha1_ctx</name></type> <name>sha1ctx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>xattr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>a_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>e_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>fstype</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xar_file</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>hdnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subdirs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>has</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_DATA</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_PATHNAME</name></cpp:macro> <cpp:value>0x00002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_SYMLINK</name></cpp:macro> <cpp:value>0x00004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_TIME</name></cpp:macro> <cpp:value>0x00008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_UID</name></cpp:macro> <cpp:value>0x00010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_GID</name></cpp:macro> <cpp:value>0x00020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MODE</name></cpp:macro> <cpp:value>0x00040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_TYPE</name></cpp:macro> <cpp:value>0x00080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_DEV</name></cpp:macro> <cpp:value>0x00100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_DEVMAJOR</name></cpp:macro> <cpp:value>0x00200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_DEVMINOR</name></cpp:macro> <cpp:value>0x00400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_INO</name></cpp:macro> <cpp:value>0x00800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_FFLAGS</name></cpp:macro> <cpp:value>0x01000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_XATTR</name></cpp:macro> <cpp:value>0x02000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ACL</name></cpp:macro> <cpp:value>0x04000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CTIME</name></cpp:macro> <cpp:value>0x08000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MTIME</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ATIME</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>a_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>e_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>uname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>gname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ino64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>fflags_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>hardlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr_list</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>hdlink</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>heap_queue</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>xmlstatus</name> <block>{
<decl><name>INIT</name></decl>,
<decl><name>XAR</name></decl>,
<decl><name>TOC</name></decl>,
<decl><name>TOC_CREATION_TIME</name></decl>,
<decl><name>TOC_CHECKSUM</name></decl>,
<decl><name>TOC_CHECKSUM_OFFSET</name></decl>,
<decl><name>TOC_CHECKSUM_SIZE</name></decl>,
<decl><name>TOC_FILE</name></decl>,
<decl><name>FILE_DATA</name></decl>,
<decl><name>FILE_DATA_LENGTH</name></decl>,
<decl><name>FILE_DATA_OFFSET</name></decl>,
<decl><name>FILE_DATA_SIZE</name></decl>,
<decl><name>FILE_DATA_ENCODING</name></decl>,
<decl><name>FILE_DATA_A_CHECKSUM</name></decl>,
<decl><name>FILE_DATA_E_CHECKSUM</name></decl>,
<decl><name>FILE_DATA_CONTENT</name></decl>,
<decl><name>FILE_EA</name></decl>,
<decl><name>FILE_EA_LENGTH</name></decl>,
<decl><name>FILE_EA_OFFSET</name></decl>,
<decl><name>FILE_EA_SIZE</name></decl>,
<decl><name>FILE_EA_ENCODING</name></decl>,
<decl><name>FILE_EA_A_CHECKSUM</name></decl>,
<decl><name>FILE_EA_E_CHECKSUM</name></decl>,
<decl><name>FILE_EA_NAME</name></decl>,
<decl><name>FILE_EA_FSTYPE</name></decl>,
<decl><name>FILE_CTIME</name></decl>,
<decl><name>FILE_MTIME</name></decl>,
<decl><name>FILE_ATIME</name></decl>,
<decl><name>FILE_GROUP</name></decl>,
<decl><name>FILE_GID</name></decl>,
<decl><name>FILE_USER</name></decl>,
<decl><name>FILE_UID</name></decl>,
<decl><name>FILE_MODE</name></decl>,
<decl><name>FILE_DEVICE</name></decl>,
<decl><name>FILE_DEVICE_MAJOR</name></decl>,
<decl><name>FILE_DEVICE_MINOR</name></decl>,
<decl><name>FILE_DEVICENO</name></decl>,
<decl><name>FILE_INODE</name></decl>,
<decl><name>FILE_LINK</name></decl>,
<decl><name>FILE_TYPE</name></decl>,
<decl><name>FILE_NAME</name></decl>,
<decl><name>FILE_ACL</name></decl>,
<decl><name>FILE_ACL_DEFAULT</name></decl>,
<decl><name>FILE_ACL_ACCESS</name></decl>,
<decl><name>FILE_ACL_APPLEEXTENDED</name></decl>,

<decl><name>FILE_FLAGS</name></decl>,
<decl><name>FILE_FLAGS_USER_NODUMP</name></decl>,
<decl><name>FILE_FLAGS_USER_IMMUTABLE</name></decl>,
<decl><name>FILE_FLAGS_USER_APPEND</name></decl>,
<decl><name>FILE_FLAGS_USER_OPAQUE</name></decl>,
<decl><name>FILE_FLAGS_USER_NOUNLINK</name></decl>,
<decl><name>FILE_FLAGS_SYS_ARCHIVED</name></decl>,
<decl><name>FILE_FLAGS_SYS_IMMUTABLE</name></decl>,
<decl><name>FILE_FLAGS_SYS_APPEND</name></decl>,
<decl><name>FILE_FLAGS_SYS_NOUNLINK</name></decl>,
<decl><name>FILE_FLAGS_SYS_SNAPSHOT</name></decl>,

<decl><name>FILE_EXT2</name></decl>,
<decl><name>FILE_EXT2_SecureDeletion</name></decl>,
<decl><name>FILE_EXT2_Undelete</name></decl>,
<decl><name>FILE_EXT2_Compress</name></decl>,
<decl><name>FILE_EXT2_Synchronous</name></decl>,
<decl><name>FILE_EXT2_Immutable</name></decl>,
<decl><name>FILE_EXT2_AppendOnly</name></decl>,
<decl><name>FILE_EXT2_NoDump</name></decl>,
<decl><name>FILE_EXT2_NoAtime</name></decl>,
<decl><name>FILE_EXT2_CompDirty</name></decl>,
<decl><name>FILE_EXT2_CompBlock</name></decl>,
<decl><name>FILE_EXT2_NoCompBlock</name></decl>,
<decl><name>FILE_EXT2_CompError</name></decl>,
<decl><name>FILE_EXT2_BTree</name></decl>,
<decl><name>FILE_EXT2_HashIndexed</name></decl>,
<decl><name>FILE_EXT2_iMagic</name></decl>,
<decl><name>FILE_EXT2_Journaled</name></decl>,
<decl><name>FILE_EXT2_NoTail</name></decl>,
<decl><name>FILE_EXT2_DirSync</name></decl>,
<decl><name>FILE_EXT2_TopDir</name></decl>,
<decl><name>FILE_EXT2_Reserved</name></decl>,
<decl><name>UNKNOWN</name></decl>,
}</block>;</enum>

<struct>struct <name>unknown_tag</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>unknown_tag</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xar</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_file</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTBUFF_SIZE</name></cpp:macro> <cpp:value>(1024 * 64)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outbuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>xmlstatus</name></name></type> <name>xmlsts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>xmlstatus</name></name></type> <name>xmlsts_unknown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>unknown_tag</name></name> <modifier>*</modifier></type><name>unknowntags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base64text</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_chksum_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_chksum_size</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>rd_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bz_stream</name></type> <name>bzstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bzstream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBLZMA</name></expr></cpp:if>
<decl_stmt><decl><type><name>lzma_stream</name></type> <name>lzstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lzstream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name><name>struct</name> <name>chksumwork</name></name></type> <name>a_sumwrk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumwork</name></name></type> <name>e_sumwrk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>heap_queue</name></name></type> <name>file_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>hdlink_orgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>hdlink_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_unconsumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>entry_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>entry_a_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>chksumval</name></name></type> <name>entry_e_sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xmlattr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xmlattr_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xar_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xar_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xar_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xar_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xar_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>move_reading_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_contents_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>enctype</name></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>atol10</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>atol8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>atohex</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>parse_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>heap_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>heap_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checksum_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checksum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>checksum_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checksum_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decompression_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>enctype</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decompression_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xmlattr_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xattr_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xattr_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getencoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getsumalgorithm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>unknowntag_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unknowntag_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xml_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xml_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml_parse_file_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml_parse_file_ext2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBXML_XMLREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml2_xmlattr_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xmlTextReaderPtr</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml2_read_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml2_close_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xml2_error_hdr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>xmlParserSeverities</name></type></decl></parameter>,
<parameter><decl><type><name>xmlTextReaderLocatorPtr</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xml2_read_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSDXML_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>expat_userData</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>archive</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>expat_xmlattr_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expat_start_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expat_end_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expat_data_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>expat_read_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>archive_read_support_format_xar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_format_xar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate xar data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>xar</name></expr></argument>,
<argument><expr><literal type="string">"xar"</literal></expr></argument>,
<argument><expr><name>xar_bid</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>xar_read_header</name></expr></argument>,
<argument><expr><name>xar_read_data</name></expr></argument>,
<argument><expr><name>xar_read_data_skip</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>xar_cleanup</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xar_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bid</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>best_bid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HEADER_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bid</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bid</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HEADER_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bid</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>



<switch>switch <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CKSUM_NONE</name></expr>:</case>
<case>case <expr><name>CKSUM_SHA1</name></expr>:</case>
<case>case <expr><name>CKSUM_MD5</name></expr>:</case>
<expr_stmt><expr><name>bid</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>bid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_compressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>toc_chksum_alg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated archive header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_be32dec</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HEADER_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid header magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HEADER_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported header version(%d)"</literal></expr></argument>,
<argument><expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>toc_compressed_size</name> <operator>=</operator> <call><name>archive_be64dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>=</operator> <name>toc_compressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toc_uncompressed_size</name> <operator>=</operator> <call><name>archive_be64dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toc_chksum_alg</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>move_reading_point</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>GZIP</name></expr></argument>, <argument><expr><name>toc_chksum_alg</name></expr></argument>, <argument><expr><name>CKSUM_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBXML_XMLREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xml2_read_toc</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSDXML_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>expat_read_toc</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>h_base</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>toc_total</name></name> <operator>!=</operator> <name>toc_uncompressed_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"TOC uncompressed size error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>toc_chksum_alg</name> <operator>!=</operator> <name>CKSUM_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>move_reading_point</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bytes</name> <operator>&lt;</operator> <name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated archive file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>checksum_final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>file</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>hdlink_orgs</name></name></expr>;</init> <condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>hdnext</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>hdlink</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hdlink</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>hdlink_list</name></name><operator>)</operator></expr>;</init> <condition><expr><operator>*</operator><name>hdlink</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>hdlink</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>hdlink</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>hdlink</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>hltmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>f2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlink</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>hdlink</name><operator>)</operator><operator>-&gt;</operator><name>cnt</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <name>nlink</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>f2</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>hdlink</name><operator>)</operator><operator>-&gt;</operator><name>files</name></name></expr>;</init> <condition><expr><name>f2</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>f2</name> <operator>=</operator> <name><name>f2</name><operator>-&gt;</operator><name>hdnext</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <name>nlink</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f2</name><operator>-&gt;</operator><name>hardlink</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>hltmp</name> <operator>=</operator> <operator>*</operator><name>hdlink</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hdlink</name> <operator>=</operator> <name><name>hltmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hltmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_XAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"xar"</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xar_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read_toc</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>heap_get_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_PATHNAME</name> <operator>|</operator> <name>HAS_TYPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_ATIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_CTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_MTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>gname</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>archive_entry_copy_gname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>gname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>gname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Gname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Gname cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>uname</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>archive_entry_copy_uname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>uname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>uname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Uname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Uname cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_copy_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>archive_entry_copy_symlink_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Linkname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Linkname cannot be converted from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>subdirs</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>hardlink</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_hardlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>hardlink</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ino64</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ino64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_DEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_dev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_DEVMAJOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_devmajor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>&amp;</operator> <name>HAS_DEVMINOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_devminor</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_copy_fflags_text</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>fflags_text</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_encoding</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_a_sum</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>a_sum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_e_sum</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>e_sum</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>xattr</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>xattr_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xattr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>move_reading_point</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>,
<argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>alg</name></name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>alg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outbytes</name> <operator>!=</operator> <name><name>xattr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Decompressed size error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>checksum_final</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Xattr checksum error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xattr</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Xattr name error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_xattr_add_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><name><name>xattr</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xattr</name> <operator>=</operator> <name><name>xattr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>move_reading_point</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xar_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>||</operator> <name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt>
<goto>goto <name>abort_read_data</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_encoding</name></name></expr></argument>,
<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_a_sum</name><operator>.</operator><name>alg</name></name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_e_sum</name><operator>.</operator><name>alg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort_read_data</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>entry_total</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_total</name></name> <operator>+=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_total</name></name> <operator>!=</operator> <name><name>xar</name><operator>-&gt;</operator><name>entry_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Decompressed size error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<goto>goto <name>abort_read_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>checksum_final</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_a_sum</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_a_sum</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_e_sum</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_e_sum</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>abort_read_data</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>abort_read_data</name>:</label>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>total</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xar_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>end_of_file</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes_skipped</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_remaining</name></name> <operator>+</operator>
<name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bytes_skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xar_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>hdlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checksum_cleanup</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>decompression_cleanup</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdlink</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>hdlink_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>hdlink</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>hdlink</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hdlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdlink</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>used</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>unknown_tag</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>move_reading_point</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>h_base</name></name> <operator>!=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>h_base</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>step</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>h_base</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>ARCHIVE_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Cannot seek."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_contents_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>a_sum_alg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e_sum_alg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>decompression_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>checksum_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a_sum_alg</name></expr></argument>, <argument><expr><name>e_sum_alg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>used</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>remaining</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>


<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Truncated archive file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bytes</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>remaining</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decompress</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>checksum_update</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>used</name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>atol10</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>char_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>char_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>digit</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>digit</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>char_cnt</name><operator>--</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>digit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>l</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>atol8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>char_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>char_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>char_cnt</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>|=</operator> <name>digit</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>l</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>atohex</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>psize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>fbsize</name> <init>= <expr><name>bsize</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bsize</name> <operator>&amp;&amp;</operator> <name>psize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">0x0a</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0x0a</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bsize</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psize</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>fbsize</name> <operator>-</operator> <name>bsize</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>time_from_tm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIMEGM</name></expr></cpp:if>

<return>return <expr><operator>(</operator><call><name>timegm</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE__MKGMTIME64</name></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>_mkgmtime64</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><call><name>mktime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_sec</name></name>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">60</literal>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">3600</literal>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>*</operator> <literal type="number">86400</literal>
<operator>+</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">70</literal><operator>)</operator> <operator>*</operator> <literal type="number">31536000</literal>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">69</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal>
<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">299</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>parse_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">1900</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">59</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>data</name></expr></argument> &gt;</argument_list></name> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
p += 2;
if (*p != 'Z')
return (t);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_from_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>heap_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>file_id</name></decl>, <decl><type ref="prev"/><name>parent_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hole</name></decl>, <decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>new_pending_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_pending_files</name> <operator>=</operator> <operator>(</operator>struct <name>xar_file</name> <operator>*</operator><operator>*</operator><operator>)</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_pending_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_pending_files</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_pending_files</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_pending_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name>new_pending_files</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_id</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>hole</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>hole</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>hole</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_id</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>parent</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_id</name> <operator>&gt;=</operator> <name>parent_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>hole</name></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>hole</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>parent</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type>
<name>heap_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a_id</name></decl>, <decl><type ref="prev"/><name>b_id</name></decl>, <decl><type ref="prev"/><name>c_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>used</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>used</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a_id</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_id</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_id</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_id</name> <operator>&lt;</operator> <name>b_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_id</name> <operator>=</operator> <name>c_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a_id</name> <operator>&lt;=</operator> <name>b_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hdlink</name></name> <modifier>*</modifier></type><name>hdlink</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hdlink</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>hdlink_list</name></name></expr>;</init> <condition><expr><name>hdlink</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hdlink</name> <operator>=</operator> <name><name>hdlink</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hdlink</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>hdnext</name></name> <operator>=</operator> <name><name>hdlink</name><operator>-&gt;</operator><name>files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hdlink</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdlink</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdlink</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>hdnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdlink</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>hdlink_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>hdlink_list</name></name> <operator>=</operator> <name>hdlink</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_checksum_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chksumwork</name></name> <modifier>*</modifier></type><name>sumwrk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sum_alg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sumwrk</name><operator>-&gt;</operator><name>alg</name></name> <operator>=</operator> <name>sum_alg</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>sum_alg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CKSUM_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CKSUM_SHA1</name></expr>:</case>
<expr_stmt><expr><call><name>archive_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>sha1ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CKSUM_MD5</name></expr>:</case>
<expr_stmt><expr><call><name>archive_md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>md5ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_checksum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chksumwork</name></name> <modifier>*</modifier></type><name>sumwrk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>sumwrk</name><operator>-&gt;</operator><name>alg</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CKSUM_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CKSUM_SHA1</name></expr>:</case>
<expr_stmt><expr><call><name>archive_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>sha1ctx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CKSUM_MD5</name></expr>:</case>
<expr_stmt><expr><call><name>archive_md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>md5ctx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_checksum_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>chksumwork</name></name> <modifier>*</modifier></type><name>sumwrk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sum</name><index>[<expr><name>MAX_SUM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sumwrk</name><operator>-&gt;</operator><name>alg</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CKSUM_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CKSUM_SHA1</name></expr>:</case>
<expr_stmt><expr><call><name>archive_sha1_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>sha1ctx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>SHA1_SIZE</name> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>SHA1_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CKSUM_MD5</name></expr>:</case>
<expr_stmt><expr><call><name>archive_md5_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sumwrk</name><operator>-&gt;</operator><name>md5ctx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>MD5_SIZE</name> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>MD5_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checksum_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a_sum_alg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e_sum_alg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_checksum_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>a_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>a_sum_alg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_checksum_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>e_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>e_sum_alg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checksum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>abuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>asize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ebuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>esize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_checksum_update</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>a_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>abuff</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_checksum_update</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>e_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ebuff</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>checksum_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_sum_val</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>a_sum_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e_sum_val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>e_sum_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_checksum_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>a_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>a_sum_val</name></expr></argument>, <argument><expr><name>a_sum_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_checksum_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>e_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>e_sum_val</name></expr></argument>, <argument><expr><name>e_sum_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Sumcheck error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompression_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>rd_encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>GZIP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't initialize zlib stream."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>BZIP2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>BZ_MEM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>ARCHIVE_ERRNO_MISC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_PARAM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"invalid setup parameter"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_CONFIG_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"mis-compiled library"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing decompressor: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>detail</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"??"</literal></expr> </then><else>: <expr><name>detail</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_in_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_in_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_out_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_out_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LZMA_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_MEMLIMIT</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_MEMLIMIT</name></cpp:macro> <cpp:value>(1U &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>XZ</name></expr>:</case>
<case>case <expr><name>LZMA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_encoding</name></name> <operator>==</operator> <name>XZ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_stream_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>LZMA_MEMLIMIT</name></expr></argument>,
<argument><expr><name>LZMA_CONCATENATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_alone_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>LZMA_MEMLIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"compression library: "</literal>
<literal type="string">"Cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_OPTIONS_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"compression library: "</literal>
<literal type="string">"Invalid or unsupported options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing "</literal>
<literal type="string">"lzma library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>BZIP2</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA</name></expr>:</case>
<case>case <expr><name>XZ</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>entry_encoding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZIP2</name></expr>:</case> <expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LZMA</name></expr>:</case> <expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"lzma"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>XZ</name></expr>:</case> <expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"xz"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"??"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"%s compression not supported on this platform"</literal></expr></argument>,
<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outbytes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>, <decl><type ref="prev"/><name>avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>avail_in</name> <operator>=</operator> <operator>*</operator><name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outbuff</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>buff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outbuff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>OUTBUFF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory for out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>outbuff</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>outbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail_out</name> <operator>=</operator> <name>OUTBUFF_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>avail_out</name> <operator>=</operator> <operator>*</operator><name>outbytes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>rd_encoding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GZIP</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>outbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"File decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>avail_in</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>avail_out</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>BZIP2</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>outbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_STREAM_END</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"bzip decompression failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>avail_in</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>avail_out</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA</name></expr>:</case>
<case>case <expr><name>XZ</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>outbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_code</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><name>LZMA_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_STREAM_END</name></expr>:</case>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>LZMA_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"%s decompression failed(%d)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>entry_encoding</name></name> <operator>==</operator> <name>XZ</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"xz"</literal></expr></then><else>:<expr><literal type="string">"lzma"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>avail_in</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>avail_out</name> <operator>-</operator> <name><name>xar</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>BZIP2</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LZMA</name></expr>:</case>
<case>case <expr><name>XZ</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>NONE</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>outbuff</name> <operator>==</operator> <name><name>xar</name><operator>-&gt;</operator><name>outbuff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avail_out</name> <operator>&gt;</operator> <name>avail_in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>avail_out</name> <operator>=</operator> <name>avail_in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>outbuff</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>avail_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>avail_out</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompression_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up zlib decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>bzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up bzip2 decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBLZMA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>lzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lzmadec_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LZMADEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up lzmadec decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checksum_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_checksum_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>a_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_checksum_final</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>e_sumwrk</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xmlattr_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0777</literal> <operator>|</operator> <name>AE_IFREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>heap_add_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file_queue</name></name><operator>)</operator></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>uname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>gname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>hardlink</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xattr</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>xattr_list</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xattr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>xattr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xattr_free</name><argument_list>(<argument><expr><name>xattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xattr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xattr_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>nx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xattr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name></name> <operator>=</operator> <name>xattr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xattr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>nx</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>xattr_list</name></name><operator>)</operator></expr>;</init>
<condition><expr><operator>*</operator><name>nx</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>nx</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>nx</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xattr</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>nx</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>xattr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nx</name> <operator>=</operator> <name>xattr</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xattr_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xattr</name></name> <modifier>*</modifier></type><name>xattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xattr</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getencoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>enctype</name></name></type> <name>encoding</name> <init>= <expr><name>NONE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-gzip"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>GZIP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-bzip2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>BZIP2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-lzma"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>LZMA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-xz"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>XZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>encoding</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getsumalgorithm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alg</name> <init>= <expr><name>CKSUM_NONE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal> <operator>||</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alg</name> <operator>=</operator> <name>CKSUM_SHA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alg</name> <operator>=</operator> <name>CKSUM_MD5</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>alg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unknowntag_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>unknown_tag</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWNTAG_START:%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts_unknown</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unknowntag_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>unknown_tag</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>unknowntags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWNTAG_END:%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>xmlsts_unknown</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xml_sta:[%s]\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" attr:\"%s\"=\"%s\"\n"</literal></expr></argument>,
<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>base64text</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"xar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>XAR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"toc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"creation-time"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CREATION_TIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CHECKSUM_OFFSET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CHECKSUM_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_FILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ea"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xattr_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_CTIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_MTIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ATIME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_GROUP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_GID</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_USER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_UID</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_MODE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"device"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"deviceno"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICENO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"inode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_INODE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_LINK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_TYPE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"original"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>hdnext</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>hdlink_orgs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>hdlink_orgs</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>atol10</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>link</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_link</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_NAME</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"enctype"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>base64text</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"acl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ext2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_LENGTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_OFFSET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_ENCODING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <call><name>getencoding</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"archived-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_A_CHECKSUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>alg</name></name> <operator>=</operator> <call><name>getsumalgorithm</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"extracted-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_E_CHECKSUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>alg</name></name> <operator>=</operator> <call><name>getsumalgorithm</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA_CONTENT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"major"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICE_MAJOR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"minor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICE_MINOR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_CONTENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_LENGTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_OFFSET</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_ENCODING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <call><name>getencoding</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"archived-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_A_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"extracted-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_E_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_NAME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fstype"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA_FSTYPE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ACL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"appleextended"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL_APPLEEXTENDED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"access"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL_ACCESS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xml_parse_file_flags</name><argument_list>(<argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xml_parse_file_ext2</name><argument_list>(<argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CREATION_TIME</name></expr>:</case>
<case>case <expr><name>TOC_CHECKSUM_OFFSET</name></expr>:</case>
<case>case <expr><name>TOC_CHECKSUM_SIZE</name></expr>:</case>
<case>case <expr><name>FILE_DATA_LENGTH</name></expr>:</case>
<case>case <expr><name>FILE_DATA_OFFSET</name></expr>:</case>
<case>case <expr><name>FILE_DATA_SIZE</name></expr>:</case>
<case>case <expr><name>FILE_DATA_ENCODING</name></expr>:</case>
<case>case <expr><name>FILE_DATA_A_CHECKSUM</name></expr>:</case>
<case>case <expr><name>FILE_DATA_E_CHECKSUM</name></expr>:</case>
<case>case <expr><name>FILE_EA_LENGTH</name></expr>:</case>
<case>case <expr><name>FILE_EA_OFFSET</name></expr>:</case>
<case>case <expr><name>FILE_EA_SIZE</name></expr>:</case>
<case>case <expr><name>FILE_EA_ENCODING</name></expr>:</case>
<case>case <expr><name>FILE_EA_A_CHECKSUM</name></expr>:</case>
<case>case <expr><name>FILE_EA_E_CHECKSUM</name></expr>:</case>
<case>case <expr><name>FILE_EA_NAME</name></expr>:</case>
<case>case <expr><name>FILE_EA_FSTYPE</name></expr>:</case>
<case>case <expr><name>FILE_CTIME</name></expr>:</case>
<case>case <expr><name>FILE_MTIME</name></expr>:</case>
<case>case <expr><name>FILE_ATIME</name></expr>:</case>
<case>case <expr><name>FILE_GROUP</name></expr>:</case>
<case>case <expr><name>FILE_GID</name></expr>:</case>
<case>case <expr><name>FILE_USER</name></expr>:</case>
<case>case <expr><name>FILE_UID</name></expr>:</case>
<case>case <expr><name>FILE_INODE</name></expr>:</case>
<case>case <expr><name>FILE_DEVICE_MAJOR</name></expr>:</case>
<case>case <expr><name>FILE_DEVICE_MINOR</name></expr>:</case>
<case>case <expr><name>FILE_DEVICENO</name></expr>:</case>
<case>case <expr><name>FILE_MODE</name></expr>:</case>
<case>case <expr><name>FILE_TYPE</name></expr>:</case>
<case>case <expr><name>FILE_LINK</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_ACL_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_ACL_ACCESS</name></expr>:</case>
<case>case <expr><name>FILE_ACL_APPLEEXTENDED</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_NODUMP</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_IMMUTABLE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_APPEND</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_OPAQUE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_NOUNLINK</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_ARCHIVED</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_IMMUTABLE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_APPEND</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_NOUNLINK</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_SNAPSHOT</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_SecureDeletion</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Undelete</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Compress</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Synchronous</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Immutable</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_AppendOnly</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoDump</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoAtime</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompDirty</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompBlock</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoCompBlock</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompError</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_BTree</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_HashIndexed</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_iMagic</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Journaled</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoTail</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_DirSync</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_TopDir</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Reserved</name></expr>:</case>
<case>case <expr><name>UNKNOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>unknowntag_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>userData</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xml_end:[%s]\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>XAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"xar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"toc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>XAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CREATION_TIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"creation-time"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CHECKSUM_OFFSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CHECKSUM_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TOC_FILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFDIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>subdirs</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_LENGTH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_OFFSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_ENCODING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_A_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"archived-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_E_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"extracted-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_CONTENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ea"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_LENGTH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_OFFSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_ENCODING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_A_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"archived-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_E_CHECKSUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"extracted-checksum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_FSTYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fstype"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_CTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MTIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ATIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GROUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_USER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_UID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"device"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE_MAJOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"major"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE_MINOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"minor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_DEVICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICENO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"deviceno"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_INODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"inode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LINK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ACL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"acl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ACL_DEFAULT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ACL_ACCESS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"access"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ACL_APPLEEXTENDED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"appleextended"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_USER_NODUMP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserNoDump"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_USER_IMMUTABLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserImmutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_USER_APPEND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserAppend"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_USER_OPAQUE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserOpaque"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_USER_NOUNLINK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserNoUnlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_SYS_ARCHIVED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemArchived"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_SYS_IMMUTABLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemImmutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_SYS_APPEND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemAppend"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_SYS_NOUNLINK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemNoUnlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLAGS_SYS_SNAPSHOT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemSnapshot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ext2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>TOC_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_SecureDeletion</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SecureDeletion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Undelete</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Undelete"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Compress</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Compress"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Synchronous</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Synchronous"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Immutable</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Immutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_AppendOnly</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AppendOnly"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_NoDump</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoDump"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_NoAtime</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoAtime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_CompDirty</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompDirty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_CompBlock</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompBlock"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_NoCompBlock</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoCompBlock"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_CompError</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompError"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_BTree</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"BTree"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_HashIndexed</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"HashIndexed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_iMagic</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"iMagic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Journaled</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Journaled"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_NoTail</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoTail"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_DirSync</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"DirSync"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_TopDir</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TopDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EXT2_Reserved</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Reserved"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>UNKNOWN</name></expr>:</case>
<expr_stmt><expr><call><name>unknowntag_end</name><argument_list>(<argument><expr><name>xar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>base64</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>,
<expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>strappend_base64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>xar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base64</name><index>[<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>base64</name><index>[<expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>base64</name><index>[<expr><operator>*</operator><name>b</name><operator>++</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <name><name>base64</name><index>[<expr><operator>*</operator><name>b</name><operator>++</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base64</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <name><name>base64</name><index>[<expr><operator>*</operator><name>b</name><operator>++</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>base64</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>|=</operator> <name><name>base64</name><index>[<expr><operator>*</operator><name>b</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>+</operator><literal type="number">3</literal> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>known</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>known</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>known</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>userData</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tlen=%d:\"%s\"\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TOC_CHECKSUM_OFFSET</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_offset</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOC_CHECKSUM_SIZE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_chksum_size</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_PATHNAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>base64text</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strappend_base64</name><argument_list>(<argument><expr><name>xar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LINK</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_SYMLINK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>symlink</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"hardlink"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFREG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"directory"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFLNK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"character special"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFCHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"block special"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFBLK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFSOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_string</name><argument_list>(<argument><expr><literal type="string">"fifo"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator> <operator>|</operator> <name>AE_IFIFO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_TYPE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_INODE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_INO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>ino64</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE_MAJOR</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DEVMAJOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>devmajor</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICE_MINOR</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DEVMINOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>devminor</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEVICENO</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MODE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator>
<operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>atol8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>AE_IFMT</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GROUP</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_GID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>gname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GID</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_GID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_USER</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_UID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>uname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_UID</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_UID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_CTIME</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_TIME</name> <operator>|</operator> <name>HAS_CTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>parse_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MTIME</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_TIME</name> <operator>|</operator> <name>HAS_MTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>parse_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_ATIME</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_TIME</name> <operator>|</operator> <name>HAS_ATIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <call><name>parse_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_LENGTH</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_OFFSET</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_SIZE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_A_CHECKSUM</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>atohex</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>val</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATA_E_CHECKSUM</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>atohex</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>val</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_LENGTH</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_OFFSET</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_SIZE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>atol10</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_A_CHECKSUM</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>atohex</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>val</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>a_sum</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_E_CHECKSUM</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>atohex</name><argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>val</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>e_sum</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_EA_FSTYPE</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_XATTR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>xattr</name><operator>-&gt;</operator><name>fstype</name></name><operator>)</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<break>break;</break>
<case>case <expr><name>FILE_ACL_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_ACL_ACCESS</name></expr>:</case>
<case>case <expr><name>FILE_ACL_APPLEEXTENDED</name></expr>:</case>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_ACL</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>XAR</name></expr>:</case>
<case>case <expr><name>TOC</name></expr>:</case>
<case>case <expr><name>TOC_CREATION_TIME</name></expr>:</case>
<case>case <expr><name>TOC_CHECKSUM</name></expr>:</case>
<case>case <expr><name>TOC_CHECKSUM_OFFSET</name></expr>:</case>
<case>case <expr><name>TOC_CHECKSUM_SIZE</name></expr>:</case>
<case>case <expr><name>TOC_FILE</name></expr>:</case>
<case>case <expr><name>FILE_DATA</name></expr>:</case>
<case>case <expr><name>FILE_DATA_ENCODING</name></expr>:</case>
<case>case <expr><name>FILE_DATA_CONTENT</name></expr>:</case>
<case>case <expr><name>FILE_DEVICE</name></expr>:</case>
<case>case <expr><name>FILE_EA</name></expr>:</case>
<case>case <expr><name>FILE_EA_ENCODING</name></expr>:</case>
<case>case <expr><name>FILE_ACL</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_NODUMP</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_IMMUTABLE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_APPEND</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_OPAQUE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_USER_NOUNLINK</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_ARCHIVED</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_IMMUTABLE</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_APPEND</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_NOUNLINK</name></expr>:</case>
<case>case <expr><name>FILE_FLAGS_SYS_SNAPSHOT</name></expr>:</case>
<case>case <expr><name>FILE_EXT2</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_SecureDeletion</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Undelete</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Compress</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Synchronous</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Immutable</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_AppendOnly</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoDump</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoAtime</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompDirty</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompBlock</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoCompBlock</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_CompError</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_BTree</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_HashIndexed</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_iMagic</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Journaled</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_NoTail</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_DirSync</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_TopDir</name></expr>:</case>
<case>case <expr><name>FILE_EXT2_Reserved</name></expr>:</case>
<case>case <expr><name>UNKNOWN</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml_parse_file_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserNoDump"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_USER_NODUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nodump"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserImmutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_USER_IMMUTABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"uimmutable"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserAppend"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_USER_APPEND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"uappend"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserOpaque"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_USER_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"opaque"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UserNoUnlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_USER_NOUNLINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nouunlink"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemArchived"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_SYS_ARCHIVED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"archived"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemImmutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_SYS_IMMUTABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"simmutable"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemAppend"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_SYS_APPEND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"sappend"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemNoUnlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_SYS_NOUNLINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nosunlink"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SystemSnapshot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_FLAGS_SYS_SNAPSHOT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"snapshot"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>has</name></name> <operator>|=</operator> <name>HAS_FFLAGS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml_parse_file_ext2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SecureDeletion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_SecureDeletion</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"securedeletion"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Undelete"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Undelete</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nouunlink"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Compress"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Compress</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"compress"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Synchronous"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Synchronous</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"sync"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Immutable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Immutable</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"simmutable"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AppendOnly"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_AppendOnly</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"sappend"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoDump"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_NoDump</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nodump"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoAtime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_NoAtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"noatime"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompDirty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_CompDirty</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"compdirty"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompBlock"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_CompBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"comprblk"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoCompBlock"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_NoCompBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"nocomprblk"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CompError"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_CompError</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"comperr"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"BTree"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_BTree</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"btree"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"HashIndexed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_HashIndexed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"hashidx"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"iMagic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_iMagic</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"imagic"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Journaled"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Journaled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"journal"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoTail"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_NoTail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"notail"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"DirSync"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_DirSync</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"dirsync"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TopDir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_TopDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"topdir"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Reserved"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>FILE_EXT2_Reserved</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"reserved"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>xar</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fflags_text</name></name><operator>)</operator></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBXML_XMLREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml2_xmlattr_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>xmlTextReaderPtr</name></type> <name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xmlTextReaderMoveToFirstAttribute</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<name/></sizeof>*<operator>(</operator><name>attr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>xmlTextReaderConstLocalName</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>xmlTextReaderConstValue</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xmlTextReaderMoveToNextAttribute</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml2_read_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outbytes</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_total</name></name> <operator>+=</operator> <name>outbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_TOC</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>outbytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml2_close_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml2_error_hdr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>xmlParserSeverities</name></type> <name>severity</name></decl></parameter>,
<parameter><decl><type><name>xmlTextReaderLocatorPtr</name></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>locator</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>severity</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_PARSER_SEVERITY_VALIDITY_WARNING</name></expr>:</case>
<case>case <expr><name>XML_PARSER_SEVERITY_WARNING</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"XML Parsing error: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XML_PARSER_SEVERITY_VALIDITY_ERROR</name></expr>:</case>
<case>case <expr><name>XML_PARSER_SEVERITY_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"XML Parsing error: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xml2_read_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xmlTextReaderPtr</name></type> <name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr_list</name></name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>xmlReaderForIO</name><argument_list>(<argument><expr><name>xml2_read_cb</name></expr></argument>, <argument><expr><name>xml2_close_cb</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory for xml parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlTextReaderSetErrorHandler</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>xml2_error_hdr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>xmlTextReaderRead</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>empty</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>xmlTextReaderNodeType</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>xmlTextReaderConstLocalName</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_READER_TYPE_ELEMENT</name></expr>:</case>
<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>xmlTextReaderIsEmptyElement</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xml2_xmlattr_setup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xml_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xmlattr_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xml_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_READER_TYPE_END_ELEMENT</name></expr>:</case>
<expr_stmt><expr><call><name>xml_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XML_READER_TYPE_TEXT</name></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>xmlTextReaderConstValue</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xml_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XML_READER_TYPE_SIGNIFICANT_WHITESPACE</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xmlFreeTextReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlCleanupParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>ARCHIVE_OK</name></expr></then><else>:<expr><name>ARCHIVE_FATAL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSDXML_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>expat_xmlattr_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xmlattr_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier><modifier>*</modifier></type><name>atts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>atts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>atts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<name/></sizeof>*<operator>(</operator><name>attr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>atts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>atts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>atts</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_start_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier><modifier>*</modifier></type><name>atts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>expat_userData</name></name> <modifier>*</modifier></type><name>ud</name> <init>= <expr><operator>(</operator>struct <name>expat_userData</name> <operator>*</operator><operator>)</operator><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>ud</name><operator>-&gt;</operator><name>archive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xmlattr_list</name></name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>expat_xmlattr_setup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xml_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xmlattr_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ud</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_end_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>expat_userData</name></name> <modifier>*</modifier></type><name>ud</name> <init>= <expr><operator>(</operator>struct <name>expat_userData</name> <operator>*</operator><operator>)</operator><name>userData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xml_end</name><argument_list>(<argument><expr><name><name>ud</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expat_data_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>expat_userData</name></name> <modifier>*</modifier></type><name>ud</name> <init>= <expr><operator>(</operator>struct <name>expat_userData</name> <operator>*</operator><operator>)</operator><name>userData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xml_data</name><argument_list>(<argument><expr><name><name>ud</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>expat_read_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xar</name></name> <modifier>*</modifier></type><name>xar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Parser</name></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>expat_userData</name></name></type> <name>ud</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ud</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ud</name><operator>.</operator><name>archive</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xar</name> <operator>=</operator> <operator>(</operator>struct <name>xar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>XML_ParserCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory for xml parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XML_SetUserData</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XML_SetElementHandler</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>expat_start_cb</name></expr></argument>, <argument><expr><name>expat_end_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XML_SetCharacterDataHandler</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>expat_data_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>xmlsts</name></name> <operator>=</operator> <name>INIT</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>&amp;&amp;</operator> <name><name>ud</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>XML_Status</name></name></type> <name>xr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_contents</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_total</name></name> <operator>+=</operator> <name>outbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_TOC</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>XML_Parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>, <argument><expr><name><name>xar</name><operator>-&gt;</operator><name>toc_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xr</name> <operator>==</operator> <name>XML_STATUS_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"XML Parsing failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>ud</name><operator>.</operator><name>state</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
