<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_set_format_7zip.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bzlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzma.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd7_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_rb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_set_format_private.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_COPY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_LZMA1</name></cpp:macro> <cpp:value>0x030101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_LZMA2</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_DEFLATE</name></cpp:macro> <cpp:value>0x040108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_BZIP2</name></cpp:macro> <cpp:value>0x040202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_PPMD</name></cpp:macro> <cpp:value>0x030401</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEnd</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHeader</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kArchiveProperties</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAdditionalStreamsInfo</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMainStreamsInfo</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kFilesInfo</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kPackInfo</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kUnPackInfo</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSubStreamsInfo</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSize</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCRC</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kFolder</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCodersUnPackSize</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNumUnPackStream</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEmptyStream</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEmptyFile</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAnti</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kName</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCTime</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kATime</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMTime</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAttributes</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEncodedHeader</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<enum>enum <name>la_zaction</name> <block>{
<decl><name>ARCHIVE_Z_FINISH</name></decl>,
<decl><name>ARCHIVE_Z_RUN</name></decl>
}</block>;</enum>




<struct>struct <name>la_zstream</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prop_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>real_stream</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>code</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>end</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_DEFAULT_ORDER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD7_DEFAULT_MEM_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>

<struct>struct <name>ppmd_stream</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7</name></type> <name>ppmd7_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7z_RangeEnc</name></type> <name>range_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteOut</name></type> <name>byteout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buff_bytes</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>coder</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prop_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>file</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name></type> <name>rbnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>utf16name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flg</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_STREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<struct>struct <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>time_ns</name></decl>;</decl_stmt>
}</block> <decl><name><name>times</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATIME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTIME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>dir</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7zip</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>temp_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>temp_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>cur_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_number_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_number_nonempty_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_number_empty_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_number_dir_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_bytes_entry_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>total_number_time_defined</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_bytes_compressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_bytes_uncompressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>entry_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>precode_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>encoded_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crc32flg</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECODE_CRC32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODED_CRC32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name></type> <name>opt_compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_compression_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>la_zstream</name></name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>coder</name></name></type> <name>coder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wbuff</name><index>[<expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wbuff_remaining</name></decl>;</decl_stmt>






<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>file_list</name></decl>, <decl><type ref="prev"/><name>empty_list</name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_tree</name></name></type> <name>rbtree</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_7z_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_register_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_init_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_init_register_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_free_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>compress_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> ,
<parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_lzma1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_lzma2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_init_encoder_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_7z_compression_init_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compression_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>enc_uint64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_streamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coder</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>archive_write_set_format_7zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>archive_rb_tree_ops</name></name></type> <name>rb_ops</name> <init>= <expr><block>{
<expr><name>file_cmp_node</name></expr>, <expr><name>file_cmp_key</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_WRITE_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_write_set_format_7zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>zip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zip</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate 7-Zip data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_init_register</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_init_register_empty</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_LZMA1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_BZIP2</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_DEFLATE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_COPY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression_level</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name> <operator>=</operator> <name>zip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_name</name></name> <operator>=</operator> <literal type="string">"7zip"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_options</name></name> <operator>=</operator> <name>_7z_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_header</name></name> <operator>=</operator> <name>_7z_write_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_write_data</name></name> <operator>=</operator> <name>_7z_write_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_finish_entry</name></name> <operator>=</operator> <name>_7z_finish_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_close</name></name> <operator>=</operator> <name>_7z_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format_free</name></name> <operator>=</operator> <name>_7z_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_7ZIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"7zip"</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"compression"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"COPY"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"STORE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_COPY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"DEFLATE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZLIB_H</name></expr></cpp:if>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_DEFLATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"deflate"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"bzip2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"BZIP2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_BZIP2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"lzma1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"LZMA1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_LZMA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"lzma1"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"lzma2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"LZMA2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_LZMA2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"lzma2"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ppmd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"PPMD"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"PPMd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>=</operator> <name>_7Z_PPMD</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unknown compression name: `%s'"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"`%s' compression not supported "</literal>
<literal type="string">"on this platform"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"compression-level"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Illegal value `%s'"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression_level</name></name> <operator>=</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>=</operator> <call><name>archive_string_conversion_to_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>file_new</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__archive_rb_tree_insert_node</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>rbtree</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator>struct <name>archive_rb_node</name> <operator>*</operator><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>MTIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>MTIME</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>CTIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>CTIME</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>ATIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>ATIME</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_bytes_entry_name</name></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>name_len</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_dir_entry</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_register_empty</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_7z_compression_init_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>file_register</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><call><name>archive_entry_symlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_to_temp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ws</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>=</operator> <call><name>__archive_mktemp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't create temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"fwrite function failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <name>ws</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ws</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>+=</operator> <name>ws</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>compress_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>&amp;</operator> <name>PRECODE_CRC32</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>precode_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>precode_crc32</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_code</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>&amp;</operator> <name>ENCODED_CRC32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_to_temp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>&amp;</operator> <name>ENCODED_CRC32</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>_7z_write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>zip</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_finish_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>null_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_7z_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_bytes_compressed</name></name> <operator>+=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_bytes_uncompressed</name></name> <operator>+=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>cur_file</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>cur_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>flush_wbuff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_write_output</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>lseek</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"lseek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't read temporary file(%jd)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>-=</operator> <name>rs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>rs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_wbuff</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>header_offset</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>, <decl><type ref="prev"/><name>header_unpacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>, <decl><type ref="prev"/><name>data_unpacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>header_compression</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_unpacksize</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>prop_size</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>prop_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>props</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>props</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>prop_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_nonempty_entry</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>ARCHIVE_RB_TREE_FOREACH</name><argument_list>(<argument>n</argument>, <argument>&amp;(zip-&gt;rbtree)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>file_register</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>file</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LZMA_H</name></expr></cpp:if>
<expr_stmt><expr><name>header_compression</name> <operator>=</operator> <name>_7Z_LZMA1</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>==</operator> <name>_7Z_LZMA2</name> <operator>||</operator>
<name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name> <operator>==</operator> <name>_7Z_COPY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_compression</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>opt_compression</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_compression</name> <operator>=</operator> <name>_7Z_COPY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>header_compression</name> <operator>=</operator> <name>_7Z_COPY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_7z_compression_init_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>header_compression</name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>opt_compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>=</operator> <name>PRECODE_CRC32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>precode_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>data_unpacksize</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>coder</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>header_offset</name> <operator>=</operator> <name>data_offset</name> <operator>+</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_crc32</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>precode_crc32</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_unpacksize</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_compression</name> <operator>!=</operator> <name>_7Z_COPY</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>header_compression</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>prop_size</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>prop_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>props</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>props</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>prop_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_7z_compression_init_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>_7Z_COPY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>=</operator> <name>ENCODED_CRC32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEncodedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_streamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>header_offset</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>,
<argument><expr><name>header_unpacksize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>coder</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>header_crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>header_offset</name> <operator>=</operator> <name>header_offset</name> <operator>+</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_crc32</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>encoded_crc32</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>crc32flg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>header_offset</name> <operator>=</operator> <name>header_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header_crc32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>temp_offset</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"7z\xBC\xAF\x27\x1C"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le64enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le64enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header_crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wb</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff_remaining</name></name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>copy_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_wbuff</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>enc_uint64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>numdata</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>numdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>numdata</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>numdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>numdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>numdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>numdata</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_substreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coder</name></name> <modifier>*</modifier></type><name>coders</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kSubStreamsInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_nonempty_entry</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>coders</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name>_7Z_COPY</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kNumUnPackStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_nonempty_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>file</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kCRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>crc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_streamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>pack_size</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>unpack_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_coder</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coder</name></name> <modifier>*</modifier></type><name>coders</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>substrm</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>header_crc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>codec_buff</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numFolders</name></decl>, <decl><type ref="prev"/><name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coders</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_COPY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numFolders</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>total_number_nonempty_entry</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>numFolders</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kPackInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>numFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>numFolders</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kUnPackInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>numFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>fi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fi</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>fi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>num_coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_coder</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codec_id</name> <init>= <expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>archive_be64enc</name><argument_list>(<argument><expr><name>codec_buff</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>codec_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>codec_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>codec_size</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>codec_buff</name><index>[<expr><literal type="number">8</literal> <operator>-</operator> <name>codec_size</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>codec_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>codec_size</name> <operator>|</operator> <literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>codec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>codec_size</name> <operator>&amp;=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codec_buff</name><index>[<expr><literal type="number">8</literal><operator>-</operator><name>codec_size</name></expr>]</index></name></expr></argument>,
<argument><expr><name>codec_size</name></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>props</name></expr></argument>,
<argument><expr><name><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop_size</name></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kCodersUnPackSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>numFolders</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>unpack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>substrm</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>crc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kCRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>header_crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>substrm</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_substreamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>coders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOC_TIME</name></cpp:macro> <cpp:value>ARCHIVE_LITERAL_ULL(116444736000000000)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>utcToFiletime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fileTime</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fileTime</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fileTime</name> <operator>*=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fileTime</name> <operator>+=</operator> <name>ns</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fileTime</name> <operator>+=</operator> <name>EPOC_TIME</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fileTime</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filetime</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>==</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator>
<operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_time_defined</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>flg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>flg</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_le64enc</name><argument_list>(<argument><expr><name>filetime</name></expr></argument>, <argument><expr><call><name>utcToFiletime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>ti</name></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>ti</name></expr>]</index></name><operator>.</operator><name>time_ns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>filetime</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>pack_size</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>unpack_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codernum</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>coder</name></name> <modifier>*</modifier></type><name>coders</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_nonempty_entry</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kMainStreamsInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_streamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>pack_size</name></expr></argument>, <argument><expr><name>unpack_size</name></expr></argument>,
<argument><expr><name>codernum</name></expr></argument>, <argument><expr><name>coders</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kFilesInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEmptyStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_dir_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEmptyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>total_number_empty_entry</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>total_bytes_entry_name</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name_len</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_time</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kMTime</name></expr></argument>, <argument><expr><name>MTIME_IS_SET</name></expr></argument>, <argument><expr><name>MTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_time</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kCTime</name></expr></argument>, <argument><expr><name>CTIME_IS_SET</name></expr></argument>, <argument><expr><name>CTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>make_time</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kATime</name></expr></argument>, <argument><expr><name>ATIME_IS_SET</name></expr></argument>, <argument><expr><name>ATIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>total_number_entry</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>encattr</name></decl>, <decl><type ref="prev"/><name>attr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0x8010</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0x8020</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0222</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encattr</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>compress_out</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encattr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ARCHIVE_Z_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>enc_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>kEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>temp_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>file_free_register</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>coder</name><operator>.</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>f1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>file</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>file</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f1</name><operator>-&gt;</operator><name>name_len</name></name> <operator>==</operator> <name><name>f2</name><operator>-&gt;</operator><name>name_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>f1</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>, <argument><expr><name><name>f2</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>, <argument><expr><name><name>f1</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>f1</name><operator>-&gt;</operator><name>name_len</name></name> <operator>&gt;</operator> <name><name>f2</name><operator>-&gt;</operator><name>name_len</name></name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_rb_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>file</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>name_len</name></name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>newfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u16len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>newfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>archive_entry_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u16len</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for UTF-16LE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A filename cannot be converted to UTF-16LE;"</literal>
<literal type="string">"You should disable making Joliet extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>u16len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>, <argument><expr><name>u16</name></expr></argument>, <argument><expr><name>u16len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name><index>[<expr><name>u16len</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name><index>[<expr><name>u16len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>u16len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFREG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>archive_entry_symlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_mtime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>|=</operator> <name>MTIME_IS_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>MTIME</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>MTIME</name></expr>]</index></name><operator>.</operator><name>time_ns</name> <operator>=</operator> <call><name>archive_entry_mtime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_atime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>|=</operator> <name>ATIME_IS_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>ATIME</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <call><name>archive_entry_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>ATIME</name></expr>]</index></name><operator>.</operator><name>time_ns</name> <operator>=</operator> <call><name>archive_entry_atime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_ctime_is_set</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>flg</name></name> <operator>|=</operator> <name>CTIME_IS_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>CTIME</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <call><name>archive_entry_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>times</name><index>[<expr><name>CTIME</name></expr>]</index></name><operator>.</operator><name>time_ns</name> <operator>=</operator> <call><name>archive_entry_ctime_nsec</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>newfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_init_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_free_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>file_list</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file_next</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>file_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_register_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_init_register_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>empty_list</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_unsupported_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"%s compression not supported on this platform"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>compression_code_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>compression_end_copy</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&gt;</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr></argument>, <argument><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name> <operator>&amp;&amp;</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>withheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for gzip stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>deflateInit2</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>withheader</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">15</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">15</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing compression library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>compression_code_deflate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>compression_end_deflate</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>z_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name>strm</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>action</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name><operator>)</operator></expr>?</condition><then> <expr><name>Z_FINISH</name></expr></then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"GZip compression failed:"</literal>
<literal type="string">" deflate() call returned status %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>z_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflateEnd</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>withheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>withheader</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>compression_unsupported_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for bzip2 stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BZ2_bzCompressInit</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing compression library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>compression_code_bzip2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>compression_end_bzip2</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>bz_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzCompress</name><argument_list>(<argument><expr><name>strm</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>action</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name><operator>)</operator></expr>?</condition><then> <expr><name>BZ_FINISH</name></expr></then><else>: <expr><name>BZ_RUN</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>total_in_hi32</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>total_in_lo32</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>total_out_hi32</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>total_out_lo32</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_RUN_OK</name></expr>:</case>
<case>case <expr><name>BZ_FINISH_OK</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>BZ_STREAM_END</name></expr>:</case>

<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Bzip2 compression failed:"</literal>
<literal type="string">" BZ2_bzCompress() call returned status %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bz_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>bz_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzCompressEnd</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up compressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>compression_unsupported_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><literal type="string">"bzip2"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>filter_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lzma_stream</name></type> <name>lzma_init_data</name> <init>= <expr><name>LZMA_STREAM_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_filter</name> <modifier>*</modifier></type><name>lzmafilters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_options_lzma</name></type> <name>lzma_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lzmafilters</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for lzma stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lzmafilters</name> <operator>=</operator> <operator>(</operator><name>lzma_filter</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>strm</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lzma_lzma_preset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lzma_opt</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing compression library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lzmafilters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>filter_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lzmafilters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <operator>&amp;</operator><name>lzma_opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lzmafilters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_properties_size</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lastrm</name><operator>-&gt;</operator><name>prop_size</name></name><operator>)</operator></expr></argument>, <argument><expr><name>lzmafilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"lzma_properties_size failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>prop_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>lastrm</name><operator>-&gt;</operator><name>prop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_properties_encode</name><argument_list>(<argument><expr><name>lzmafilters</name></expr></argument>, <argument><expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"lzma_properties_encode failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strm</name> <operator>=</operator> <name>lzma_init_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_raw_encoder</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>lzmafilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_OK</name></expr>:</case>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>compression_code_lzma</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>compression_end_lzma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing compression library: "</literal>
<literal type="string">"Cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing compression library: "</literal>
<literal type="string">"It's a bug in liblzma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_lzma1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>compression_init_encoder_lzma</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><name>LZMA_FILTER_LZMA1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_lzma2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>compression_init_encoder_lzma</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><name>LZMA_FILTER_LZMA2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>lzma_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_code</name><argument_list>(<argument><expr><name>strm</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>action</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name><operator>)</operator></expr>?</condition><then> <expr><name>LZMA_FINISH</name></expr></then><else>: <expr><name>LZMA_RUN</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_OK</name></expr>:</case>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>LZMA_STREAM_END</name></expr>:</case>

<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
<case>case <expr><name>LZMA_MEMLIMIT_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"lzma compression error:"</literal>
<literal type="string">" %ju MiB would have been needed"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>lzma_memusage</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"lzma compression failed:"</literal>
<literal type="string">" lzma_code() call returned status %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end_lzma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_stream</name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator><name>lzma_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_lzma1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>compression_unsupported_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><literal type="string">"lzma"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_lzma2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>compression_unsupported_encoder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><literal type="string">"lzma"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ppmd_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Byte</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IByteOut</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ppmd_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator>struct <name>ppmd_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>buff_ptr</name></name> <operator>&lt;</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>strm</name><operator>-&gt;</operator><name>buff_ptr</name></name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_init_encoder_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxOrder</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>msize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ppmd_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compression_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strm</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff_ptr</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff_end</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>props</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Coludn't allocate memory for PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>maxOrder</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><name>props</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Construct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Alloc</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Coludn't allocate memory for PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ppmd7_context</name></name><operator>)</operator></expr></argument>, <argument><expr><name>maxOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>byteout</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator>struct <name>archive_write</name> <operator>*</operator><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>byteout</name><operator>.</operator><name>Write</name></name> <operator>=</operator> <name>ppmd_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>range_enc</name><operator>.</operator><name>Stream</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>byteout</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7z_RangeEnc_Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>range_enc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>strm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>compression_code_ppmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>compression_end_ppmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>prop_size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <name>props</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ppmd_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator>struct <name>ppmd_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>buff_ptr</name></name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_out</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_out</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>stat</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>buff_ptr</name></name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&amp;&amp;</operator> <name><name>lastrm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_EncodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ppmd7_context</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>range_enc</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><name><name>lastrm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>total_in</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>ARCHIVE_Z_FINISH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7z_RangeEnc_FlushData</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>range_enc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>buff_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end_ppmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ppmd_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strm</name> <operator>=</operator> <operator>(</operator>struct <name>ppmd_stream</name> <operator>*</operator><operator>)</operator><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>real_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>_7z_compression_init_encoder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>compression</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>compression_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format_data</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>compression</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_DEFLATE</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_deflate</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>compression_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_BZIP2</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_bzip2</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_LZMA1</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_lzma1</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_LZMA2</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_lzma2</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_PPMD</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_ppmd</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>PPMD7_DEFAULT_ORDER</name></expr></argument>, <argument><expr><name>PPMD7_DEFAULT_MEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_COPY</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compression_init_encoder_copy</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>wbuff</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>la_zaction</name></name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>lastrm</name><operator>-&gt;</operator><name>code</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>la_zstream</name></name> <modifier>*</modifier></type><name>lastrm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lastrm</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>prop_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastrm</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name><name>lastrm</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lastrm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


</unit>
