<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_write_add_filter_by_name.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>


<struct><specifier>static</specifier> <specifier>const</specifier>
struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> }</block> <decl><name><name>names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"b64encode"</literal></expr>, <expr><name>archive_write_add_filter_b64encode</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bzip2"</literal></expr>, <expr><name>archive_write_add_filter_bzip2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"compress"</literal></expr>, <expr><name>archive_write_add_filter_compress</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"grzip"</literal></expr>, <expr><name>archive_write_add_filter_grzip</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gzip"</literal></expr>, <expr><name>archive_write_add_filter_gzip</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lrzip"</literal></expr>, <expr><name>archive_write_add_filter_lrzip</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lz4"</literal></expr>, <expr><name>archive_write_add_filter_lz4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lzip"</literal></expr>, <expr><name>archive_write_add_filter_lzip</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lzma"</literal></expr>, <expr><name>archive_write_add_filter_lzma</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lzop"</literal></expr>, <expr><name>archive_write_add_filter_lzop</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uuencode"</literal></expr>, <expr><name>archive_write_add_filter_uuencode</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xz"</literal></expr>, <expr><name>archive_write_add_filter_xz</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"zstd"</literal></expr>, <expr><name>archive_write_add_filter_zstd</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>archive_write_add_filter_by_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>setter</name><operator>)</operator><operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="string">"No such filter '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ARCHIVE_STATE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
