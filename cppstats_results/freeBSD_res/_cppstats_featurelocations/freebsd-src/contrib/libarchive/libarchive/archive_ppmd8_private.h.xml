<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_ppmd8_private.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_PPMD8_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_PPMD8_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD8_MIN_ORDER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD8_MAX_ORDER</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct_decl>struct <name>CPpmd8_Context_</name>;</struct_decl>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name><name>struct</name> <name>CPpmd8_Context_</name></name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd8_Context_Ref</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <name>CPpmd8_Context_</name>
<block>{
<decl_stmt><decl><type><name>Byte</name></type> <name>NumStats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>SummFreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State_Ref</name></type> <name>Stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd8_Context_Ref</name></type> <name>Suffix</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd8_Context</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8Context_OneState</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_State *)&amp;(p)-&gt;SummFreq)</cpp:value></cpp:define>





<enum>enum
<block>{
<decl><name>PPMD8_RESTORE_METHOD_RESTART</name></decl>,
<decl><name>PPMD8_RESTORE_METHOD_CUT_OFF</name></decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD8_FREEZE_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <decl><name>PPMD8_RESTORE_METHOD_FREEZE</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</enum>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>CPpmd8_Context</name> <modifier>*</modifier></type><name>MinContext</name></decl>, <modifier>*</modifier><name>MaxContext</name>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>FoundState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>OrderFall</name></decl>, <name>InitEsc</name>, <name>PrevSuccess</name>, <name>MaxOrder</name>;</decl_stmt>
<decl_stmt><decl><type><name>Int32</name></type> <name>RunLength</name></decl>, <name>InitRL</name>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>GlueCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name> <modifier>*</modifier></type><name>Base</name></decl>, <modifier>*</modifier><name>LoUnit</name>, <modifier>*</modifier><name>HiUnit</name>, <modifier>*</modifier><name>Text</name>, <modifier>*</modifier><name>UnitsStart</name>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>AlignOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>RestoreMethod</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>Low</name></decl>;</decl_stmt>
<union>union
<block>{
<decl_stmt><decl><type><name>IByteIn</name> <modifier>*</modifier></type><name>In</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteOut</name> <modifier>*</modifier></type><name>Out</name></decl>;</decl_stmt>
}</block> <decl><name>Stream</name></decl>;</union>

<decl_stmt><decl><type><name>Byte</name></type> <name><name>Indx2Units</name><index>[<expr><name>PPMD_NUM_INDEXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name><name>Units2Indx</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_Void_Ref</name></type> <name><name>FreeList</name><index>[<expr><name>PPMD_NUM_INDEXES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name><name>Stamps</name><index>[<expr><name>PPMD_NUM_INDEXES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Byte</name></type> <name><name>NS2BSIndx</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <name><name>NS2Indx</name><index>[<expr><literal type="number">260</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_See</name></type> <name>DummySee</name></decl>, <name><name>See</name><index>[<expr><literal type="number">24</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name><name>BinSumm</name><index>[<expr><literal type="number">25</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd8</name>;</typedef>

<function_decl><type><name>void</name></type> <name>Ppmd8_Construct</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Bool</name></type> <name>Ppmd8_Alloc</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_Free</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxOrder</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>restoreMethod</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_WasAllocated</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;Base != NULL)</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>Byte</name></type> <name><name>PPMD8_kExpEscape</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetPtr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetContext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetStats</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;Stats)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetPtr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((p)-&gt;Base + (offs)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetContext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd8_Context *)Ppmd8_GetPtr((p), (offs)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetStats</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_State *)Ppmd8_GetPtr((p), ((ctx)-&gt;Stats)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>Ppmd8_Update1</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_Update1_0</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_Update2</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_UpdateBin</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_GetBinSumm</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;p-&gt;BinSumm[p-&gt;NS2Indx[Ppmd8Context_OneState(p-&gt;MinContext)-&gt;Freq - 1]][ p-&gt;NS2BSIndx[Ppmd8_GetContext(p, p-&gt;MinContext-&gt;Suffix)-&gt;NumStats] + p-&gt;PrevSuccess + p-&gt;MinContext-&gt;Flags + ((p-&gt;RunLength &gt;&gt; 26) &amp; 0x20)]</cpp:value></cpp:define>




<function_decl><type><name>CPpmd_See</name> <modifier>*</modifier></type><name>Ppmd8_MakeEscFreq</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>numMasked</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>Bool</name></type> <name>Ppmd8_RangeDec_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_RangeDec_IsFinishedOK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;Code == 0)</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>Ppmd8_DecodeSymbol</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd8_RangeEnc_Init</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (p)-&gt;Low = 0; (p)-&gt;Range = 0xFFFFFFFF; }</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>Ppmd8_RangeEnc_FlushData</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Ppmd8_EncodeSymbol</name><parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd8_Construct</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Bool</name></type> (<modifier>*</modifier><name>Ppmd8_Alloc</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd8_Free</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Ppmd8_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_order</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>restore_method</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_WasAllocated</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;Base != NULL)</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>Ppmd8_RangeDec_Init</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>Ppmd8_DecodeSymbol</name>)<parameter_list>(<parameter><decl><type><name>CPpmd8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>IPpmd8</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IPpmd8</name></type> <name>__archive_ppmd8_functions</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
