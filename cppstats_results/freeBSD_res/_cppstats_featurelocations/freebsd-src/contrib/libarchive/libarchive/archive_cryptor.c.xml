<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_cryptor.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_cryptor_private.h"</cpp:file></cpp:include>










<function><type><name>int</name></type> <name>__libarchive_cryptor_build_hack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTOR_USE_Apple_CommonCrypto</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CCKeyDerivationPBKDF</name><argument_list>(<argument><expr><name>kCCPBKDF2</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>,
<argument><expr><name>pw_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>kCCPRFHmacAlgSHA1</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
<argument><expr><name>derived_key</name></expr></argument>, <argument><expr><name>derived_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BCRYPT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"Bcrypt.lib"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BCRYPT_ALG_HANDLE</name></type> <name>hAlg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptOpenAlgorithmProvider</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hAlg</name></expr></argument>, <argument><expr><name>BCRYPT_SHA1_ALGORITHM</name></expr></argument>,
<argument><expr><name>MS_PRIMITIVE_PROVIDER</name></expr></argument>, <argument><expr><name>BCRYPT_ALG_HANDLE_HMAC_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptDeriveKeyPBKDF2</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>,
<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>pw</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG</name><operator>)</operator><name>pw_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>salt</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG</name><operator>)</operator><name>salt_len</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><name>derived_key</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG</name><operator>)</operator><name>derived_key_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBMBEDCRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MBEDTLS_PKCS5_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pkcs5_pbkdf2_hmac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>,
<argument><expr><name>pw_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>, <argument><expr><name>derived_key_len</name></expr></argument>, <argument><expr><name>derived_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNETTLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETTLE_PBKDF2_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pbkdf2_hmac_sha1</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pw_len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
<argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>derived_key_len</name></expr></argument>, <argument><expr><name>derived_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PKCS5_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>PKCS5_PBKDF2_HMAC_SHA1</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pw_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
<argument><expr><name>derived_key_len</name></expr></argument>, <argument><expr><name>derived_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbkdf2_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>derived_key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pw</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pw_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>salt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>salt_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rounds</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>derived_key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>derived_key_len</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTOR_USE_Apple_CommonCrypto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&lt;</operator> <literal type="number">1090</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCCAlgorithmAES</name></cpp:macro> <cpp:value>kCCAlgorithmAES128</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CCCryptorStatus</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CCCryptorCreateWithMode</name><argument_list>(<argument><expr><name>kCCEncrypt</name></expr></argument>, <argument><expr><name>kCCModeECB</name></expr></argument>, <argument><expr><name>kCCAlgorithmAES</name></expr></argument>,
<argument><expr><name>ccNoPadding</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>kCCSuccess</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CCCryptorRef</name></type> <name>ref</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CCCryptorStatus</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CCCryptorReset</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>kCCSuccess</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>kCCUnimplemented</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CCCryptorUpdate</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>,
<argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>kCCSuccess</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BCRYPT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BCRYPT_ALG_HANDLE</name></type> <name>hAlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BCRYPT_KEY_HANDLE</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>keyObj_len</name></decl>, <decl><type ref="prev"/><name>aes_key_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PBYTE</name></type> <name>keyObj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BCRYPT_KEY_LENGTHS_STRUCT</name></type> <name>key_lengths</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hAlg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hKey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keyObj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>aes_key_len</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>aes_key_len</name> <operator>=</operator> <literal type="number">192</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>aes_key_len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptOpenAlgorithmProvider</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hAlg</name></expr></argument>, <argument><expr><name>BCRYPT_AES_ALGORITHM</name></expr></argument>,
<argument><expr><name>MS_PRIMITIVE_PROVIDER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptGetProperty</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><name>BCRYPT_KEY_LENGTHS</name></expr></argument>, <argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><operator>&amp;</operator><name>key_lengths</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_lengths</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key_lengths</name><operator>.</operator><name>dwMinLength</name></name> <operator>&gt;</operator> <name>aes_key_len</name>
<operator>||</operator> <name><name>key_lengths</name><operator>.</operator><name>dwMaxLength</name></name> <operator>&lt;</operator> <name>aes_key_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptGetProperty</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><name>BCRYPT_OBJECT_LENGTH</name></expr></argument>, <argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><operator>&amp;</operator><name>keyObj_len</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyObj_len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>keyObj</name> <operator>=</operator> <operator>(</operator><name>PBYTE</name><operator>)</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyObj_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keyObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptSetProperty</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><name>BCRYPT_CHAINING_MODE</name></expr></argument>,
<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><name>BCRYPT_CHAIN_MODE_ECB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BCRYPT_CHAIN_MODE_ECB</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptGenerateSymmetricKey</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hKey</name></expr></argument>,
<argument><expr><name>keyObj</name></expr></argument>, <argument><expr><name>keyObj_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG</name><operator>)</operator><name>key_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name>hAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hAlg</name></name> <operator>=</operator> <name>hAlg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hKey</name></name> <operator>=</operator> <name>hKey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keyObj</name></name> <operator>=</operator> <name>keyObj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keyObj_len</name></name> <operator>=</operator> <name>keyObj_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BCryptEncrypt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hKey</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hAlg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BCryptCloseAlgorithmProvider</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hAlg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hAlg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BCryptDestroyKey</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hKey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>keyObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keyObj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBMBEDCRYPTO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MBEDTLS_AES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNETTLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETTLE_AES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NETTLE_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<expr_stmt><expr><call><name>aes_set_encrypt_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AES128_KEY_SIZE</name></expr>:</case>
<expr_stmt><expr><call><name>aes128_set_encrypt_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c128</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes128_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c128</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AES192_KEY_SIZE</name></expr>:</case>
<expr_stmt><expr><call><name>aes192_set_encrypt_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c192</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes192_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c192</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AES256_KEY_SIZE</name></expr>:</case>
<expr_stmt><expr><call><name>aes256_set_encrypt_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c256</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes256_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>c256</name></name></expr></argument>, <argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>EVP_aes_128_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>EVP_aes_192_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>EVP_aes_256_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>EVP_CIPHER_CTX_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outl</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>,
<argument><expr><name>AES_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>outl</name> <operator>!=</operator> <name>AES_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_CRYPTOR_STUB</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_init</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key_len</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_encrypt_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_release</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRYPTOR_STUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_update</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>in_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>out_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_ctr_encrypt_counter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>aes_ctr_increase_counter</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nonce</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>nonce</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aes_ctr_update</name><parameter_list>(<parameter><decl><type><name>archive_crypto_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>in</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ebuf</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pos</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>in_len</name> <operator>&lt;</operator> <operator>*</operator><name>out_len</name><operator>)</operator></expr>?</condition><then> <expr><name>in_len</name></expr></then><else>: <expr><operator>*</operator><name>out_len</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>AES_BLOCK_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aes_ctr_increase_counter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aes_ctr_encrypt_counter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>max</name> <operator>-</operator><name>i</name> <operator>&gt;=</operator> <name>AES_BLOCK_SIZE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>AES_BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>pos</name></expr>]</index></name> <operator>^</operator> <name><name>ebuf</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>AES_BLOCK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_ctr_increase_counter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aes_ctr_encrypt_counter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ebuf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encr_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archive_cryptor</name></name></type> <name>__archive_cryptor</name> <init>=
<expr><block>{
<expr><operator>&amp;</operator><name>pbkdf2_sha1</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_init</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_update</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_release</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_init</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_update</name></expr>,
<expr><operator>&amp;</operator><name>aes_ctr_release</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
