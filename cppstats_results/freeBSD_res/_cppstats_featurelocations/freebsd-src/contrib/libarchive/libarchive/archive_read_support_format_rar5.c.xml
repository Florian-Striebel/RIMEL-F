<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_rar5.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd7_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BLAKE2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blake2.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_blake2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar5_min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? (b) : (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar5_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rar5_countof</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const ssize_t) (sizeof(X) / sizeof(*X)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CODE</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { printf("rar5: " __VA_ARGS__); puts(""); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CODE</name></cpp:macro> <cpp:value>if(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rar5_signature_xor</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">243</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>g_unpack_window_size</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME_IN_CHARS</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME_IN_BYTES</name></cpp:macro> <cpp:value>(4 * MAX_NAME_IN_CHARS)</cpp:value></cpp:define>

<struct>struct <name>file_header</name> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>unpacked_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>solid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>service</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>eof</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dir</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>e_mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>e_ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>e_atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>e_unix_ns</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>stored_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>calculated_crc32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>blake2sp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blake2sp_state</name></type> <name>b2state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>has_blake2</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>redir_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>redir_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>solid_window_size</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>EXTRA</name> <block>{
<decl><name>EX_CRYPT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>EX_HASH</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>EX_HTIME</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>EX_VERSION</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>EX_REDIR</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>EX_UOWNER</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>EX_SUBDATA</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIR_SYMLINK_IS_DIR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<enum>enum <name>REDIR_TYPE</name> <block>{
<decl><name>REDIR_TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REDIR_TYPE_UNIXSYMLINK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>REDIR_TYPE_WINSYMLINK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>REDIR_TYPE_JUNCTION</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>REDIR_TYPE_HARDLINK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>REDIR_TYPE_FILECOPY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_USER_NAME</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_GROUP_NAME</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_USER_UID</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_GROUP_GID</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_MAXNAMELEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<enum>enum <name>FILTER_TYPE</name> <block>{
<decl><name>FILTER_DELTA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FILTER_E8</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FILTER_E8E9</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FILTER_ARM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>FILTER_AUDIO</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>FILTER_RGB</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>FILTER_ITANIUM</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>FILTER_PPM</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>FILTER_NONE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>filter_info</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>block_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>block_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>width</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>data_ready</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cdeque</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>beg_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>end_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cap_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name><modifier>*</modifier></type> <name>arr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>decode_table</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>decode_len</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>decode_pos</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>quick_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>quick_len</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>quick_num</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>decode_num</name><index>[<expr><literal type="number">306</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>comp_state</name> <block>{


<decl_stmt><decl><type><name>uint8_t</name></type> <name>initialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>all_filters_applied</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>switch_multivolume</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>block_parsing_finished</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>notused</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>window_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>filtered_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>block_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>window_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>write_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_write_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_unstore_ptr</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int64_t</name></type> <name>solid_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>cur_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_len</name></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_BC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>decode_table</name></name></type> <name>bd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_NC</name></cpp:macro> <cpp:value>306</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>decode_table</name></name></type> <name>ld</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_DC</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>decode_table</name></name></type> <name>dd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_LDC</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>decode_table</name></name></type> <name>ldd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_RC</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>decode_table</name></name></type> <name>rd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFF_TABLE_SIZE</name></cpp:macro> <cpp:value>(HUFF_NC + HUFF_DC + HUFF_RC + HUFF_LDC)</cpp:value></cpp:define>


<decl_stmt><decl><type><name><name>struct</name> <name>cdeque</name></name></type> <name>filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_block_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>last_block_length</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>dist_cache</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>data_ready</name></name></type> <name><name>dready</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>bit_reader</name> <block>{
<decl_stmt><decl><type><name>int8_t</name></type> <name>bit_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_addr</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>compressed_block_header</name> <block>{







<decl_stmt><decl><type><name>uint8_t</name></type> <name>block_flags_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>block_cksum</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>main_header</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>solid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>volume</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>endarc</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>notused</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vol_no</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>generic_header</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>split_after</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>split_before</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>padding</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_header_id</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>multivolume</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>expected_vol_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>push_buf</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rar5</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>header_initialized</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>skipped_magic</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>skip_mode</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>merge_mode</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>qlist_offset</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>rr_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>generic_header</name></name></type> <name>generic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>main_header</name></name></type> main</decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>comp_state</name></name></type> <name>cstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_header</name></name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bit_reader</name></name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>multivolume</name></name></type> <name>vol</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>compressed_block_header</name></name></type> <name>last_block_hdr</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rar5_signature</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_global_checksums</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rar5_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>push_data_ready</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>


<enum>enum <name>CDE_RETURN_VALUES</name> <block>{
<decl><name>CDE_OK</name></decl>, <decl><name>CDE_ALLOC</name></decl>, <decl><name>CDE_PARAM</name></decl>, <decl><name>CDE_OUT_OF_BOUNDS</name></decl>,
}</block>;</enum>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cdeque_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>cdeque_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_capacity_power_of_2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>max_capacity_power_of_2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name> <operator>=</operator> <name>max_capacity_power_of_2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>max_capacity_power_of_2</name> <operator>&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cdeque_clear</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max_capacity_power_of_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name></name></expr> ?</condition><then> <expr><name>CDE_OK</name></expr> </then><else>: <expr><name>CDE_ALLOC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>cdeque_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>cdeque_front_fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>arr</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cdeque_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cdeque_front_fast</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CDE_OK</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>CDE_OUT_OF_BOUNDS</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cdeque_push_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_OUT_OF_BOUNDS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>end_pos</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>CDE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>cdeque_pop_front_fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>arr</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cdeque_pop_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d</name> <operator>||</operator> <operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_PARAM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CDE_OUT_OF_BOUNDS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cdeque_pop_front_fast</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CDE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>cdeque_filter_p</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>cdeque_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>cdeque_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>arr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>beg_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cap_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>uint8_t</name></type> <name>bf_bit_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>compressed_block_header</name></name><modifier>*</modifier></type> <name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>hdr</name><operator>-&gt;</operator><name>block_flags_u8</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>uint8_t</name></type> <name>bf_byte_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>compressed_block_header</name></name><modifier>*</modifier></type> <name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>block_flags_u8</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>uint8_t</name></type> <name>bf_is_table_present</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>compressed_block_header</name></name><modifier>*</modifier></type> <name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>block_flags_u8</name></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>get_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>rar5</name><operator>*</operator><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>circular_memcpy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>start</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>end</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len1</name> <init>= <expr><name>mask</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>start</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len2</name> <init>= <expr><name>end</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><index>[<expr><name>start</name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>len1</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><index>[<expr><name>start</name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>read_filter_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>linear_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>circular_memcpy</name><argument_list>(<argument><expr><name>linear_buf</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>archive_le32dec</name><argument_list>(<argument><expr><name>linear_buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_filter_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>add_new_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>f</name> <init>=
<expr><operator>(</operator>struct <name>filter_info</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>filter_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cdeque_push_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>, <argument><expr><call><name>cdeque_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_delta_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dest_pos</name></decl>, <decl><type ref="prev"/><name>src_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>flt</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>dest_pos</name> <operator>=</operator> <name>i</name></expr>;</init>
<condition><expr><name>dest_pos</name> <operator>&lt;</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr>;</condition>
<incr><expr><name>dest_pos</name> <operator>+=</operator> <name><name>flt</name><operator>-&gt;</operator><name>channels</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[
<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator>
<name>src_pos</name><operator>)</operator> <operator>&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_byte</name> <operator>-=</operator> <name>byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name><index>[<expr><name>dest_pos</name></expr>]</index></name> <operator>=</operator> <name>prev_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_e8e9_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>extended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>file_size</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circular_memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[
<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator>
<name>i</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xE8</literal> <operator>||</operator> <operator>(</operator><name>extended</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xE9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name><operator>)</operator> <operator>%</operator> <name>file_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>read_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator>
<name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>addr</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>addr</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr></argument>,
<argument><expr><name>addr</name> <operator>+</operator> <name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>addr</name> <operator>-</operator> <name>file_size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>naddr</name> <init>= <expr><name>addr</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr></argument>,
<argument><expr><name>naddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_arm_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>circular_memcpy</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[
<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator>
<name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="number">0xEB</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>read_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xeb000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for filter data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>flt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILTER_DELTA</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_delta_filter</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILTER_E8</name></expr>:</case>

<case>case <expr><name>FILTER_E8E9</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_e8e9_filter</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>,
<argument><expr><name><name>flt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILTER_E8E9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILTER_ARM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_arm_filter</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported filter type: 0x%x"</literal></expr></argument>, <argument><expr><name><name>flt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>push_data_ready</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>,
<argument><expr><name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Stack overflow when submitting unpacked data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>+=</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>push_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>idx_begin</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>idx_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>wmask</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>solid_write_ptr</name> <init>= <expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx_begin</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx_end</name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name></expr>;</expr_stmt>






<if_stmt><if>if<condition>(<expr><operator>(</operator><name>idx_begin</name> <operator>&amp;</operator> <name>wmask</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>idx_end</name> <operator>&amp;</operator> <name>wmask</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>frag1_size</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name> <operator>-</operator>
<operator>(</operator><name>idx_begin</name> <operator>&amp;</operator> <name>wmask</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>frag2_size</name> <init>= <expr><name>idx_end</name> <operator>&amp;</operator> <name>wmask</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>push_data_ready</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>solid_write_ptr</name></expr></argument>, <argument><expr><name>frag1_size</name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>push_data_ready</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>frag2_size</name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>+</operator> <name>frag1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>+=</operator> <name>frag1_size</name> <operator>+</operator> <name>frag2_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>push_data_ready</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name>solid_write_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>idx_end</name> <operator>-</operator> <name>idx_begin</name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>+=</operator> <name>idx_end</name> <operator>-</operator> <name>idx_begin</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>push_window_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>idx_begin</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>idx_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>push_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>, <argument><expr><name>idx_begin</name></expr></argument>, <argument><expr><name>idx_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>all_filters_applied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>CDE_OK</name> <operator>==</operator> <call><name>cdeque_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>,
<argument><expr><call><name>cdeque_filter_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>&gt;</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>&gt;=</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator>
<name><name>flt</name><operator>-&gt;</operator><name>block_length</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>==</operator> <name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_filter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cdeque_pop_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>,
<argument><expr><call><name>cdeque_filter_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>push_window_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr></argument>,
<argument><expr><name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>all_filters_applied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dist_cache_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dist_cache</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dist_cache_touch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dist_cache</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dist</name> <init>= <expr><name><name>q</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
<return>return <expr><name>dist</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cdeque</name></name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></init></decl>;</decl_stmt>








<while>while<condition>(<expr><call><name>cdeque_size</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>CDE_OK</name> <operator>==</operator> <call><name>cdeque_pop_front</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>cdeque_filter_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>cdeque_clear</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_file_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blake2sp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>b2state</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>solid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_unstore_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_type</name></name> <operator>=</operator> <name>REDIR_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_filters</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_archive_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>ar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ar</name> <operator>=</operator> <operator>(</operator>struct <name>archive_read</name><operator>*</operator><operator>)</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>, <argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>,
<argument><expr><literal type="string">"archive_read_support_format_rar5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>how_many</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>how_many</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>how_many</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>how_many</name> <operator>==</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>how_many</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>ARCHIVE_OK</name></expr>
</then><else>: <expr><name>ARCHIVE_FATAL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>int</name></type> <name>read_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pvalue</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pvalue_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shift</name> <operator>+=</operator> <literal type="number">7</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pvalue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvalue</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name>pvalue_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvalue_len</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if<condition>(<expr><name>pvalue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvalue</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pvalue_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvalue_len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_var_sized</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pvalue</name></decl></parameter>,
<parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pvalue_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>pvalue_len</name></expr> ?</condition><then> <expr><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_size</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pvalue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pvalue</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pvalue_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pvalue_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>v_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bits_32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bits_16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>|=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name><index>[<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>bits</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_bits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_bits</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name> <operator>+</operator> <name>bits</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+=</operator> <name>new_bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name> <operator>=</operator> <name>new_bits</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>read_consume_bits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_u32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>pvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pvalue</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ARCHIVE_OK</name> <operator>==</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_u64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pvalue</name> <operator>=</operator> <call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ARCHIVE_OK</name> <operator>==</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bid_standard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>signature</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rar5_signature</name><argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">30</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>my_bid</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>best_bid</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>my_bid</name> <operator>=</operator> <call><name>bid_standard</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>my_bid</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>my_bid</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>





<return>return <expr><name>ARCHIVE_WARN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_RAR_V5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"RAR5"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_window_mask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<enum>enum <name>HEADER_FLAGS</name> <block>{
<decl><name>HFL_EXTRA_DATA</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>HFL_DATA</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>HFL_SKIP_IF_UNKNOWN</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>HFL_SPLIT_BEFORE</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>HFL_SPLIT_AFTER</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>HFL_CHILD</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,
<decl><name>HFL_INHERITED</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_main_locator_extra_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>locator_flags</name></decl>;</decl_stmt>

<enum>enum <name>LOCATOR_FLAGS</name> <block>{
<decl><name>QLIST</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, <decl><name>RECOVERY</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
}</block>;</enum>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>locator_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>locator_flags</name> <operator>&amp;</operator> <name>QLIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>qlist_offset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>locator_flags</name> <operator>&amp;</operator> <name>RECOVERY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>rr_offset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_file_extra_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>value_len</name></decl>;</decl_stmt>

<enum>enum <name>HASH_TYPE</name> <block>{
<decl><name>BLAKE2sp</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>
}</block>;</enum>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>hash_type</name> <operator>==</operator> <name>BLAKE2sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hash_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>blake2sp</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>has_blake2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>blake2sp</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>hash_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported hash type (0x%x)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>hash_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>time_win_to_unix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>win_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ns_in_sec</name> <init>= <expr><literal type="number">10000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>sec_to_unix</name> <init>= <expr><literal type="number">11644473600LL</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>win_time</name> <operator>/</operator> <name>ns_in_sec</name> <operator>-</operator> <name>sec_to_unix</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_htime_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>unix_time</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>unix_time</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>time_val</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>where</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>time_val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>windows_time</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windows_time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>where</name> <operator>=</operator> <call><name>time_win_to_unix</name><argument_list>(<argument><expr><name>windows_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_file_extra_version</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>value_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>version_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>name_utf8_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cur_filename</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>cur_filename</name> <operator>=</operator> <call><name>archive_entry_pathname_utf8</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cur_filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Version entry without file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_utf8_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>archive_string_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version_string</name></expr></argument>, <argument><expr><literal type="string">";%zu"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_utf8_string</name></expr></argument>, <argument><expr><name>cur_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_utf8_string</name></expr></argument>, <argument><expr><name><name>version_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_entry_update_pathname_utf8</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>name_utf8_string</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name_utf8_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_file_extra_htime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>unix_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>value_len</name></decl>;</decl_stmt>

<enum>enum <name>HTIME_FLAGS</name> <block>{
<decl><name>IS_UNIX</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>HAS_MTIME</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>HAS_CTIME</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>HAS_ATIME</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>HAS_UNIX_NS</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
}</block>;</enum>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unix_time</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>IS_UNIX</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HAS_MTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_htime_item</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>unix_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_mtime</name></name></expr></argument>,
<argument><expr><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_mtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HAS_CTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_htime_item</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>unix_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_ctime</name></name></expr></argument>,
<argument><expr><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_ctime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HAS_ATIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_htime_item</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>unix_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_atime</name></name></expr></argument>,
<argument><expr><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HAS_UNIX_NS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>e_unix_ns</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_file_extra_redir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>target_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>target_utf8_buf</name><index>[<expr><name>MAX_NAME_IN_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>target_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>target_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>target_size</name> <operator>&gt;</operator> <operator>(</operator><name>MAX_NAME_IN_CHARS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Link target is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>target_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"No link target specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target_utf8_buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>target_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target_utf8_buf</name><index>[<expr><name>target_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>target_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REDIR_TYPE_UNIXSYMLINK</name></expr>:</case>
<case>case <expr><name>REDIR_TYPE_WINSYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>AE_IFLNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_update_symlink_utf8</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>target_utf8_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_flags</name></name> <operator>&amp;</operator> <name>REDIR_SYMLINK_IS_DIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_symlink_type</name><argument_list>(<argument><expr><name>e</name></expr></argument>,
<argument><expr><name>AE_SYMLINK_TYPE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_symlink_type</name><argument_list>(<argument><expr><name>e</name></expr></argument>,
<argument><expr><name>AE_SYMLINK_TYPE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>REDIR_TYPE_HARDLINK</name></expr>:</case>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>AE_IFREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_update_hardlink_utf8</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>target_utf8_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_file_extra_owner</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>OWNER_MAXNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OWNER_USER_NAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>name_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_size</name> <operator>&gt;=</operator> <name>OWNER_MAXNAMELEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>OWNER_MAXNAMELEN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>name_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>name_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_set_uname</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OWNER_GROUP_NAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>name_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_size</name> <operator>&gt;=</operator> <name>OWNER_MAXNAMELEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>OWNER_MAXNAMELEN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>name_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>name_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_set_gname</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OWNER_USER_UID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>la_int64_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OWNER_GROUP_GID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>extra_data_size</name> <operator>-=</operator> <name>value_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>la_int64_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_head_file_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>extra_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_field_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_field_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_FATAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>var_size</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>extra_data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_field_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra_data_size</name> <operator>-=</operator> <name>var_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>var_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_field_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra_data_size</name> <operator>-=</operator> <name>var_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>var_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>extra_field_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EX_HASH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_file_extra_hash</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EX_HTIME</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_file_extra_htime</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EX_REDIR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_file_extra_redir</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EX_UOWNER</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_file_extra_owner</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EX_VERSION</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_file_extra_version</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EX_CRYPT</name></expr>:</case>

<case>case <expr><name>EX_SUBDATA</name></expr>:</case>

<default>default:</default>

<return>return <expr><call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>extra_data_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_head_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>block_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>extra_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compression_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>host_os</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>unpacked_size</name></decl>, <decl><type ref="prev"/><name>window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>crc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_method</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name_utf8_buf</name><index>[<expr><name>MAX_NAME_IN_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<enum>enum <name>FILE_FLAGS</name> <block>{
<decl><name>DIRECTORY</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, <decl><name>UTIME</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>, <decl><name>CRC32</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>UNKNOWN_UNPACKED_SIZE</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>FILE_ATTRS</name> <block>{
<decl><name>ATTR_READONLY</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, <decl><name>ATTR_HIDDEN</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>, <decl><name>ATTR_SYSTEM</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>ATTR_DIRECTORY</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>COMP_INFO_FLAGS</name> <block>{
<decl><name>SOLID</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>HOST_OS</name> <block>{
<decl><name>HOST_WINDOWS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>HOST_UNIX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>

<expr_stmt><expr><call><name>archive_entry_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reset_file_context</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_flags</name> <operator>&amp;</operator> <name>HFL_EXTRA_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>edata_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edata_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>extra_data_size</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>edata_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_flags</name> <operator>&amp;</operator> <name>HFL_DATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"no data found in file/service block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unpacked_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file_flags</name> <operator>&amp;</operator> <name>UNKNOWN_UNPACKED_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Files with unknown unpacked size are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>file_flags</name> <operator>&amp;</operator> <name>DIRECTORY</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_attr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file_flags</name> <operator>&amp;</operator> <name>UTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file_flags</name> <operator>&amp;</operator> <name>CRC32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compression_info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c_method</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>compression_info</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_version</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>compression_info</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>window_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>dir</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>:
<expr><name>g_unpack_window_size</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>compression_info</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>method</name></name> <operator>=</operator> <name>c_method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>c_version</name> <operator>+</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid</name></name> <operator>=</operator> <operator>(</operator><name>compression_info</name> <operator>&amp;</operator> <name>SOLID</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Declared solid file, but no window buffer "</literal>
<literal type="string">"initialized yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>window_size</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>window_size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Declared dictionary size is not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid_window_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid_window_size</name></name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>window_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Window size for this solid file doesn't match "</literal>
<literal type="string">"the window size used in previous solid file. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>window_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid_window_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>solid_window_size</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_window_mask</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>service</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host_os</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>host_os</name> <operator>==</operator> <name>HOST_WINDOWS</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>__LA_MODE_T</name></type> <name>mode</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0555</literal> <operator>|</operator> <name>AE_IFDIR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0755</literal> <operator>|</operator> <name>AE_IFDIR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0444</literal> <operator>|</operator> <name>AE_IFREG</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0644</literal> <operator>|</operator> <name>AE_IFREG</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <operator>(</operator><name>ATTR_READONLY</name> <operator>|</operator> <name>ATTR_HIDDEN</name> <operator>|</operator> <name>ATTR_SYSTEM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fflags_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fflags_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">22</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fflags_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>fflags_text</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"rdonly,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_HIDDEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"hidden,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>file_attr</name> <operator>&amp;</operator> <name>ATTR_SYSTEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"system,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>fflags_text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_fflags_text</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>fflags_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fflags_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>host_os</name> <operator>==</operator> <name>HOST_UNIX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>(</operator><name>__LA_MODE_T</name><operator>)</operator> <name>file_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported Host OS: 0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>host_os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>name_size</name> <operator>&gt;</operator> <operator>(</operator><name>MAX_NAME_IN_CHARS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Filename is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>name_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"No filename specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name_utf8_buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_utf8_buf</name><index>[<expr><name>name_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_update_pathname_utf8</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>name_utf8_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>extra_data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>process_head_file_extra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>,
<argument><expr><name>extra_data_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>












<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>file_flags</name> <operator>&amp;</operator> <name>UNKNOWN_UNPACKED_SIZE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>unpacked_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>unpacked_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>redir_type</name></name> <operator>==</operator> <name>REDIR_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>unpacked_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file_flags</name> <operator>&amp;</operator> <name>UTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator> <name>mtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file_flags</name> <operator>&amp;</operator> <name>CRC32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_parsing_finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>all_filters_applied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>split_before</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_head_service</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>block_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>process_head_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>block_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>service</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rar5_read_data_skip</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_head_main</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>block_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_field_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>extra_field_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>archive_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>MAIN_FLAGS</name> <block>{
<decl><name>VOLUME</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>VOLUME_NUMBER</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>SOLID</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>PROTECT</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>LOCK</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>MAIN_EXTRA</name> <block>{

<decl><name>LOCATOR</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
}</block>;</enum>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>entry</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>block_flags</name> <operator>&amp;</operator> <name>HFL_EXTRA_DATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>extra_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>archive_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>volume</name> <operator>=</operator> <operator>(</operator><name>archive_flags</name> <operator>&amp;</operator> <name>VOLUME</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>solid</name> <operator>=</operator> <operator>(</operator><name>archive_flags</name> <operator>&amp;</operator> <name>SOLID</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>archive_flags</name> <operator>&amp;</operator> <name>VOLUME_NUMBER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid volume number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>vol_no</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>vol_no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>expected_vol_no</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>vol_no</name> <operator>!=</operator> <name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>expected_vol_no</name></name></expr>)</condition>
<block>{<block_content>





<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>extra_data_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_field_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_field_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>extra_field_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid extra field size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>extra_field_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOCATOR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_main_locator_extra_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported extra type (0x%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>extra_field_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_unprocessed_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>merge_mode</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rar5_read_data_skip</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>scan_for_signature</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>














































<function><type><specifier>static</specifier> <name>int</name></type> <name>process_base_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>SMALLEST_RAR5_BLOCK_SIZE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_crc</name></decl>, <decl><type ref="prev"/><name>computed_crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>raw_hdr_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hdr_size_len</name></decl>, <decl><type ref="prev"/><name>hdr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>header_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>header_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<enum>enum <name>HEADER_TYPE</name> <block>{
<decl><name>HEAD_MARK</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>, <decl><name>HEAD_MAIN</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, <decl><name>HEAD_FILE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>HEAD_SERVICE</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>, <decl><name>HEAD_CRYPT</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, <decl><name>HEAD_ENDARC</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>HEAD_UNKNOWN</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>,
}</block>;</enum>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>skip_unprocessed_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_crc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw_hdr_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_size_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdr_size</name> <operator>=</operator> <name>raw_hdr_size</name> <operator>+</operator> <name>hdr_size_len</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>hdr_size</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Base block header is too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>raw_hdr_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hdr_size_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>hdr_size</name> <operator>&lt;</operator> <name>SMALLEST_RAR5_BLOCK_SIZE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Too small block encountered (%zu bytes)"</literal></expr></argument>,
<argument><expr><name>raw_hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>hdr_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>computed_crc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>computed_crc</name> <operator>!=</operator> <name>hdr_crc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>hdr_size_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_var_sized</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>split_after</name></name> <operator>=</operator> <operator>(</operator><name>header_flags</name> <operator>&amp;</operator> <name>HFL_SPLIT_AFTER</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>split_before</name></name> <operator>=</operator> <operator>(</operator><name>header_flags</name> <operator>&amp;</operator> <name>HFL_SPLIT_BEFORE</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>hdr_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>last_header_id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>header_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<switch>switch<condition>(<expr><name>header_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HEAD_MAIN</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_head_main</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>header_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>HEAD_SERVICE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_head_service</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>header_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>HEAD_FILE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_head_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>header_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>HEAD_CRYPT</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Encryption is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
<case>case <expr><name>HEAD_ENDARC</name></expr>:</case>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>volume</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>scan_for_signature</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>expected_vol_no</name></name> <operator>==</operator>
<name>UINT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>expected_vol_no</name></name> <operator>=</operator>
<name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>vol_no</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>HEAD_MARK</name></expr>:</case>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
<default>default:</default>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>header_flags</name> <operator>&amp;</operator> <name>HFL_SKIP_IF_UNKNOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Header type error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>WIN32</name></expr></cpp:if>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Internal unpacker error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_base_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_base_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>last_header_id</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>split_before</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>header_initialized</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>header_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>skipped_magic</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>skipped_magic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_base_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_RETRY</name> <operator>||</operator>
<operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_unpack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_window_mask</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>bd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>bd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ld</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ld</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ldd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ldd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>rd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_crc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>to_read</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>verify_crc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>CHECK_CRC_ON_SOLID_SKIP</name></expr></cpp:if>
<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>verify_crc</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name> <operator>=</operator>
<call><name>crc32</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>has_blake2</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>blake2sp_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>b2state</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_decode_tables</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>bit_length</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>decode_table</name></name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>upper_limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name><name>lc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>decode_pos_clone</name><index>[<expr><call><name>rar5_countof</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_pos</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cur_len</name></decl>, <decl><type ref="prev"/><name>quick_data_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_num</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>==</operator> <name>HUFF_NC</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lc</name><index>[<expr><name><name>bit_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>lc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>decode_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>upper_limit</name> <operator>+=</operator> <name><name>lc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>upper_limit</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>decode_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>lc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>upper_limit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>decode_pos_clone</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_pos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decode_pos_clone</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>clen</name> <init>= <expr><name><name>bit_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>clen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_pos</name> <init>= <expr><name><name>decode_pos_clone</name><index>[<expr><name>clen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>decode_num</name><index>[<expr><name>last_pos</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decode_pos_clone</name><index>[<expr><name>clen</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>quick_data_size</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>code</name> <operator>&lt;</operator> <name>quick_data_size</name></expr>;</condition> <incr><expr><name>code</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit_field</name> <init>= <expr><name>code</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>cur_len</name> <operator>&lt;</operator> <call><name>rar5_countof</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_len</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>bit_field</name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name>cur_len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>quick_len</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>cur_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>bit_field</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name>cur_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>cur_len</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_pos</name><index>[<expr><name>cur_len</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name>dist</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cur_len</name> <operator>&lt;</operator> <call><name>rar5_countof</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>decode_pos</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>quick_num</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_num</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>quick_num</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>decode_table</name></name><modifier>*</modifier></type> <name>table</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>dist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bitfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitfield</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitfield</name> <operator>&amp;=</operator> <literal type="number">0xfffe</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bitfield</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>bitfield</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>quick_len</name><index>[<expr><name>code</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>quick_num</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>quick_bits</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>bitfield</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>bitfield</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_len</name><index>[<expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_pos</name><index>[<expr><name>bits</name></expr>]</index></name> <operator>+</operator> <name>dist</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>decode_num</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_tables</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bit_length</name><index>[<expr><name>HUFF_BC</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>table</name><index>[<expr><name>HUFF_TABLE_SIZE</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name>nibble_mask</name> <init>= <expr><literal type="number">0xF0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>nibble_shift</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>ESCAPE</name> <init>= <expr><literal type="number">15</literal></expr></init></decl> }</block>;</enum>



<for>for<control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>HUFF_BC</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated data in huffman tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>nibble_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>nibble_shift</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nibble_mask</name> <operator>==</operator> <literal type="number">0x0F</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nibble_mask</name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble_shift</name> <operator>^=</operator> <literal type="number">4</literal></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>value</name> <operator>==</operator> <name>ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>nibble_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>nibble_shift</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nibble_mask</name> <operator>==</operator> <literal type="number">0x0F</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nibble_mask</name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble_shift</name> <operator>^=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>bit_length</name><index>[<expr><name>w</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <name>value</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>w</name> <operator>&lt;</operator> <name>HUFF_BC</name><operator>)</operator></expr>;</condition>
<incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bit_length</name><index>[<expr><name>w</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bit_length</name><index>[<expr><name>w</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name> <operator>=</operator> <name>nibble_shift</name> <operator>^</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_decode_tables</name><argument_list>(<argument><expr><name>bit_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>bd</name></name></expr></argument>, <argument><expr><name>HUFF_BC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Decoding huffman tables failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HUFF_TABLE_SIZE</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated data in huffman tables (#2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_number</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>bd</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Decoding huffman tables failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>HUFF_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected error when decoding "</literal>
<literal type="string">"huffman tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>HUFF_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_decode_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ld</name></name></expr></argument>, <argument><expr><name>HUFF_NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create literal table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>HUFF_NC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_decode_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dd</name></name></expr></argument>, <argument><expr><name>HUFF_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create distance table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>HUFF_DC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_decode_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ldd</name></name></expr></argument>, <argument><expr><name>HUFF_LDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create lower bits of distances table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>HUFF_LDC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_decode_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name>HUFF_RC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create repeating distances table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_block_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name><modifier>*</modifier></type> <name>block_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>compressed_block_header</name></name><modifier>*</modifier></type> <name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>calculated_cksum</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>compressed_block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bf_byte_count</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported block header size (was %d, max is 2)"</literal></expr></argument>,
<argument><expr><call><name>bf_byte_count</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>bf_byte_count</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>block_size</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>block_size</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>block_size</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>block_size</name> <operator>&amp;=</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>
<break>break;</break>




<default>default:</default>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></switch>



<expr_stmt><expr><name>calculated_cksum</name> <operator>=</operator> <literal type="number">0x5A</literal>
<operator>^</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>block_flags_u8</name></name>
<operator>^</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator><name>block_size</name>
<operator>^</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>block_size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>^</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>block_size</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>calculated_cksum</name> <operator>!=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>block_cksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Block checksum error: got 0x%x, expected 0x%x"</literal></expr></argument>,
<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>block_cksum</name></name></expr></argument>, <argument><expr><name>calculated_cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_filter_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>filter_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_consume_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>byte</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>filter_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>is_valid_filter_block_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>block_start</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>start</name> <operator>+</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>last_bs</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>last_bl</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>last_bs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>last_bl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block_start</name> <operator>&gt;=</operator> <name>last_bs</name> <operator>+</operator> <name>last_bl</name></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>ar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_start</name></decl>, <decl><type ref="prev"/><name>block_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>filter_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>filt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>parse_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>parse_filter_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_16</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filter_type</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><name><name>block_length</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator>
<name>block_length</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x400000</literal> <operator>||</operator>
<name>filter_type</name> <operator>&gt;</operator> <name>FILTER_ARM</name> <operator>||</operator>
<operator>!</operator><call><name>is_valid_filter_block_start</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>block_start</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid filter encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>add_new_filter</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>filt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a filter descriptor."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>filter_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filt</name><operator>-&gt;</operator><name>block_start</name></name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>+</operator> <name>block_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filt</name><operator>-&gt;</operator><name>block_length</name></name> <operator>=</operator> <name>block_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_start</name></name> <operator>=</operator> <name><name>filt</name><operator>-&gt;</operator><name>block_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_block_length</name></name> <operator>=</operator> <name><name>filt</name><operator>-&gt;</operator><name>block_length</name></name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>filter_type</name> <operator>==</operator> <name>FILTER_DELTA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_consume_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filt</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_code_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lbits</name></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lbits</name> <operator>=</operator> <name>code</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>lbits</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>add</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_consume_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lbits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>cmask</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>write_ptr</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>+</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>








<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>write_idx</name> <init>= <expr><operator>(</operator><name>write_ptr</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>read_idx</name> <init>= <expr><operator>(</operator><name>write_ptr</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>dist</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[<expr><name>write_idx</name></expr>]</index></name> <operator>=</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[<expr><name>read_idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_uncompress_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>cmask</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>compressed_block_header</name></name><modifier>*</modifier></type> <name>hdr</name> <init>= <expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>last_block_hdr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>bit_size</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>bf_bit_size</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name> <operator>-</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>&gt;</operator>
<operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>==</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name> <operator>&gt;=</operator> <name>bit_size</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_parsing_finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>decode_number</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ld</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>















<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>write_idx</name> <init>= <expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>solid_offset</name></name> <operator>+</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name><index>[<expr><name>write_idx</name> <operator>&amp;</operator> <name>cmask</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>uint8_t</name><operator>)</operator> <name>num</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">262</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dist_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>decode_code_length</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>num</name> <operator>-</operator> <literal type="number">262</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"/><name>dbits</name></decl>,
<decl><type ref="prev"/><name>dist</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Failed to decode the code length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>decode_number</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dd</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dist_slot</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Failed to decode the distance slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dist_slot</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>dist_slot</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dbits</name> <operator>=</operator> <name>dist_slot</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>dist</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>|</operator>
<operator>(</operator><name>dist_slot</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>dbits</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>dbits</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>low_dist</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dbits</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_bits_32</name><argument_list>(
<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>dbits</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><name>add</name> <operator>&gt;&gt;</operator> <operator>(</operator>
<literal type="number">36</literal> <operator>-</operator> <name>dbits</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>decode_number</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>ldd</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>low_dist</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Failed to decode the "</literal>
<literal type="string">"distance slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>low_dist</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Distance pointer "</literal>
<literal type="string">"overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>low_dist</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>add</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>read_consume_bits</name><argument_list>(<argument><expr><name>rar</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dbits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">0x2000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">0x40000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dist_cache_push</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>copy_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_filter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">257</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>copy_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_len</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dist_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">258</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dist</name> <init>= <expr><call><name>dist_cache_touch</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>len_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>decode_number</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len_slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>decode_code_length</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>copy_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_for_signature</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chunk_size</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>signature</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>













<expr_stmt><expr><call><name>rar5_signature</name><argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chunk_size</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>signature</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>advance_multivolume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>














<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>looping</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>looping</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lret</name> <operator>=</operator> <call><name>skip_base_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>lret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_RETRY</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>ARCHIVE_OK</name></expr>:</case>

<expr_stmt><expr><name>looping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>


<return>return <expr><name>lret</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>lret</name> <operator>=</operator> <call><name>skip_base_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>lret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name> <operator>||</operator> <name>lret</name> <operator>==</operator> <name>ARCHIVE_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>lret</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><name>lret</name> <operator>!=</operator> <name>ARCHIVE_RETRY</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>endarc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>lret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>merge_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>block_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cur_block_size</name></decl>, <decl><type ref="prev"/><name>partial_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>merge_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Recursive merge is not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>block_size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for a merge block buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name><index>[<expr><name>block_size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>cur_block_size</name> <operator>=</operator> <call><name>rar5_min</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr></argument>,
<argument><expr><name>block_size</name> <operator>-</operator> <name>partial_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cur_block_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Encountered block size == 0 during block merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cur_block_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>partial_offset</name> <operator>+</operator> <name>cur_block_size</name> <operator>&gt;</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Consumed too much data when merging blocks."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name><index>[<expr><name>partial_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>cur_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cur_block_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>partial_offset</name> <operator>+=</operator> <name>cur_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>cur_block_size</name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>partial_offset</name> <operator>==</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>merge_mode</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>advance_multivolume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>merge_mode</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name></expr>;</expr_stmt>




<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>volume</name> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>advance_multivolume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_parsing_finished</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>to_skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cur_block_size</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_block_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>last_block_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>to_skip</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>compressed_block_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<call><name>bf_byte_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>last_block_hdr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>to_skip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>to_skip</name></expr>;</expr_stmt>







<expr_stmt><expr><name>cur_block_size</name> <operator>=</operator>
<call><name>rar5_min</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>block_size</name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>merge_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_block_size</name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>






</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>cur_block_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_buf</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name> <operator>=</operator> <name>cur_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_parsing_finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>in_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bit_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bf_is_table_present</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>last_block_hdr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_tables</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_uncompress_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>block_parsing_finished</name></name> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>cur_block_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>use_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>rar5_countof</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dready</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>data_ready</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dready</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>push_data_ready</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>







<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>!=</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>last_offset</name></name> <operator>+</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>last_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Sanity check error: output stream is not continuous"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>rar5_countof</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dready</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>data_ready</name></name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>dready</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>last_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>last_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>update_crc</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Error: premature end of data_ready stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></function>











































<function><type><specifier>static</specifier> <name>int</name></type> <name>do_uncompress_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_end_pos</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>solid</name> <operator>||</operator> <operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_unpack</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>all_filters_applied</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_EOF</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>==</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name></expr>)</condition> <block>{<block_content>


<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<break>break;</break>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_filters</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_RETRY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><call><name>cdeque_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>filter_info</name></name><modifier>*</modifier></type> <name>flt</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>CDE_OK</name> <operator>!=</operator> <call><name>cdeque_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>,
<argument><expr><call><name>cdeque_filter_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Can't read first filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_end_pos</name> <operator>=</operator> <call><name>rar5_min</name><argument_list>(<argument><expr><name><name>flt</name><operator>-&gt;</operator><name>block_start</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>max_end_pos</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>write_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>max_end_pos</name> <operator>==</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr>)</condition> <block>{<block_content>










<return>return <expr><name>ARCHIVE_RETRY</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>push_window_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name></expr></argument>,
<argument><expr><name>max_end_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>=</operator> <name>max_end_pos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uncompress_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_uncompress_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_RETRY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>do_unstore_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>volume</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>split_after</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>advance_multivolume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>switch_multivolume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to_read</name> <operator>=</operator> <call><name>rar5_min</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>to_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"I/O error when unstoring file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>to_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_unstore_ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>-=</operator> <name>to_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_unstore_ptr</name></name> <operator>+=</operator> <name>to_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_crc</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_unpack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<enum>enum <name>COMPRESSION_METHOD</name> <block>{
<decl><name>STORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>FASTEST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>FAST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>NORMAL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><name>GOOD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>BEST</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>service</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>do_unstore_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>method</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STORE</name></expr>:</case>
<return>return <expr><call><name>do_unstore_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FASTEST</name></expr>:</case>

<case>case <expr><name>FAST</name></expr>:</case>

<case>case <expr><name>NORMAL</name></expr>:</case>

<case>case <expr><name>GOOD</name></expr>:</case>

<case>case <expr><name>BEST</name></expr>:</case>
<return>return <expr><call><name>uncompress_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Compression method not supported: 0x%x"</literal></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>WIN32</name></expr></cpp:if>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_checksums</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>verify_crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>CHECK_CRC_ON_SOLID_SKIP</name></expr></cpp:if>

<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>verify_crc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>verify_crc</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name> <operator>!=</operator>
<name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name></expr>)</condition> <block>{<block_content>



<macro><name>DEBUG_CODE</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checksum error: CRC32 "</literal>
<literal type="string">"(was: %08"</literal> <name>PRIx32</name> <literal type="string">", expected: %08"</literal> <name>PRIx32</name> <literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DONT_FAIL_ON_CRC_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Checksum error: CRC32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>DEBUG_CODE</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checksum OK: CRC32 "</literal>
<literal type="string">"(%08"</literal> <name>PRIx32</name> <literal type="string">"/%08"</literal> <name>PRIx32</name> <literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>stored_crc32</name></name></expr></argument>,
<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>calculated_crc32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>has_blake2</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>













<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>b2_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>blake2sp_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>b2state</name></name></expr></argument>, <argument><expr><name>b2_buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>blake2sp</name></name></expr></argument>, <argument><expr><name>b2_buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DONT_FAIL_ON_CRC_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Checksum error: BLAKE2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_global_checksums</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>verify_checksums</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>rar5_signature</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rar5_signature_xor</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rar5_signature_xor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0xA1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>dir</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Can't decompress an entry marked as a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>&gt;</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>unpacked_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_PROGRAMMER</name></expr></argument>,
<argument><expr><literal type="string">"Unpacker has written too many bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>use_data</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>eof</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_unpack</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rar</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>last_write_ptr</name></name> <operator>==</operator> <name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>unpacked_size</name></name></expr>)</condition>
<block>{<block_content>








<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>verify_global_checksums</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name/></name>main<operator>.</operator><name>solid</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<while>while<condition>(<expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name><operator>++</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rar5_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>skip_mode</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rar</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>rar5_seek_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>whence</name></expr>;</expr_stmt>



<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name> <init>= <expr><call><name>get_context</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>window_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filtered_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rar</name><operator>-&gt;</operator><name>vol</name><operator>.</operator><name>push_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_filters</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdeque_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>_a</name></expr>;</expr_stmt>


<return>return <expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rar5_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rar5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CDE_OK</name> <operator>!=</operator> <call><name>cdeque_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rar</name><operator>-&gt;</operator><name>cstate</name><operator>.</operator><name>filters</name></name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>archive_read_support_format_rar5</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rar5</name></name><modifier>*</modifier></type> <name>rar</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_archive_read</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rar</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate rar5 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>rar5_init</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate rar5 filter buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>ar</name></expr></argument>,
<argument><expr><name>rar</name></expr></argument>,
<argument><expr><literal type="string">"rar5"</literal></expr></argument>,
<argument><expr><name>rar5_bid</name></expr></argument>,
<argument><expr><name>rar5_options</name></expr></argument>,
<argument><expr><name>rar5_read_header</name></expr></argument>,
<argument><expr><name>rar5_read_data</name></expr></argument>,
<argument><expr><name>rar5_read_data_skip</name></expr></argument>,
<argument><expr><name>rar5_seek_data</name></expr></argument>,
<argument><expr><name>rar5_cleanup</name></expr></argument>,
<argument><expr><name>rar5_capabilities</name></expr></argument>,
<argument><expr><name>rar5_has_encrypted_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>rar5_cleanup</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
