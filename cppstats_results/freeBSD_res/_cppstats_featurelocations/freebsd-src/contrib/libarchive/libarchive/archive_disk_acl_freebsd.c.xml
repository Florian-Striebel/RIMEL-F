<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_disk_acl_freebsd.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ACL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ACL_PRIVATE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_disk_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_write_disk_private.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_perm</name></decl>;</decl_stmt>
}</block></struct></type> <name>acl_perm_map_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>acl_perm_map_t</name></type> <name><name>acl_posix_perm_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>ACL_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>, <expr><name>ACL_WRITE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>, <expr><name>ACL_READ</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>acl_posix_perm_map_size</name> <init>=
<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acl_posix_perm_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acl_posix_perm_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>acl_perm_map_t</name></type> <name><name>acl_nfs4_perm_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>ACL_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>, <expr><name>ACL_READ_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><name>ACL_LIST_DIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>, <expr><name>ACL_WRITE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><name>ACL_ADD_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>, <expr><name>ACL_APPEND_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>, <expr><name>ACL_ADD_SUBDIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><name>ACL_READ_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><name>ACL_WRITE_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><name>ACL_DELETE_CHILD</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><name>ACL_READ_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><name>ACL_WRITE_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><name>ACL_DELETE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><name>ACL_READ_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><name>ACL_WRITE_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><name>ACL_WRITE_OWNER</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><name>ACL_SYNCHRONIZE</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>acl_nfs4_perm_map_size</name> <init>=
<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acl_nfs4_perm_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acl_nfs4_perm_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>acl_perm_map_t</name></type> <name><name>acl_nfs4_flag_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_FILE_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><name>ACL_ENTRY_INHERIT_ONLY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>, <expr><name>ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>, <expr><name>ACL_ENTRY_FAILED_ACCESS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ENTRY_INHERITED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><name>ACL_ENTRY_INHERITED</name></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>acl_nfs4_flag_map_size</name> <init>=
<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acl_nfs4_flag_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acl_nfs4_flag_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_acl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_entry_acl_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>brand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>acl_flagset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_type_t</name></type> <name>acl_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>acl_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>acl_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>acl_permset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>entry_acl_type</name></decl>, <decl><type ref="prev"/><name>perm_map_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>acl_perm_map_t</name> <modifier>*</modifier></type><name>perm_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ae_id</name></decl>, <decl><type ref="prev"/><name>ae_tag</name></decl>, <decl><type ref="prev"/><name>ae_perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ae_name</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>acl_get_brand_np</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brand</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read ACL brand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>brand</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_BRAND_POSIX</name></expr>:</case>
<switch>switch <condition>(<expr><name>default_entry_acl_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid ACL entry type for POSIX.1e ACL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>ACL_BRAND_NFS4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>default_entry_acl_type</name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid ACL entry type for NFSv4 ACL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unknown ACL brand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>ACL_FIRST_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get first ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ae_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ae_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ae_perm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_tag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get ACL tag type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>acl_tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_USER</name></expr>:</case>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ae_id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><name>uid_t</name> <operator>*</operator><operator>)</operator><name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ae_name</name> <operator>=</operator> <call><name>archive_read_disk_uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ae_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP</name></expr>:</case>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ae_id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><name>gid_t</name> <operator>*</operator><operator>)</operator><name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ae_name</name> <operator>=</operator> <call><name>archive_read_disk_gname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ae_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_MASK</name></expr>:</case>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<case>case <expr><name>ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><name>ae_tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>ACL_NEXT_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>


<expr_stmt><expr><name>entry_acl_type</name> <operator>=</operator> <name>default_entry_acl_type</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>default_entry_acl_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>acl_get_entry_type_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed "</literal>
<literal type="string">"to get ACL type from a NFSv4 ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>acl_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_ENTRY_TYPE_ALLOW</name></expr>:</case>
<expr_stmt><expr><name>entry_acl_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_DENY</name></expr>:</case>
<expr_stmt><expr><name>entry_acl_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_AUDIT</name></expr>:</case>
<expr_stmt><expr><name>entry_acl_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_ALARM</name></expr>:</case>
<expr_stmt><expr><name>entry_acl_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Invalid NFSv4 ACL entry type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>







<if_stmt><if>if <condition>(<expr><call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_flagset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get flagset from a NFSv4 "</literal>
<literal type="string">"ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acl_nfs4_flag_map_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_flag_np</name><argument_list>(<argument><expr><name>acl_flagset</name></expr></argument>,
<argument><expr><name><name>acl_nfs4_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to check flag in a NFSv4 "</literal>
<literal type="string">"ACL flagset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ae_perm</name> <operator>|=</operator> <name><name>acl_nfs4_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_perm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>acl_get_permset</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_permset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get ACL permission set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>default_entry_acl_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm_map_size</name> <operator>=</operator> <name>acl_nfs4_perm_map_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_map</name> <operator>=</operator> <name>acl_nfs4_perm_map</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>perm_map_size</name> <operator>=</operator> <name>acl_posix_perm_map_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_map</name> <operator>=</operator> <name>acl_posix_perm_map</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>perm_map_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_get_perm_np</name><argument_list>(<argument><expr><name>acl_permset</name></expr></argument>, <argument><expr><name><name>perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to check permission in an ACL "</literal>
<literal type="string">"permission set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ae_perm</name> <operator>|=</operator> <name><name>perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_perm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_entry_acl_add_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>entry_acl_type</name></expr></argument>,
<argument><expr><name>ae_perm</name></expr></argument>, <argument><expr><name>ae_tag</name></expr></argument>,
<argument><expr><name>ae_id</name></expr></argument>, <argument><expr><name>ae_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>ACL_NEXT_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get next ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_acl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>abstract_acl</name></decl></parameter>, <parameter><decl><type><name>__LA_MODE_T</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ae_requested_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>acl_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>acl_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>acl_permset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>acl_flagset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ae_type</name></decl>, <decl><type ref="prev"/><name>ae_permset</name></decl>, <decl><type ref="prev"/><name>ae_tag</name></decl>, <decl><type ref="prev"/><name>ae_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm_map_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>acl_perm_map_t</name> <modifier>*</modifier></type><name>perm_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>ae_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>ae_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ae_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>archive_acl_reset</name><argument_list>(<argument><expr><name>abstract_acl</name></expr></argument>, <argument><expr><name>ae_requested_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>ae_requested_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>:</case>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_DEFAULT</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>:</case>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_NFS4</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unsupported ACL type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>acl_type</name> <operator>==</operator> <name>ACL_TYPE_DEFAULT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Cannot set default ACL on non-directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_init</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <operator>(</operator><name>acl_t</name><operator>)</operator><name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to initialize ACL working storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>archive_acl_next</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>abstract_acl</name></expr></argument>, <argument><expr><name>ae_requested_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ae_permset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_create_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create a new ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>ae_tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>:</case>
<expr_stmt><expr><name>ae_uid</name> <operator>=</operator> <call><name>archive_write_disk_uid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae_name</name></expr></argument>, <argument><expr><name>ae_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_set_qualifier</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>:</case>
<expr_stmt><expr><name>ae_gid</name> <operator>=</operator> <call><name>archive_write_disk_gid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae_name</name></expr></argument>, <argument><expr><name>ae_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_set_qualifier</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae_gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_USER_OBJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_GROUP_OBJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><call><name>acl_set_tag_type</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><name>ACL_EVERYONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported ACL tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ae_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_set_entry_type_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>,
<argument><expr><name>ACL_ENTRY_TYPE_ALLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_set_entry_type_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>,
<argument><expr><name>ACL_ENTRY_TYPE_DENY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_set_entry_type_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>,
<argument><expr><name>ACL_ENTRY_TYPE_AUDIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>acl_set_entry_type_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>,
<argument><expr><name>ACL_ENTRY_TYPE_ALARM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported ACL entry type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set ACL entry type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>acl_get_permset</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_permset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get ACL permission set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_clear_perms</name><argument_list>(<argument><expr><name>acl_permset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clear ACL permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ae_requested_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm_map_size</name> <operator>=</operator> <name>acl_nfs4_perm_map_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_map</name> <operator>=</operator> <name>acl_nfs4_perm_map</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>perm_map_size</name> <operator>=</operator> <name>acl_posix_perm_map_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_map</name> <operator>=</operator> <name>acl_posix_perm_map</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>perm_map_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ae_permset</name> <operator>&amp;</operator> <name><name>perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_perm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_add_perm</name><argument_list>(<argument><expr><name>acl_permset</name></expr></argument>,
<argument><expr><name><name>perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to add ACL permission"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ae_requested_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_flagset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get flagset from an NFSv4 "</literal>
<literal type="string">"ACL entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_clear_flags_np</name><argument_list>(<argument><expr><name>acl_flagset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clear flags from an NFSv4 "</literal>
<literal type="string">"ACL flagset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acl_nfs4_flag_map_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ae_permset</name> <operator>&amp;</operator> <name><name>acl_nfs4_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_perm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_add_flag_np</name><argument_list>(<argument><expr><name>acl_flagset</name></expr></argument>,
<argument><expr><name><name>acl_nfs4_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to add flag to "</literal>
<literal type="string">"NFSv4 ACL flagset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<goto>goto <name>exit_free</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_set_fd_np</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOPNOTSUPP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set acl on fd: %s"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ACL_SET_LINK_NP</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>acl_set_link_np</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_set_file</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOPNOTSUPP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed to set acl: %s"</literal></expr></argument>,
<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<label><name>exit_free</name>:</label>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_read_disk_entry_setup_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_disk</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>accpath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>accpath</name> <operator>=</operator> <call><name>archive_read_disk_entry_setup_path</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accpath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_fd_np</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>follow_symlinks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_link_np</name><argument_list>(<argument><expr><name>accpath</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>accpath</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>acl_is_trivial_np</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>translate_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't translate NFSv4 ACLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_fd_np</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ACL_GET_LINK_NP</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>follow_symlinks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_link_np</name><argument_list>(<argument><expr><name>accpath</name></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>follow_symlinks</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFLNK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>accpath</name></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ACL_IS_TRIVIAL_NP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>acl_is_trivial_np</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>translate_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't translate access ACLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_fd_np</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>accpath</name></expr></argument>, <argument><expr><name>ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>translate_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't translate default ACLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_write_disk_set_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>abstract_acl</name></decl></parameter>, <parameter><decl><type><name>__LA_MODE_T</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>archive_acl_types</name><argument_list>(<argument><expr><name>abstract_acl</name></expr></argument>)</argument_list></call>
<operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>archive_acl_types</name><argument_list>(<argument><expr><name>abstract_acl</name></expr></argument>)</argument_list></call>
<operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>abstract_acl</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><literal type="string">"access"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>archive_acl_types</name><argument_list>(<argument><expr><name>abstract_acl</name></expr></argument>)</argument_list></call>
<operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>abstract_acl</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD_NFS4</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>archive_acl_types</name><argument_list>(<argument><expr><name>abstract_acl</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_acl</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>abstract_acl</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><literal type="string">"nfs4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
