<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_acl.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_acl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>max</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WMEMCMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmemcmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp((a), (b), (i) * sizeof(wchar_t))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>acl_special</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>acl_new_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_acl_add_entry_len_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_acl_text_want_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>archive_acl_text_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wide</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isint_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ismode_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_nfs4_flags_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_nfs4_perms_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>next_field_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_entry_w</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_id_w</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ismode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_nfs4_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_nfs4_perms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>next_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_entry</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
}</block> <decl><name><name>nfsv4_acl_perm_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><literal type="char">'r'</literal></expr>,
<expr><name>L</name><literal type="char">'r'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><literal type="char">'w'</literal></expr>,
<expr><name>L</name><literal type="char">'w'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><name>L</name><literal type="char">'x'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>,
<expr><literal type="char">'p'</literal></expr>, <expr><name>L</name><literal type="char">'p'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><name>L</name><literal type="char">'d'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><name>L</name><literal type="char">'D'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><name>L</name><literal type="char">'a'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><name>L</name><literal type="char">'A'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><name>L</name><literal type="char">'R'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><name>L</name><literal type="char">'W'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><name>L</name><literal type="char">'c'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><name>L</name><literal type="char">'C'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><name>L</name><literal type="char">'o'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><name>L</name><literal type="char">'s'</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>nfsv4_acl_perm_map_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nfsv4_acl_perm_map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>nfsv4_acl_perm_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
}</block> <decl><name><name>nfsv4_acl_flag_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><name>L</name><literal type="char">'f'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><name>L</name><literal type="char">'d'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><name>L</name><literal type="char">'i'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><name>L</name><literal type="char">'n'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><name>L</name><literal type="char">'S'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><name>L</name><literal type="char">'F'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><name>L</name><literal type="char">'I'</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>nfsv4_acl_flag_map_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nfsv4_acl_flag_map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>nfsv4_acl_flag_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>archive_acl_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_head</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text_w</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_acl_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_acl_clear</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap2</name> <operator>=</operator> <call><name>acl_new_entry</name><argument_list>(<argument><expr><name>dest</name></expr></argument>,
<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>permset</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_acl_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>acl_special</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>acl_new_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_acl_add_entry_w_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>acl_special</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>acl_new_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_acl_add_entry_len_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>acl_special</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>acl_new_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_special</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>permset</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">007</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0700</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <operator>(</operator><name>permset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0070</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <operator>(</operator><name>permset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0007</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>permset</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type>
<name>acl_new_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aq</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>permset</name> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>ARCHIVE_ENTRY_ACL_PERMS_NFS4</name>
<operator>|</operator> <name>ARCHIVE_ENTRY_ACL_INHERITANCE_NFS4</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>permset</name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_PERMS_POSIX1E</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>


<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <operator>~</operator><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text_w</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>







<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>aq</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>tag</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>&amp;&amp;</operator>
<name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>permset</name></name> <operator>=</operator> <name>permset</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ap</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>aq</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>ap</name> <operator>=</operator> <operator>(</operator>struct <name>archive_acl_entry</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aq</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>permset</name></name> <operator>=</operator> <name>permset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>|=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ap</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_acl_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>want_type</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_acl_types</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>archive_acl_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>cutoff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>archive_acl_count</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>cutoff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>archive_acl_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>want_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>permset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_p</name></name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_acl_text_want_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>want_type</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_types</name></name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>want_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>want_type</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>want_type</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>want_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>archive_acl_text_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wide</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>idlen</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>want_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wide</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>want_type</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SOLARIS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">27</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idlen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>idlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SOLARIS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>length</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_acl_to_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>text_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>want_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ws</name></decl>;</decl_stmt>

<expr_stmt><expr><name>want_type</name> <operator>=</operator> <call><name>archive_acl_text_want_type</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>archive_acl_text_len</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <name>L</name><literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <name>L</name><literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>ws</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>append_entry_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0700</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_entry_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0070</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_entry_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0007</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>want_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">L"default:"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>append_entry_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>wname</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>permset</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Buffer overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>text_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ws</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_id_w</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>append_id_w</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>id</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="string">L"0123456789"</literal><index>[<expr><name>id</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_entry_w</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>+=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"owner@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"group@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"other"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"everyone@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>+=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>+=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name>
<operator>||</operator> <name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>append_id_w</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SOLARIS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name>
<operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0444</literal><operator>)</operator></expr> ?</condition><then> <expr><name>L</name><literal type="char">'r'</literal></expr> </then><else>: <expr><name>L</name><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0222</literal><operator>)</operator></expr> ?</condition><then> <expr><name>L</name><literal type="char">'w'</literal></expr> </then><else>: <expr><name>L</name><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator></expr> ?</condition><then> <expr><name>L</name><literal type="char">'x'</literal></expr> </then><else>: <expr><name>L</name><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfsv4_acl_perm_map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;</operator> <name><name>nfsv4_acl_perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name><name>nfsv4_acl_perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wc</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_COMPACT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfsv4_acl_flag_map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;</operator> <name><name>nfsv4_acl_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name><name>nfsv4_acl_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wc</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_COMPACT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"allow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"deny"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"audit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>:</case>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">L"alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>+=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_id_w</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>archive_acl_to_text_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>text_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_acl_entry</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>want_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>want_type</name> <operator>=</operator> <call><name>archive_acl_text_want_type</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>archive_acl_text_len</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want_type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>append_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0700</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0070</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>acl</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0007</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_head</name></name></expr>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>want_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name>
<operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"default:"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_get_mbs_l</name><argument_list>(
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>separator</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>append_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>permset</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Buffer overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>text_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>append_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="string">"0123456789"</literal><index>[<expr><name>id</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_entry</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"owner@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"group@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"everyone@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name>
<operator>||</operator> <name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>append_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SOLARIS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name>
<operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0444</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0222</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'x'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfsv4_acl_perm_map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;</operator> <name><name>nfsv4_acl_perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name><name>nfsv4_acl_perm_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_COMPACT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfsv4_acl_flag_map_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&amp;</operator> <name><name>nfsv4_acl_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name><name>nfsv4_acl_flag_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_COMPACT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"allow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"deny"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"audit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>archive_acl_from_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block> <decl><name><name>field</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>name</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numfields</name></decl>, <decl><type ref="prev"/><name>fields</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>sol</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>types</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>permset</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>sep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>types</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>want_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>:</case>
<expr_stmt><expr><name>want_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__LA_FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>numfields</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>:</case>
<expr_stmt><expr><name>numfields</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<while>while <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>text</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>next_field_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fields</name> <operator>&lt;</operator> <name>numfields</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>fields</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>fields</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>fields</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>sep</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition>;</do>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>fields</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numfields</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name><operator>)</operator> <operator>==</operator> <name>L</name><literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>permset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>name</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>L</name><literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">7</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">L"efault"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>want_type</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>isint_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>fields</name> <operator>&gt;</operator> <name>n</name><operator>+</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>isint_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">L"ser"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'g'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">L"roup"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'o'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">L"ther"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'m'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">L"ask"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name>
<operator>&amp;&amp;</operator> <call><name>ismode_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fields</name> <operator>==</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>permset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ismode_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>sol</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>sol</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"user"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"group"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"owner@"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"group@"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"everyone@"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isint_w</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_nfs4_perms_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_nfs4_flags_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"deny"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"allow"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"audit"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>wmemcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">L"alarm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>isint_w</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_acl_add_entry_w_len</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>archive_acl_reset</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>isint_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>start</name> <argument_list type="generic">&lt; <argument><expr><name>L</name><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>start</name></expr></argument> &gt;</argument_list></name> <name>L</name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>n</name> <operator>==</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>start</name> <operator>-</operator> <name>L</name><literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>*</operator><name>start</name> <operator>-</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>ismode_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'r'</literal></expr>:</case> <case>case <expr><name>L</name><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'w'</literal></expr>:</case> <case>case <expr><name>L</name><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'x'</literal></expr>:</case> <case>case <expr><name>L</name><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_nfs4_perms_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_nfs4_flags_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>next_field_w</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>wp</name> <operator>==</operator> <name>L</name><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>==</operator> <name>L</name><literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <operator>*</operator><name>wp</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>wp</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wp</name> <operator>==</operator> <operator>*</operator><name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>wp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sep</name> <operator>==</operator> <name>L</name><literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>wp</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>archive_acl_from_text_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block> <decl><name><name>field</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>name</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numfields</name></decl>, <decl><type ref="prev"/><name>fields</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>sol</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>types</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>permset</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sep</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>want_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr>:</case>
<expr_stmt><expr><name>want_type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__LA_FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>numfields</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>:</case>
<expr_stmt><expr><name>numfields</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>types</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>text</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>next_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fields</name> <operator>&lt;</operator> <name>numfields</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>fields</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>fields</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>fields</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>;</do>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>fields</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numfields</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name><operator>)</operator> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>permset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>name</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>want_type</name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">7</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"efault"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>want_type</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>isint</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>fields</name> <operator>&gt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>isint</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"ser"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"roup"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"ther"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"ask"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name>
<operator>&amp;&amp;</operator> <call><name>ismode</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fields</name> <operator>==</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>:</case>
<case>case <expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>permset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ismode</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>sol</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>sol</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"owner@"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"group@"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"everyone@"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_USER</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isint</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_nfs4_perms</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_nfs4_flags</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>field</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>field</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"deny"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"allow"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"audit"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"alarm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>isint</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>n</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_acl_add_entry_len_l</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>name</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>archive_acl_reset</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>isint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>start</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>start</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>n</name> <operator>==</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>start</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>*</operator><name>start</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>ismode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_nfs4_perms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_nfs4_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>next_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sep</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
