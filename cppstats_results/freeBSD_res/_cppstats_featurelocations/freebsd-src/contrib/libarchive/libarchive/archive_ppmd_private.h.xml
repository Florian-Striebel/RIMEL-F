<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_ppmd_private.h">



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_PPMD_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_PPMD_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ZCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>Byte</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>short</name></type> <name>Int16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>UInt16</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LZMA_UINT32_IS_ULONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name></type> <name>Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>UInt32</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UInt32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SZ_NO_INT_64</name></expr></argument>)</argument_list></call></expr></cpp:if>




<typedef>typedef <type><name>long</name></type> <name>Int64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>UInt64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int64</name></type> <name>Int64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>UInt64</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_CONST</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>Int64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>UInt64</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_CONST</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n ##ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int</name></type> <name>Bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>True</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>False</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<function_decl><type><name>Byte</name></type> (<modifier>*</modifier><name>Read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>IByteIn</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_write</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Byte</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>IByteOut</name>;</typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_CPU_X86</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MY_CPU_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_CPU_32BIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MY_CPU_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_32BIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_INT_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_PERIOD_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_BIN_SCALE</name></cpp:macro> <cpp:value>(1 &lt;&lt; (PPMD_INT_BITS + PPMD_PERIOD_BITS))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_GET_MEAN_SPEC</name><parameter_list>(<parameter><type><name>summ</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>, <parameter><type><name>round</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((summ) + (1 &lt;&lt; ((shift) - (round)))) &gt;&gt; (shift))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_GET_MEAN</name><parameter_list>(<parameter><type><name>summ</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PPMD_GET_MEAN_SPEC((summ), PPMD_PERIOD_BITS, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_UPDATE_PROB_0</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((prob) + (1 &lt;&lt; PPMD_INT_BITS) - PPMD_GET_MEAN(prob))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_UPDATE_PROB_1</name><parameter_list>(<parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((prob) - PPMD_GET_MEAN(prob))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_N1</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_N2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_N3</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_N4</name></cpp:macro> <cpp:value>((128 + 3 - 1 * PPMD_N1 - 2 * PPMD_N2 - 3 * PPMD_N3) / 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_NUM_INDEXES</name></cpp:macro> <cpp:value>(PPMD_N1 + PPMD_N2 + PPMD_N3 + PPMD_N4)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>UInt16</name></type> <name>Summ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>Shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>Count</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd_See</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd_See_Update</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((p)-&gt;Shift &lt; PPMD_PERIOD_BITS &amp;&amp; --(p)-&gt;Count == 0) { (p)-&gt;Summ &lt;&lt;= 1; (p)-&gt;Count = (Byte)(3 &lt;&lt; (p)-&gt;Shift++); }</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>Byte</name></type> <name>Symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>Freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>SuccessorLow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>SuccessorHigh</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd_State</name>;</typedef>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name>CPpmd_State</name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd_State_Ref</name>;</typedef>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name>void</name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd_Void_Ref</name>;</typedef>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name>Byte</name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd_Byte_Ref</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPMD_SetAllBitsIn256Bytes</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ unsigned j; for (j = 0; j &lt; 256 / sizeof(p[0]); j += 8) { p[j+7] = p[j+6] = p[j+5] = p[j+4] = p[j+3] = p[j+2] = p[j+1] = p[j+0] = ~(size_t)0; }}</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
