<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_entry.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAJOR_IN_MKDEV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mkdev.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MAJOR</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MAJOR_IN_SYSMACROS</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MAJOR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_EXT2_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/ext2_fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXT2FS_EXT2_FS_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext2fs/ext2_fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_acl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(0x00ff &amp; ((x) &gt;&gt; 8)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(0xffff00ff &amp; (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>,<parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0xff00 &amp; ((maj)&lt;&lt;8)) | (0xffff00ff &amp; (min)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/netmgr.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ae_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev(ND_LOCAL_NODE, (maj), (min))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>makedev</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ae_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev((maj), (min))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>mkdev</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__WIN32__</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ae_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mkdev((maj), (min))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ae_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev((maj), (min))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_NS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>ns</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { t += ns / 1000000000; ns %= 1000000000; if (ns &lt; 0) { --t; ns += 1000000000; } } while (0)</cpp:value></cpp:define>






<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>ae_fflagstostr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitclear</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>ae_wcstofflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>stringp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>setp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>clrp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ae_strtofflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stringp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>setp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>clrp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCSCPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type> <name>wcscpy</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>s1</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>s1</name> <operator>=</operator> <operator>*</operator><name>s2</name><operator>)</operator> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s1</name></expr><operator>,</operator> <expr><operator>++</operator><name>s2</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCSLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>wcslen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name> <operator>-</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WMEMCMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmemcmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp((a), (b), (i) * sizeof(wchar_t))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type>
<name>archive_entry_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_mac_metadata</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_acl_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_xattr_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_sparse_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink_type</name></name> <operator>=</operator> <name>AE_SYMLINK_TYPE_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type>
<name>archive_entry_clone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_xattr</name></name> <modifier>*</modifier></type><name>xp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ae_sparse</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<expr_stmt><expr><name>entry2</name> <operator>=</operator> <call><name>archive_entry_new2</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>ae_stat</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>ae_fflags_set</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>ae_symlink_type</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_symlink_type</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>entry2</name><operator>-&gt;</operator><name>encryption</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_digest</name><parameter_list>(<parameter><type><name>_e2</name></type></parameter>, <parameter><type><name>_e</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(_e2-&gt;digest._t, _e-&gt;digest._t, sizeof(_e2-&gt;digest._t))</cpp:value></cpp:define>


<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>rmd160</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha384</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copy_digest</name></cpp:undef>


<expr_stmt><expr><call><name>archive_acl_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry2</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>archive_entry_mac_metadata</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_mac_metadata</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>xp</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>xattr_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_xattr_add_entry</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>,
<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>sparse_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_sparse_add_entry</name><argument_list>(<argument><expr><name>entry2</name></expr></argument>,
<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>entry2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type>
<name>archive_entry_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_entry_new2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type>
<name>archive_entry_new2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator>struct <name>archive_entry</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink_type</name></name> <operator>=</operator> <name>AE_SYMLINK_TYPE_UNDEFINED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>entry</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>time_t</name></type>
<name>archive_entry_atime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_atime</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>archive_entry_atime_nsec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_atime_nsec</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_atime_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_ATIME</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type>
<name>archive_entry_birthtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_birthtime</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>archive_entry_birthtime_nsec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_birthtime_nsec</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_birthtime_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_BIRTHTIME</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type>
<name>archive_entry_ctime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ctime</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_ctime_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_CTIME</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>archive_entry_ctime_nsec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ctime_nsec</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_dev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ae_makedev</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devmajor</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devminor</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_dev_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_DEV</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_devmajor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devmajor</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>major</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_devminor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devminor</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>minor</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>__LA_MODE_T</name></type>
<name>archive_entry_filetype</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>AE_IFMT</name> <operator>&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>clear</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_fflags_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>f</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ae_fflagstostr</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>f</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_entry_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_gid</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_gname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_gname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_gname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_hardlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_HARDLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_hardlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_HARDLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_utf8</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_hardlink_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_HARDLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_hardlink_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_HARDLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_entry_ino</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ino</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_ino_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_INO</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_entry_ino64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ino</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>__LA_MODE_T</name></type>
<name>archive_entry_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type>
<name>archive_entry_mtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_mtime</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>archive_entry_mtime_nsec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_mtime_nsec</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_mtime_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_MTIME</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>archive_entry_nlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_nlink</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_pathname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_utf8</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_pathname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_pathname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>__LA_MODE_T</name></type>
<name>archive_entry_perm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>~</operator><name>AE_IFMT</name> <operator>&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_rdev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ae_makedev</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevmajor</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevminor</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_rdevmajor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevmajor</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>major</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>dev_t</name></type>
<name>archive_entry_rdevminor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevminor</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>minor</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_entry_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_size_is_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_sourcepath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_sourcepath_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_symlink_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink_type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_symlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_utf8</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_symlink_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_symlink_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>la_int64_t</name></type>
<name>archive_entry_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_uid</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_uname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_uname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_uname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_is_data_encrypted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>&amp;</operator> <name>AE_ENCRYPTION_DATA</name><operator>)</operator> <operator>==</operator> <name>AE_ENCRYPTION_DATA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_is_metadata_encrypted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>&amp;</operator> <name>AE_ENCRYPTION_METADATA</name><operator>)</operator> <operator>==</operator> <name>AE_ENCRYPTION_METADATA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_is_encrypted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>&amp;</operator> <operator>(</operator><name>AE_ENCRYPTION_DATA</name><operator>|</operator><name>AE_ENCRYPTION_METADATA</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>archive_entry_set_filetype</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_IFMT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name> <operator>|=</operator> <name>AE_IFMT</name> <operator>&amp;</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_fflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name> <operator>=</operator> <name>clear</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_copy_fflags_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ae_strtofflags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_copy_fflags_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_text</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ae_wcstofflags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_set</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_fflags_clear</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_gid</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_gname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_gname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_gname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_gname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_gname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_gname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_ino</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>ino</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_INO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ino</name></name> <operator>=</operator> <name>ino</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_ino64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>ino</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_INO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ino</name></name> <operator>=</operator> <name>ino</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_hardlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_hardlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_hardlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_hardlink_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_hardlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_hardlink_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_HARDLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_atime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FIX_NS</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_ATIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_atime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_atime_nsec</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_unset_atime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_ATIME</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_birthtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FIX_NS</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_BIRTHTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_birthtime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_birthtime_nsec</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_unset_birthtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_birthtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_BIRTHTIME</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_ctime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FIX_NS</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_CTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ctime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_ctime_nsec</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_unset_ctime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_CTIME</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_dev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_DEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_devmajor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_DEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devmajor</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_devminor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_DEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_dev_is_broken_down</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_devminor</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>archive_entry_set_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_link_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>archive_entry_copy_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>archive_entry_copy_link_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_link_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_link_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;</operator> <name>AE_SET_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_hardlink</name></name></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_mtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FIX_NS</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_MTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_mtime</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_mtime_nsec</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_unset_mtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_MTIME</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_nlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_nlink</name></name> <operator>=</operator> <name>nlink</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_pathname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_pathname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_pathname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_pathname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_pathname</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_perm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name> <operator>&amp;=</operator> <name>AE_IFMT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>mode</name></name> <operator>|=</operator> <operator>~</operator><name>AE_IFMT</name> <operator>&amp;</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_rdev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_rdevmajor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevmajor</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_rdevminor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdev_is_broken_down</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_rdevminor</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_size</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_unset_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_sourcepath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_sourcepath_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_sourcepath</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_symlink_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_symlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_symlink_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_symlink_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>, <argument><expr><name>linkname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_symlink_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_symlink</name></name></expr></argument>,
<argument><expr><name>linkname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linkname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>|=</operator> <name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_set</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_SET_SYMLINK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_int64_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>stat_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ae_stat</name><operator>.</operator><name>aest_uid</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_uname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_uname_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_update_uname_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_is_data_encrypted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>is_encrypted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_encrypted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>|=</operator> <name>AE_ENCRYPTION_DATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_ENCRYPTION_DATA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_set_is_metadata_encrypted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>is_encrypted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_encrypted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>|=</operator> <name>AE_ENCRYPTION_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encryption</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_ENCRYPTION_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_copy_uname_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ae_uname</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>archive_entry_mac_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>mac_metadata_size</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_copy_mac_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata_size</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mac_metadata</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_digest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_MD5</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>md5</name></name></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_RMD160</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>rmd160</name></name></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA1</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha1</name></name></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA256</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha256</name></name></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA384</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha384</name></name></expr>;</return>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA512</name></expr>:</case>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>sha512</name></name></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_set_digest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_digest</name><parameter_list>(<parameter><type><name>_e</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>, <parameter><type><name>_d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>memcpy(_e-&gt;digest._t, _d, sizeof(_e-&gt;digest._t))</cpp:value></cpp:define>


<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_MD5</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_RMD160</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>rmd160</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA1</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA256</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha256</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA384</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha384</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_ENTRY_DIGEST_SHA512</name></expr>:</case>
<expr_stmt><expr><call><name>copy_digest</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sha512</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>ARCHIVE_WARN</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copy_digest</name></cpp:undef>
</block_content>}</block></function>










<function><type><name><name>struct</name> <name>archive_acl</name></name> <modifier>*</modifier></type>
<name>archive_entry_acl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_entry_acl_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_acl_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_entry_acl_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_acl_add_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_entry_acl_add_entry_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_acl_add_entry_w_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_entry_acl_types</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_types</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_entry_acl_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_acl_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>archive_entry_acl_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_acl_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>archive_entry_acl_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>permset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_acl_next</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>want_type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>permset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_FATAL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_acl_to_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_to_text_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>archive_entry_acl_to_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>la_ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_to_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>_archive_entry_acl_to_text_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_to_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>archive_entry_acl_from_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wtext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_from_text_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>wtext</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_entry_acl_from_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_from_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_archive_entry_acl_from_text_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>archive_acl_from_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_entry_acl_text_compat</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>OLD_ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>OLD_ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>archive_entry_acl_text_w</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text_w</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_acl_text_compat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text_w</name></name> <operator>=</operator> <call><name>archive_acl_to_text_w</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text_w</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_entry_acl_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_acl_text_compat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name> <operator>=</operator> <call><name>archive_acl_to_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>_archive_entry_acl_text_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_text</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_acl_text_compat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name> <operator>=</operator> <call><name>archive_acl_to_text_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>acl</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ssize_t</name> <operator>*</operator><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>acl_text</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>acl</name><operator>.</operator><name>acl_text</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















































































<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>flag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>clear</name></decl>;</decl_stmt>
}</block> <decl><name><name>fileflags</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosappnd"</literal></expr>, <expr><literal type="string">L"nosappnd"</literal></expr>, <expr><name>SF_APPEND</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosappend"</literal></expr>, <expr><literal type="string">L"nosappend"</literal></expr>, <expr><name>SF_APPEND</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosappnd"</literal></expr>, <expr><literal type="string">L"nosappnd"</literal></expr>, <expr><name>FS_APPEND_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosappend"</literal></expr>, <expr><literal type="string">L"nosappend"</literal></expr>, <expr><name>FS_APPEND_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_APPEND_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nosappnd"</literal></expr>, <expr><literal type="string">L"nosappnd"</literal></expr>, <expr><name>EXT2_APPEND_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosappend"</literal></expr>, <expr><literal type="string">L"nosappend"</literal></expr>, <expr><name>EXT2_APPEND_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_ARCHIVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noarch"</literal></expr>, <expr><literal type="string">L"noarch"</literal></expr>, <expr><name>SF_ARCHIVED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noarchived"</literal></expr>, <expr><literal type="string">L"noarchived"</literal></expr>, <expr><name>SF_ARCHIVED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noschg"</literal></expr>, <expr><literal type="string">L"noschg"</literal></expr>, <expr><name>SF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noschange"</literal></expr>, <expr><literal type="string">L"noschange"</literal></expr>, <expr><name>SF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosimmutable"</literal></expr>, <expr><literal type="string">L"nosimmutable"</literal></expr>, <expr><name>SF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noschg"</literal></expr>, <expr><literal type="string">L"noschg"</literal></expr>, <expr><name>FS_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noschange"</literal></expr>, <expr><literal type="string">L"noschange"</literal></expr>, <expr><name>FS_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosimmutable"</literal></expr>, <expr><literal type="string">L"nosimmutable"</literal></expr>, <expr><name>FS_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_IMMUTABLE_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"noschg"</literal></expr>, <expr><literal type="string">L"noschg"</literal></expr>, <expr><name>EXT2_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noschange"</literal></expr>, <expr><literal type="string">L"noschange"</literal></expr>, <expr><name>EXT2_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosimmutable"</literal></expr>, <expr><literal type="string">L"nosimmutable"</literal></expr>, <expr><name>EXT2_IMMUTABLE_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_NOUNLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosunlnk"</literal></expr>, <expr><literal type="string">L"nosunlnk"</literal></expr>, <expr><name>SF_NOUNLINK</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosunlink"</literal></expr>, <expr><literal type="string">L"nosunlink"</literal></expr>, <expr><name>SF_NOUNLINK</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_APPEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nouappnd"</literal></expr>, <expr><literal type="string">L"nouappnd"</literal></expr>, <expr><name>UF_APPEND</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouappend"</literal></expr>, <expr><literal type="string">L"nouappend"</literal></expr>, <expr><name>UF_APPEND</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_IMMUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nouchg"</literal></expr>, <expr><literal type="string">L"nouchg"</literal></expr>, <expr><name>UF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouchange"</literal></expr>, <expr><literal type="string">L"nouchange"</literal></expr>, <expr><name>UF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouimmutable"</literal></expr>, <expr><literal type="string">L"nouimmutable"</literal></expr>, <expr><name>UF_IMMUTABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_NODUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nodump"</literal></expr>, <expr><literal type="string">L"nodump"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UF_NODUMP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_NODUMP_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nodump"</literal></expr>, <expr><literal type="string">L"nodump"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FS_NODUMP_FL</name></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_NODUMP_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nodump"</literal></expr>, <expr><literal type="string">L"nodump"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>EXT2_NODUMP_FL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_OPAQUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noopaque"</literal></expr>, <expr><literal type="string">L"noopaque"</literal></expr>, <expr><name>UF_OPAQUE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_NOUNLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nouunlnk"</literal></expr>, <expr><literal type="string">L"nouunlnk"</literal></expr>, <expr><name>UF_NOUNLINK</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouunlink"</literal></expr>, <expr><literal type="string">L"nouunlink"</literal></expr>, <expr><name>UF_NOUNLINK</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_COMPRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"nocompressed"</literal></expr>, <expr><literal type="string">L"nocompressed"</literal></expr>, <expr><name>UF_COMPRESSED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_HIDDEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nohidden"</literal></expr>, <expr><literal type="string">L"nohidden"</literal></expr>, <expr><name>UF_HIDDEN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouhidden"</literal></expr>, <expr><literal type="string">L"nouhidden"</literal></expr>, <expr><name>UF_HIDDEN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILE_ATTRIBUTE_HIDDEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nohidden"</literal></expr>, <expr><literal type="string">L"nohidden"</literal></expr>, <expr><name>FILE_ATTRIBUTE_HIDDEN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouhidden"</literal></expr>, <expr><literal type="string">L"nouhidden"</literal></expr>, <expr><name>FILE_ATTRIBUTE_HIDDEN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_OFFLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nooffline"</literal></expr>, <expr><literal type="string">L"nooffline"</literal></expr>, <expr><name>UF_OFFLINE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nouoffline"</literal></expr>, <expr><literal type="string">L"nouoffline"</literal></expr>, <expr><name>UF_OFFLINE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_READONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nordonly"</literal></expr>, <expr><literal type="string">L"nordonly"</literal></expr>, <expr><name>UF_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nourdonly"</literal></expr>, <expr><literal type="string">L"nourdonly"</literal></expr>, <expr><name>UF_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noreadonly"</literal></expr>, <expr><literal type="string">L"noreadonly"</literal></expr>, <expr><name>UF_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nordonly"</literal></expr>, <expr><literal type="string">L"nordonly"</literal></expr>, <expr><name>FILE_ATTRIBUTE_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nourdonly"</literal></expr>, <expr><literal type="string">L"nourdonly"</literal></expr>, <expr><name>FILE_ATTRIBUTE_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noreadonly"</literal></expr>, <expr><literal type="string">L"noreadonly"</literal></expr>, <expr><name>FILE_ATTRIBUTE_READONLY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_SPARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosparse"</literal></expr>, <expr><literal type="string">L"nosparse"</literal></expr>, <expr><name>UF_SPARSE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nousparse"</literal></expr>, <expr><literal type="string">L"nousparse"</literal></expr>, <expr><name>UF_SPARSE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_REPARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noreparse"</literal></expr>, <expr><literal type="string">L"noreparse"</literal></expr>, <expr><name>UF_REPARSE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"noureparse"</literal></expr>, <expr><literal type="string">L"noureparse"</literal></expr>, <expr><name>UF_REPARSE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UF_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosystem"</literal></expr>, <expr><literal type="string">L"nosystem"</literal></expr>, <expr><name>UF_SYSTEM</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nousystem"</literal></expr>, <expr><literal type="string">L"nousystem"</literal></expr>, <expr><name>UF_SYSTEM</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILE_ATTRIBUTE_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosystem"</literal></expr>, <expr><literal type="string">L"nosystem"</literal></expr>, <expr><name>FILE_ATTRIBUTE_SYSTEM</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nousystem"</literal></expr>, <expr><literal type="string">L"nousystem"</literal></expr>, <expr><name>FILE_ATTRIBUTE_SYSTEM</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_UNRM_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noundel"</literal></expr>, <expr><literal type="string">L"noundel"</literal></expr>, <expr><name>FS_UNRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_UNRM_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"noundel"</literal></expr>, <expr><literal type="string">L"noundel"</literal></expr>, <expr><name>EXT2_UNRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_COMPR_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nocompress"</literal></expr>, <expr><literal type="string">L"nocompress"</literal></expr>, <expr><name>FS_COMPR_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_COMPR_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nocompress"</literal></expr>, <expr><literal type="string">L"nocompress"</literal></expr>, <expr><name>EXT2_COMPR_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_NOATIME_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noatime"</literal></expr>, <expr><literal type="string">L"noatime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FS_NOATIME_FL</name></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_NOATIME_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"noatime"</literal></expr>, <expr><literal type="string">L"noatime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>EXT2_NOATIME_FL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_DIRSYNC_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nodirsync"</literal></expr>, <expr><literal type="string">L"nodirsync"</literal></expr>, <expr><name>FS_DIRSYNC_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_DIRSYNC_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nodirsync"</literal></expr>, <expr><literal type="string">L"nodirsync"</literal></expr>, <expr><name>EXT2_DIRSYNC_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_JOURNAL_DATA_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nojournal-data"</literal></expr>,<expr><literal type="string">L"nojournal-data"</literal></expr>, <expr><name>FS_JOURNAL_DATA_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nojournal"</literal></expr>, <expr><literal type="string">L"nojournal"</literal></expr>, <expr><name>FS_JOURNAL_DATA_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT3_JOURNAL_DATA_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nojournal-data"</literal></expr>,<expr><literal type="string">L"nojournal-data"</literal></expr>, <expr><name>EXT3_JOURNAL_DATA_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nojournal"</literal></expr>, <expr><literal type="string">L"nojournal"</literal></expr>, <expr><name>EXT3_JOURNAL_DATA_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_SECRM_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosecdel"</literal></expr>, <expr><literal type="string">L"nosecdel"</literal></expr>, <expr><name>FS_SECRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosecuredeletion"</literal></expr>,<expr><literal type="string">L"nosecuredeletion"</literal></expr>,<expr><name>FS_SECRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_SECRM_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nosecdel"</literal></expr>, <expr><literal type="string">L"nosecdel"</literal></expr>, <expr><name>EXT2_SECRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"nosecuredeletion"</literal></expr>,<expr><literal type="string">L"nosecuredeletion"</literal></expr>,<expr><name>EXT2_SECRM_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_SYNC_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nosync"</literal></expr>, <expr><literal type="string">L"nosync"</literal></expr>, <expr><name>FS_SYNC_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_SYNC_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"nosync"</literal></expr>, <expr><literal type="string">L"nosync"</literal></expr>, <expr><name>EXT2_SYNC_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_NOTAIL_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"notail"</literal></expr>, <expr><literal type="string">L"notail"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FS_NOTAIL_FL</name></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_NOTAIL_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"notail"</literal></expr>, <expr><literal type="string">L"notail"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>EXT2_NOTAIL_FL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_TOPDIR_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"notopdir"</literal></expr>, <expr><literal type="string">L"notopdir"</literal></expr>, <expr><name>FS_TOPDIR_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT2_TOPDIR_FL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"notopdir"</literal></expr>, <expr><literal type="string">L"notopdir"</literal></expr>, <expr><name>EXT2_TOPDIR_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_NOCOW_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"nocow"</literal></expr>, <expr><literal type="string">L"nocow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FS_NOCOW_FL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FS_PROJINHERIT_FL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noprojinherit"</literal></expr>,<expr><literal type="string">L"noprojinherit"</literal></expr>, <expr><name>FS_PROJINHERIT_FL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ae_fflagstostr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitclear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>flag</name></name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>bitset</name> <operator>|</operator> <name>bitclear</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name>fileflags</name></expr>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>flag</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&amp;</operator> <operator>(</operator><name><name>flag</name><operator>-&gt;</operator><name>set</name></name> <operator>|</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name><name>flag</name><operator>-&gt;</operator><name>set</name></name> <operator>|</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name>fileflags</name></expr>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>flag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitset</name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name> <operator>||</operator> <name>bitclear</name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bitset</name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name> <operator>||</operator> <name>bitclear</name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bitset</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name><name>flag</name><operator>-&gt;</operator><name>set</name></name> <operator>|</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bitclear</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name><name>flag</name><operator>-&gt;</operator><name>set</name></name> <operator>|</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>&gt;</operator> <name>string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>dp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ae_strtofflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>setp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>clrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>flag</name></name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>failed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>set</name> <operator>=</operator> <name>clear</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name>fileflags</name></expr>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>flag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>flag_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>flag_length</name>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clear</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <name>flag_length</name> <operator>-</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>set</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>failed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>setp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>setp</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>clrp</name> <operator>=</operator> <name>clear</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>failed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>ae_wcstofflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>setp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>clrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>flag</name></name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>failed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>set</name> <operator>=</operator> <name>clear</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <name>L</name><literal type="char">'\t'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name>end</name> <operator>!=</operator> <name>L</name><literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <name>L</name><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name>fileflags</name></expr>;</init> <condition><expr><name><name>flag</name><operator>-&gt;</operator><name>wname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>flag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>flag_length</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>wname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>flag_length</name>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>wname</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clear</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <name>flag_length</name> <operator>-</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>wmemcmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>wname</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>set</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear</name> <operator>|=</operator> <name><name>flag</name><operator>-&gt;</operator><name>clear</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>flag</name><operator>-&gt;</operator><name>wname</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>failed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>start</name> <operator>==</operator> <name>L</name><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>setp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>setp</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>clrp</name> <operator>=</operator> <name>clear</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>failed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>remainder</name></decl>;</decl_stmt>

<expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name>archive_entry_copy_fflags_text_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">L"nosappnd dump archive,,,,,,,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_fflags</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wprintf</name><argument_list>(<argument><expr><literal type="string">L"set=0x%lX clear=0x%lX remainder='%ls'\n"</literal></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>clear</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wprintf</name><argument_list>(<argument><expr><literal type="string">L"new flags='%s'\n"</literal></expr></argument>, <argument><expr><call><name>archive_entry_fflags_text</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
