<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_archive_read_support.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<typedef>typedef <function_decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>constructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>enabler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>destructor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>format_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>format_code_enabler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_read_support_format_by_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>format_code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_code_setter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_read_set_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>format_code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_success</name><parameter_list>(<parameter><decl><type><name>constructor</name></type> <name>new_</name></decl></parameter>, <parameter><decl><type><name>enabler</name></type> <name>enable_</name></decl></parameter>, <parameter><decl><type><name>destructor</name></type> <name>free_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>new_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>enable_</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free_</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_failure</name><parameter_list>(<parameter><decl><type><name>constructor</name></type> <name>new_</name></decl></parameter>, <parameter><decl><type><name>enabler</name></type> <name>enable_</name></decl></parameter>, <parameter><decl><type><name>destructor</name></type> <name>free_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>new_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>, <argument><expr><call><name>enable_</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_errno</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_filter_or_format</name><parameter_list>(<parameter><decl><type><name>enabler</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_success</name><argument_list>(<argument><expr><name>archive_read_new</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>archive_read_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_failure</name><argument_list>(<argument><expr><name>archive_write_new</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>archive_write_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_failure</name><argument_list>(<argument><expr><name>archive_read_disk_new</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>archive_read_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_failure</name><argument_list>(<argument><expr><name>archive_write_disk_new</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>archive_write_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_read_support</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_7zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_cab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_cpio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_lha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_mtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_tar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_xar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_format_zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>format_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ARCHIVE_FORMAT_CPIO</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_POSIX</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_BIN_LE</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_BIN_BE</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_SVR4_NOCRC</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_SVR4_CRC</name></expr>,
<expr><name>ARCHIVE_FORMAT_CPIO_AFIO_LARGE</name></expr>,
<expr><name>ARCHIVE_FORMAT_TAR</name></expr>,
<expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr>,
<expr><name>ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE</name></expr>,
<expr><name>ARCHIVE_FORMAT_TAR_PAX_RESTRICTED</name></expr>,
<expr><name>ARCHIVE_FORMAT_TAR_GNUTAR</name></expr>,
<expr><name>ARCHIVE_FORMAT_ISO9660</name></expr>,
<expr><name>ARCHIVE_FORMAT_ISO9660_ROCKRIDGE</name></expr>,
<expr><name>ARCHIVE_FORMAT_ZIP</name></expr>,
<expr><name>ARCHIVE_FORMAT_EMPTY</name></expr>,
<expr><name>ARCHIVE_FORMAT_AR</name></expr>,
<expr><name>ARCHIVE_FORMAT_AR_GNU</name></expr>,
<expr><name>ARCHIVE_FORMAT_AR_BSD</name></expr>,
<expr><name>ARCHIVE_FORMAT_MTREE</name></expr>,
<expr><name>ARCHIVE_FORMAT_RAW</name></expr>,
<expr><name>ARCHIVE_FORMAT_XAR</name></expr>,
<expr><name>ARCHIVE_FORMAT_LHA</name></expr>,
<expr><name>ARCHIVE_FORMAT_CAB</name></expr>,
<expr><name>ARCHIVE_FORMAT_RAR</name></expr>,
<expr><name>ARCHIVE_FORMAT_7ZIP</name></expr>,
<expr><name>ARCHIVE_FORMAT_WARC</name></expr>,
<expr><name>ARCHIVE_FORMAT_RAR_V5</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>format_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>format_code</name> <operator>=</operator> <name><name>format_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>format_code_enabler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>format_code_setter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_bzip2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_gzip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_lzip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_lzma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_rpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_filter_or_format</name><argument_list>(<argument><expr><name>archive_read_support_filter_xz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
