<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_acl_text.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls0</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="string">"user100"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="string">"user1000"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="string">"user101"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="string">"group79"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_DELETE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="string">"user101"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>acltext</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::r-x\n"</literal>
<literal type="string">"user:user100:r-x\n"</literal>
<literal type="string">"user:user1000:---\n"</literal>
<literal type="string">"group:group78:rwx\n"</literal>
<literal type="string">"default:user::r-x\n"</literal>
<literal type="string">"default:group::r-x\n"</literal>
<literal type="string">"default:other::---\n"</literal>
<literal type="string">"default:user:user101:r-x\n"</literal>
<literal type="string">"default:group:group79:--x"</literal></expr>,

<expr><literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::r-x\n"</literal>
<literal type="string">"user:user100:r-x:100\n"</literal>
<literal type="string">"user:user1000:---:1000\n"</literal>
<literal type="string">"group:group78:rwx:78\n"</literal>
<literal type="string">"default:user::r-x\n"</literal>
<literal type="string">"default:group::r-x\n"</literal>
<literal type="string">"default:other::---\n"</literal>
<literal type="string">"default:user:user101:r-x:101\n"</literal>
<literal type="string">"default:group:group79:--x:79"</literal></expr>,

<expr><literal type="string">"u::rwx\n"</literal>
<literal type="string">"g::r-x\n"</literal>
<literal type="string">"o::r-x\n"</literal>
<literal type="string">"u:user100:r-x:100\n"</literal>
<literal type="string">"u:user1000:---:1000\n"</literal>
<literal type="string">"g:group78:rwx:78\n"</literal>
<literal type="string">"d:user::r-x\n"</literal>
<literal type="string">"d:group::r-x\n"</literal>
<literal type="string">"d:other::---\n"</literal>
<literal type="string">"d:user:user101:r-x:101\n"</literal>
<literal type="string">"d:group:group79:--x:79"</literal></expr>,

<expr><literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::r-x\n"</literal>
<literal type="string">"user:user100:r-x\n"</literal>
<literal type="string">"user:user1000:---\n"</literal>
<literal type="string">"group:group78:rwx"</literal></expr>,

<expr><literal type="string">"user::rwx,"</literal>
<literal type="string">"group::r-x,"</literal>
<literal type="string">"other::r-x,"</literal>
<literal type="string">"user:user100:r-x,"</literal>
<literal type="string">"user:user1000:---,"</literal>
<literal type="string">"group:group78:rwx"</literal></expr>,

<expr><literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::r-x\n"</literal>
<literal type="string">"user:user100:r-x:100\n"</literal>
<literal type="string">"user:user1000:---:1000\n"</literal>
<literal type="string">"group:group78:rwx:78"</literal></expr>,

<expr><literal type="string">"user::r-x\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::---\n"</literal>
<literal type="string">"user:user101:r-x\n"</literal>
<literal type="string">"group:group79:--x"</literal></expr>,

<expr><literal type="string">"user::r-x\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"other::---\n"</literal>
<literal type="string">"user:user101:r-x:101\n"</literal>
<literal type="string">"group:group79:--x:79"</literal></expr>,

<expr><literal type="string">"default:user::r-x\n"</literal>
<literal type="string">"default:group::r-x\n"</literal>
<literal type="string">"default:other::---\n"</literal>
<literal type="string">"default:user:user101:r-x\n"</literal>
<literal type="string">"default:group:group79:--x"</literal></expr>,

<expr><literal type="string">"user:user77:rw-p--a-R-c-o-:-------:allow\n"</literal>
<literal type="string">"user:user101:-w-pdD--------:fdin---:deny\n"</literal>
<literal type="string">"group:group78:r-----a-R-c---:------I:allow\n"</literal>
<literal type="string">"owner@:rwxp--aARWcCo-:-------:allow\n"</literal>
<literal type="string">"group@:rw-p--a-R-c---:-------:allow\n"</literal>
<literal type="string">"everyone@:r-----a-R-c--s:-------:allow"</literal></expr>,

<expr><literal type="string">"user:user77:rw-p--a-R-c-o-:-------:allow:77\n"</literal>
<literal type="string">"user:user101:-w-pdD--------:fdin---:deny:101\n"</literal>
<literal type="string">"group:group78:r-----a-R-c---:------I:allow:78\n"</literal>
<literal type="string">"owner@:rwxp--aARWcCo-:-------:allow\n"</literal>
<literal type="string">"group@:rw-p--a-R-c---:-------:allow\n"</literal>
<literal type="string">"everyone@:r-----a-R-c--s:-------:allow"</literal></expr>,

<expr><literal type="string">"user:user77:rwpaRco::allow:77\n"</literal>
<literal type="string">"user:user101:wpdD:fdin:deny:101\n"</literal>
<literal type="string">"group:group78:raRc:I:allow:78\n"</literal>
<literal type="string">"owner@:rwxpaARWcCo::allow\n"</literal>
<literal type="string">"group@:rwpaRc::allow\n"</literal>
<literal type="string">"everyone@:raRcs::allow"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>convert_s_to_ws</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ws</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compare_acl_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wtext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>archive_entry_acl_to_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wtext</name> <operator>=</operator> <call><name>archive_entry_acl_to_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wtext</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wtext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wtext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_from_text</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>convert_s_to_ws</name><argument_list>(<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_from_text_w</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_to_text</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA</name></expr></argument>,
<argument><expr><name><name>acltext</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compare_acl_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_STYLE_COMPACT</name></expr></argument>, <argument><expr><name><name>acltext</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
