<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_tbz.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'Z'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'Y'</literal></expr>,<expr><literal type="char">'&amp;'</literal></expr>,<expr><literal type="char">'S'</literal></expr>,<expr><literal type="char">'Y'</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="char">'W'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">251</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">208</literal></expr>,
<expr><literal type="number">128</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">'@'</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="char">'"'</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="char">'@'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="char">'&amp;'</literal></expr>,
<expr><literal type="number">129</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">234</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">183</literal></expr>,
<expr><literal type="char">'J'</literal></expr>,<expr><literal type="char">'S'</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'&gt;'</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="number">179</literal></expr>,<expr><literal type="number">139</literal></expr>,
<expr><literal type="char">'\''</literal></expr>,<expr><literal type="char">'L'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="char">':'</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="char">'*'</literal></expr>,<expr><literal type="char">'&gt;'</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'?'</literal></expr>,<expr><literal type="number">23</literal></expr>,
<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="char">'W'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_tbz</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_support_filter_bzip2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"Bzip2 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_file_count</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_BZIP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


</unit>
