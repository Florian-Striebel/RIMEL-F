<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_gtar_sparse.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<struct>struct <name>contents</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name></type> <name><name>archive_contents_sparse</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3145728</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name></type> <name><name>archive_contents_sparse2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">7000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">9000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">11000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">12000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">13000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">14000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">15000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">17000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">18000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">21000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">23000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">25000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">26000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">27000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">29000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">30000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">33000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">34000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">35000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">36000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">37000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">38000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">39000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">41000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">42000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">43000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">44000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">45000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">46000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">47000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">48000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">49000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">50000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">51000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">52000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">53000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">54000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">55000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">56000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">57000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">58000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">59000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">60000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">61000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">62000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">63000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">64000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">65000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">66000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">67000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">68000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">69000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">70000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">71000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">72000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">73000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">74000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">75000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">76000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">77000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">78000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">79000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">81000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">82000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">83000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">85000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">86000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">87000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">88000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">89000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">90000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">91000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">92000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">93000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">94000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">95000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">96000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">97000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">98000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">99000000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">99000001</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name></type> <name><name>archive_contents_nonsparse</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
















<struct>struct <name>archive_contents</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>
}</block> <decl><name><name>files</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"sparse"</literal></expr>, <expr><name>archive_contents_sparse</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sparse2"</literal></expr>, <expr><name>archive_contents_sparse2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"non-sparse"</literal></expr>, <expr><name>archive_contents_nonsparse</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>verify_archive_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_contents</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name></type> <name>expect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name></type> <name>actual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_format_tar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Can't open %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_open_filename</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>filename</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>contents</name></name> <modifier>*</modifier></type><name>cts</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Name mismatch in archive %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <operator>*</operator><name>cts</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>err</name> <operator>=</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>actual</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>actual</name><operator>.</operator><name>o</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>actual</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>actual</name><operator>.</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name><name>actual</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>actual</name><operator>.</operator><name>o</name></name> <operator>&lt;</operator> <name><name>expect</name><operator>.</operator><name>o</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: pad at offset %jd "</literal>
<literal type="string">"should be zero"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>actual</name><operator>.</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>actual</name><operator>.</operator><name>o</name></name> <operator>==</operator> <name><name>expect</name><operator>.</operator><name>o</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name><name>expect</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expect</name><operator>.</operator><name>d</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expect</name><operator>.</operator><name>o</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expect</name><operator>.</operator><name>s</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expect</name><operator>.</operator><name>s</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expect</name> <operator>=</operator> <operator>*</operator><name>cts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: Unexpected trailing data"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>actual</name><operator>.</operator><name>o</name></name> <operator>&lt;=</operator> <name><name>expect</name><operator>.</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>actual</name><operator>.</operator><name>d</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><operator>.</operator><name>o</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>actual</name><operator>.</operator><name>s</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: should be end of entry"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>ARCHIVE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: Size returned at EOF must be zero"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>actual</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: Offset of final empty chunk must be same as file size"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>actual</name><operator>.</operator><name>o</name></name></expr></argument>, <argument><expr><name><name>expect</name><operator>.</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ac</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_EOF</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_gtar_sparse</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_13.tar"</literal></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_17.tar"</literal></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(
<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_17_posix00.tar"</literal></expr></argument>,
<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(
<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_17_posix01.tar"</literal></expr></argument>,
<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(
<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_17_posix10.tar"</literal></expr></argument>,
<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>verify_archive_file</name><argument_list>(
<argument><expr><literal type="string">"test_read_format_gtar_sparse_1_17_posix10_modified.tar"</literal></expr></argument>,
<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


</unit>
