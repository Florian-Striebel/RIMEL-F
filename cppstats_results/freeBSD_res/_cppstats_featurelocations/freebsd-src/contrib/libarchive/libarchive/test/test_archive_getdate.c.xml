<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_archive_getdate.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBARCHIVE_BUILD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_getdate.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_date</name></cpp:macro> <cpp:value>__archive_get_date</cpp:value></cpp:define>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_getdate</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"Jan 1, 1970 UTC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"7:12:18-0530 4 May 1983"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">420900138</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"2004/01/29 513 mest"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1075345980</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"99/02/17 7pm utc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">919278000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"02/17/99 7:11am est"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">919253460</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"now - 2 hours"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"2 hours ago"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"2 hours ago"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"+2 hours ago"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"now - 2 hours"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"-2 hours"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"Sun Feb 22 17:38:26 PST 2009"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">1235353106</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"tomorrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"yesterday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"now + 1 hour"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"now + 1 hour + 1 minute"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">1231113600</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Jan 5, 2009 00:00 UTC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"tomorrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"yesterday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"now + 1 hour"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"now + 1 hour + 1 minute"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>now</name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"tomorrow 5:16am UTC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>now</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"UTC 5:16am tomorrow"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>now</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"monday UTC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"sunday UTC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"tuesday UTC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"UTC next tuesday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>now</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>get_date</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="string">"last tuesday UTC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>now</name> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
