<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_txz.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">253</literal></expr>, <expr><literal type="number">55</literal></expr>,<expr><literal type="number">122</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">180</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">47</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">224</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">238</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">28</literal></expr>,<expr><literal type="number">191</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">144</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">70</literal></expr>,
<expr><literal type="number">5</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">215</literal></expr>, <expr><literal type="number">47</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">162</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">152</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">161</literal></expr>,
<expr><literal type="number">189</literal></expr>, <expr><literal type="number">73</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">132</literal></expr>, <expr><literal type="number">27</literal></expr>,<expr><literal type="number">195</literal></expr>, <expr><literal type="number">52</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">203</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">17</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">211</literal></expr>, <expr><literal type="number">18</literal></expr>,<expr><literal type="number">181</literal></expr>, <expr><literal type="number">76</literal></expr>,
<expr><literal type="number">93</literal></expr>,<expr><literal type="number">120</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">206</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">224</literal></expr>, <expr><literal type="number">80</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">134</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">9</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">247</literal></expr>, <expr><literal type="number">28</literal></expr>,<expr><literal type="number">139</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">184</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">103</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">128</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">96</literal></expr>,
<expr><literal type="number">177</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">251</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">90</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_txz</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_support_filter_xz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"xz reading not fully supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_file_count</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_XZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
