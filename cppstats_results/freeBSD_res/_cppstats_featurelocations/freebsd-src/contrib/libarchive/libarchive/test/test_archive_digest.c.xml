<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_archive_digest.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBARCHIVE_BUILD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_digest_private.h"</cpp:file></cpp:include>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_md5</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_md5_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\x93\xb8\x85\xad\xfe\x0d\xa0\x89"</literal>
<literal type="string">"\xcd\xf6\x34\x90\x4f\xd5\x9f\x71"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support MD5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_md5_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_rmd160</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_rmd160_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\xc8\x1b\x94\x93\x34\x20\x22\x1a\x7a\xc0"</literal>
<literal type="string">"\x04\xa9\x02\x42\xd8\xb1\xd3\xe5\x07\x0d"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_rmd160_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support RMD160"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_rmd160_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_rmd160_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_sha1</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_sha1_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\x5b\xa9\x3c\x9d\xb0\xcf\xf9\x3f\x52\xb5"</literal>
<literal type="string">"\x21\xd7\x42\x0e\x43\xf6\xed\xa2\x78\x4f"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support SHA1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha1_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_sha256</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_sha256_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\x6e\x34\x0b\x9c\xff\xb3\x7a\x98"</literal>
<literal type="string">"\x9c\xa5\x44\xe6\xbb\x78\x0a\x2c"</literal>
<literal type="string">"\x78\x90\x1d\x3f\xb3\x37\x38\x76"</literal>
<literal type="string">"\x85\x11\xa3\x06\x17\xaf\xa0\x1d"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support SHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_sha384</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_sha384_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\xbe\xc0\x21\xb4\xf3\x68\xe3\x06"</literal>
<literal type="string">"\x91\x34\xe0\x12\xc2\xb4\x30\x70"</literal>
<literal type="string">"\x83\xd3\xa9\xbd\xd2\x06\xe2\x4e"</literal>
<literal type="string">"\x5f\x0d\x86\xe1\x3d\x66\x36\x65"</literal>
<literal type="string">"\x59\x33\xec\x2b\x41\x34\x65\x96"</literal>
<literal type="string">"\x68\x17\xa9\xc2\x08\xa1\x17\x17"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_sha384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support SHA384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha384_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha384_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_sha512</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>archive_sha512_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actualmd</name><index>[]</index></name> <init>= <expr><literal type="string">"\xb8\x24\x4d\x02\x89\x81\xd6\x93"</literal>
<literal type="string">"\xaf\x7b\x45\x6a\xf8\xef\xa4\xca"</literal>
<literal type="string">"\xd6\x3d\x28\x2e\x19\xff\x14\x94"</literal>
<literal type="string">"\x2c\x24\x6e\x50\xd9\x35\x1d\x22"</literal>
<literal type="string">"\x70\x4a\x80\x2a\x71\xc3\x58\x0b"</literal>
<literal type="string">"\x63\x70\xde\x4c\xeb\x29\x3c\x32"</literal>
<literal type="string">"\x4a\x84\x23\x34\x25\x57\xd4\xe5"</literal>
<literal type="string">"\xc3\x84\x38\xf0\xe3\x69\x10\xee"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCHIVE_OK</name> <operator>!=</operator> <call><name>archive_sha512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"This platform does not support SHA512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha512_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_sha512_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>actualmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
