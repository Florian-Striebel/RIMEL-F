<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_write_format_mtree.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
}</block> <decl><name><name>entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"./COPYING"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./Makefile"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1233041050</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./NEWS"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./PROJECTS"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./README"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir/README"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1002</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir/config"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1232266273</literal></expr>, <expr><literal type="number">1003</literal></expr>, <expr><literal type="number">1003</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir2"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir3"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./subdir3/mtree"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1232266273</literal></expr>, <expr><literal type="number">1003</literal></expr>, <expr><literal type="number">1003</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
}</block> <decl><name><name>entries2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"COPYING"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Makefile"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1233041050</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NEWS"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PROJECTS"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"README"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir/README"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1231975636</literal></expr>, <expr><literal type="number">1002</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir/config"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1232266273</literal></expr>, <expr><literal type="number">1003</literal></expr>, <expr><literal type="number">1003</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir2"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir3"</literal></expr>, <expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>, <expr><literal type="number">1233504586</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"subdir3/mtree"</literal></expr>, <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0664</literal></expr>, <expr><literal type="number">1232266273</literal></expr>, <expr><literal type="number">1003</literal></expr>, <expr><literal type="number">1003</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_write_format_mtree_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use_set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dironly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name><modifier>*</modifier></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_mtree</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_option</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"use-set"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dironly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_option</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"dironly"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name> <operator>==</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name> <operator>==</operator> <call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name> <operator>==</operator> <call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"Hello012"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_set</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>used</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"\n/set "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dironly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="string">"/set type=dir uid=1001 gid=1001 mode=755"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="string">"/set type=file uid=1001 gid=1001 mode=644"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dironly</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name></expr></argument>, <argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>, <argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name></expr></argument>, <argument><expr><call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_write_format_mtree_sub2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use_set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dironly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name><modifier>*</modifier></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_mtree</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_option</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"use-set"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dironly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_set_format_option</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"dironly"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name> <operator>==</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name> <operator>==</operator> <call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name> <operator>==</operator> <call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"Hello012"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_set</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>used</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"\n/set "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dironly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="string">"/set type=dir uid=1001 gid=1001 mode=755"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="string">"/set type=file uid=1001 gid=1001 mode=644"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dironly</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name></expr></argument>, <argument><expr><call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>, <argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gid</name></expr></argument>, <argument><expr><call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_write_format_mtree</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>test_write_format_mtree_sub</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_write_format_mtree_no_leading_dotslash</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>test_write_format_mtree_sub2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_write_format_mtree_sub2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
