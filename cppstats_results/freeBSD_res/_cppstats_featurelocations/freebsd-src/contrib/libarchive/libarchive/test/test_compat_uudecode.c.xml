<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_compat_uudecode.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>archive_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"begin 644 test_read_uu.Z\n"</literal>
<literal type="string">"M'YV0+@`('$BPH,&amp;#\"!,J7,BP(4(8$&amp;_4J`$\"`,08$F%4O)AQ(\\2/(#7&amp;@#%C\n"</literal>
<literal type="string">"M!@T8-##.L`$\"QL@:-F(``%'#H&lt;V;.'/J!%!G#ITP&lt;BS\"H).FS&lt;Z$1(T&gt;/1A2\n"</literal>
<literal type="string">"IHU\"0%9=*G4JUJM6K6+-JW&lt;JUJ]&gt;O8,.*'4NVK-FS:-.J7&lt;NVK=NW9P$`\n"</literal>
<literal type="string">"`\n"</literal>
<literal type="string">"end\n"</literal>
<literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</literal>
<literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</literal>
<literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</literal>
<literal type="string">"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_compat_uudecode</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive_data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_COMPRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_UU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

</unit>
