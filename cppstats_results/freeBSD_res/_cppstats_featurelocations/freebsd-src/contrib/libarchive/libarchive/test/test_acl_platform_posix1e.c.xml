<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_acl_platform_posix1e.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD: head/lib/libarchive/test/test_acl_freebsd.c 189427 2009-03-06 04:21:23Z kientzle $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_POSIX1E</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ACL_GET_PERM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;acl/libacl.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_GET_PERM</name></cpp:macro> <cpp:value>acl_get_perm</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ACL_GET_PERM_NP</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_GET_PERM</name></cpp:macro> <cpp:value>acl_get_perm_np</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"user78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><literal type="number">0007</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_WRITE</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_WRITE</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_MASK</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<name>acl_entry_get_perm</name><parameter_list>(<parameter><decl><type><name>aclent_t</name> <modifier>*</modifier></type><name>aclent</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
acl_entry_get_perm<parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>aclent</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>permset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_FREEBSD</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBACL</name></expr></cpp:if>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>opaque_ps</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>aclent</name><operator>-&gt;</operator><name>a_perm</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aclent</name><operator>-&gt;</operator><name>a_perm</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aclent</name><operator>-&gt;</operator><name>a_perm</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>acl_get_permset</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACL_GET_PERM</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>, <argument><expr><name>ACL_EXECUTE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACL_GET_PERM</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>, <argument><expr><name>ACL_WRITE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ACL_GET_PERM</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>, <argument><expr><name>ACL_READ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>permset</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
acl_get_specific_entry(acl_t acl, acl_tag_t requested_tag_type, int requested_tag) {
int entry_id = ACL_FIRST_ENTRY;
acl_entry_t acl_entry;
acl_tag_t acl_tag_type;

while (1 == acl_get_entry(acl, entry_id, &amp;acl_entry)) {

entry_id = ACL_NEXT_ENTRY;


acl_get_tag_type(acl_entry, &amp;acl_tag_type);
if (acl_tag_type == requested_tag_type) {
switch (acl_tag_type) {
case ACL_USER_OBJ:
if ((uid_t)requested_tag == *(uid_t *)(acl_get_qualifier(acl_entry))) {
return acl_entry_get_perm(acl_entry);
}
break;
case ACL_GROUP_OBJ:
if ((gid_t)requested_tag == *(gid_t *)(acl_get_qualifier(acl_entry))) {
return acl_entry_get_perm(acl_entry);
}
break;
case ACL_USER:
case ACL_GROUP:
case ACL_OTHER:
return acl_entry_get_perm(acl_entry);
default:
failure("Unexpected ACL tag type");
assert(0);
}
}


}
return -1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name>aclent_t</name> <modifier>*</modifier></type><name>aclent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_test_acl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name> <operator>!=</operator> <call><name>acl_entry_get_perm</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>aclent</name><operator>-&gt;</operator><name>a_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DEF_USER_OBJ</name></expr>:</case>
<case>case <expr><name>USER_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>aclent</name><operator>-&gt;</operator><name>a_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DEF_GROUP_OBJ</name></expr>:</case>
<case>case <expr><name>GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DEF_GROUP</name></expr>:</case>
<case>case <expr><name>GROUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>aclent</name><operator>-&gt;</operator><name>a_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DEF_CLASS_OBJ</name></expr>:</case>
<case>case <expr><name>CLASS_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DEF_OTHER_OBJ</name></expr>:</case>
<case>case <expr><name>OTHER_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>aclent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_test_acl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gid_t</name></type> <name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>tag_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name> <operator>!=</operator> <call><name>acl_entry_get_perm</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tag_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_USER_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_USER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>u</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>g</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_MASK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_OTHER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compare_acls</name><parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>aclp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aclcnt</name></decl></parameter>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><name><name>struct</name> <name>archive_test_acl_t</name></name> <modifier>*</modifier></type><name>myacls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aclent_t</name> <modifier>*</modifier></type><name>acl_entry</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>entry_id</name> <init>= <expr><name>ACL_FIRST_ENTRY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>acl_entry</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>marker</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>aclcnt</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>acl_entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>aclent_t</name> <operator>*</operator><operator>)</operator><name>aclp</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entry_id</name> <operator>=</operator> <name>ACL_NEXT_ENTRY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>matched</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_match</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>marker</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"ACL entry on file that shouldn't be there"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>matched</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">" ACL entry missing from file: "</literal>
<literal type="string">"type=%#010x,permset=%#010x,tag=%d,qual=%d,name=``%s''\n"</literal></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>permset</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>qual</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_platform_posix1e_restore</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_POSIX1E</name></expr></cpp:if>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"POSIX.1e ACLs are not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aclp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aclcnt</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"pretest"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setTestAcl</name><argument_list>(<argument><expr><literal type="string">"pretest"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_TEST_ACL_TYPE_POSIX1E</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"POSIX.1e ACLs are not writable on this filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_disk_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_disk_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>ARCHIVE_EXTRACT_TIME</name> <operator>|</operator> <name>ARCHIVE_EXTRACT_PERM</name> <operator>|</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"test0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>, <argument><expr><literal type="number">7890</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><literal type="string">"test0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"test0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aclp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><literal type="string">"test0"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>acl</name> <operator>!=</operator> <operator>(</operator><name>acl_t</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>, <argument><expr><name>aclcnt</name></expr></argument>, <argument><expr><name>acls2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acls2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>




<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_platform_posix1e_read</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_POSIX1E</name></expr></cpp:if>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"POSIX.1e ACLs are not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>dflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>acl1_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>acl2_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>acl3_text</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aclp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aclcnt</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl1</name></decl>, <decl><type ref="prev"/><name>acl2</name></decl>, <decl><type ref="prev"/><name>acl3</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>acl1_text</name> <operator>=</operator> <literal type="string">"user::rwx,"</literal>
<literal type="string">"group::rwx,"</literal>
<literal type="string">"other:rwx,"</literal>
<literal type="string">"user:1:rw-,"</literal>
<literal type="string">"group:15:r-x,"</literal>
<literal type="string">"mask:rwx"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclent_t</name></type> <name><name>aclp1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>USER</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP</name></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CLASS_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OTHER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl1_text</name> <operator>=</operator> <literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::rwx\n"</literal>
<literal type="string">"other::rwx\n"</literal>
<literal type="string">"user:1:rw-\n"</literal>
<literal type="string">"group:15:r-x\n"</literal>
<literal type="string">"mask::rwx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl1</name> <operator>=</operator> <call><name>acl_from_text</name><argument_list>(<argument><expr><name>acl1_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_from_text(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>acl1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Could not create test file?!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>

<expr_stmt><expr><name>aclp</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aclp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOSYS</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"POSIX.1e ACLs are not supported on this filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"facl(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aclp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"facl()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>facl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SETACL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aclp1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aclp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>aclp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"acl_set_fd()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>acl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOSYS</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTSUP</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOPNOTSUPP</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"POSIX.1e ACLs are not supported on this filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>acl2_text</name> <operator>=</operator> <literal type="string">"user::rwx,"</literal>
<literal type="string">"group::rwx,"</literal>
<literal type="string">"other:---,"</literal>
<literal type="string">"user:1:r--,"</literal>
<literal type="string">"group:15:r--,"</literal>
<literal type="string">"mask:rwx"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclent_t</name></type> <name><name>aclp2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>USER</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>GROUP</name></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CLASS_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>OTHER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl2_text</name> <operator>=</operator> <literal type="string">"user::rwx\n"</literal>
<literal type="string">"group::rwx\n"</literal>
<literal type="string">"other::---\n"</literal>
<literal type="string">"user:1:r--\n"</literal>
<literal type="string">"group:15:r--\n"</literal>
<literal type="string">"mask::rwx"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl2</name> <operator>=</operator> <call><name>acl_from_text</name><argument_list>(<argument><expr><name>acl2_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_from_text(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>acl2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"d/f1"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Could not create test file?!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"facl()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>facl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SETACL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aclp2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>aclp2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>aclp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"acl_set_fd()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>acl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertMakeDir</name><argument_list>(<argument><expr><literal type="string">"d/d2"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>acl3_text</name> <operator>=</operator> <literal type="string">"user::rwx,"</literal>
<literal type="string">"group::r-x,"</literal>
<literal type="string">"other:r-x,"</literal>
<literal type="string">"user:2:r--,"</literal>
<literal type="string">"group:16:-w-,"</literal>
<literal type="string">"mask:rwx,"</literal>
<literal type="string">"default:user::rwx,"</literal>
<literal type="string">"default:user:1:r--,"</literal>
<literal type="string">"default:group::r-x,"</literal>
<literal type="string">"default:group:15:r--,"</literal>
<literal type="string">"default:mask:rwx,"</literal>
<literal type="string">"default:other:r-x"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aclent_t</name></type> <name><name>aclp3</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>USER</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CLASS_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OTHER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>USER_OBJ</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>USER</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP_OBJ</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>GROUP</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CLASS_OBJ</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>OTHER_OBJ</name> <operator>|</operator> <name>ACL_DEFAULT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl3_text</name> <operator>=</operator> <literal type="string">"user::rwx\n"</literal>
<literal type="string">"user:1:r--\n"</literal>
<literal type="string">"group::r-x\n"</literal>
<literal type="string">"group:15:r--\n"</literal>
<literal type="string">"mask::rwx\n"</literal>
<literal type="string">"other::r-x"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl3</name> <operator>=</operator> <call><name>acl_from_text</name><argument_list>(<argument><expr><name>acl3_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_from_text(): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>acl3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"acl()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl</name><argument_list>(<argument><expr><literal type="string">"d/d2"</literal></expr></argument>, <argument><expr><name>SETACL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aclp3</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>aclp3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>aclp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="string">"acl_set_file()"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_set_file</name><argument_list>(<argument><expr><literal type="string">"d/d2"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><name>acl3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"%s: errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_disk_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_disk_open</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS</name></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_POSIX1E</name>
<operator>|</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA</name>
<operator>|</operator> <name>ARCHIVE_ENTRY_ACL_STYLE_SOLARIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dflags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dflags</name> <operator>=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DEFAULT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><name>ARCHIVE_OK</name> <operator>==</operator> <call><name>archive_read_next_header2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_disk_descend</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"./f1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_text</name> <operator>=</operator> <call><name>archive_entry_acl_to_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>, <argument><expr><name>acl1_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"./d/f1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_text</name> <operator>=</operator> <call><name>archive_entry_acl_to_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>, <argument><expr><name>acl2_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"./d/d2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_text</name> <operator>=</operator> <call><name>archive_entry_acl_to_text</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>, <argument><expr><name>acl3_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></block_content></block></function>
</unit>
