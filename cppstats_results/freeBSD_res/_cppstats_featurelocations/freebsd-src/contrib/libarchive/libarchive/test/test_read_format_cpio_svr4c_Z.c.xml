<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_cpio_svr4c_Z.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="char">'!'</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="number">26</literal></expr>,
<expr><literal type="char">'1'</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="char">'q'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'X'</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="char">'k'</literal></expr>,
<expr><literal type="number">192</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="char">'&lt;'</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="char">'.'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">20</literal></expr>,
<expr><literal type="number">248</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">226</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">166</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="number">194</literal></expr>,<expr><literal type="number">164</literal></expr>,
<expr><literal type="number">136</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="char">'H'</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="char">'('</literal></expr>,<expr><literal type="char">']'</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="char">'J'</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="char">'J'</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">170</literal></expr>,
<expr><literal type="number">213</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="char">'X'</literal></expr>,<expr><literal type="number">179</literal></expr>,<expr><literal type="char">'j'</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="number">215</literal></expr>,<expr><literal type="number">175</literal></expr>,<expr><literal type="char">'L'</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_cpio_svr4c_Z</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"archive_filter_name(a, 0)=\"%s\""</literal></expr></argument>,
<argument><expr><call><name>archive_filter_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_COMPRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"archive_format_name(a)=\"%s\""</literal></expr></argument>, <argument><expr><call><name>archive_format_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FORMAT_CPIO_SVR4_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


</unit>
