<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_cpio_bin_xz.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
<expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xdc</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
<expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5a</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_cpio_bin_xz</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_support_filter_xz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"xz reading not fully supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FILTER_XZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_FORMAT_CPIO_BIN_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

</unit>
