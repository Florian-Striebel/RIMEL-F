<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_archive_pathmatch.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBARCHIVE_TEST</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_pathmatch.h"</cpp:file></cpp:include>

















<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_pathmatch</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch_w</name><argument_list>(<argument><expr><literal type="string">L"a/b/c"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="string">"abcd/efgh/ijkl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd*efgh/ijkl"</literal></expr></argument>,<argument><expr><literal type="string">"abcd/efgh/ijkl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd***efgh/ijkl"</literal></expr></argument>,<argument><expr><literal type="string">"abcd/efgh/ijkl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd***/efgh/ijkl"</literal></expr></argument>,<argument><expr><literal type="string">"abcd/efgh/ijkl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a?c"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a?c"</literal></expr></argument>, <argument><expr><literal type="string">"a/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a?*c*"</literal></expr></argument>, <argument><expr><literal type="string">"a/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*a*"</literal></expr></argument>, <argument><expr><literal type="string">"a/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*a*"</literal></expr></argument>, <argument><expr><literal type="string">"/a/c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*a*"</literal></expr></argument>, <argument><expr><literal type="string">"defaaaaaaa"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a*"</literal></expr></argument>, <argument><expr><literal type="string">"defghi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"*a*"</literal></expr></argument>, <argument><expr><literal type="string">"defghi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def"</literal></expr></argument>, <argument><expr><literal type="string">"abc[def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc[def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abce"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abcf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abcg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d*f]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d*f]"</literal></expr></argument>, <argument><expr><literal type="string">"abc*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d*f]"</literal></expr></argument>, <argument><expr><literal type="string">"abcdefghi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d*"</literal></expr></argument>, <argument><expr><literal type="string">"abcdefghi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d*"</literal></expr></argument>, <argument><expr><literal type="string">"abc[defghi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-f]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-f]"</literal></expr></argument>, <argument><expr><literal type="string">"abce"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-f]"</literal></expr></argument>, <argument><expr><literal type="string">"abcf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-f]"</literal></expr></argument>, <argument><expr><literal type="string">"abcg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abca"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abce"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abcf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abcg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abci"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abcj"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abck"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abcl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-k]"</literal></expr></argument>, <argument><expr><literal type="string">"abc-"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcdefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcqefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcdefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcqefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!]efg"</literal></expr></argument>, <argument><expr><literal type="string">"abcefg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-]"</literal></expr></argument>, <argument><expr><literal type="string">"abcl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-]"</literal></expr></argument>, <argument><expr><literal type="string">"abch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-]"</literal></expr></argument>, <argument><expr><literal type="string">"abc-"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-fh-]"</literal></expr></argument>, <argument><expr><literal type="string">"abc-"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\]]"</literal></expr></argument>, <argument><expr><literal type="string">"abc]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\]d]"</literal></expr></argument>, <argument><expr><literal type="string">"abc]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\]d]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\]]"</literal></expr></argument>, <argument><expr><literal type="string">"abc]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\]]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d]e]"</literal></expr></argument>, <argument><expr><literal type="string">"abcde]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\]e]"</literal></expr></argument>, <argument><expr><literal type="string">"abc]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\]e]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd]e"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d]e]"</literal></expr></argument>, <argument><expr><literal type="string">"abc]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\d-f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcegh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\d-f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcggh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\d-f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abc\\gh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d-\\f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcegh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\d-\\f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcegh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[\\d-\\f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcegh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\-f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abcegh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[d\\-f]gh"</literal></expr></argument>, <argument><expr><literal type="string">"abc-gh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!d]"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!d]"</literal></expr></argument>, <argument><expr><literal type="string">"abce"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!d]"</literal></expr></argument>, <argument><expr><literal type="string">"abcc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!d-z]"</literal></expr></argument>, <argument><expr><literal type="string">"abcq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!d-gi-z]"</literal></expr></argument>, <argument><expr><literal type="string">"abch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!fgijkl]"</literal></expr></argument>, <argument><expr><literal type="string">"abch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc[!fghijkl]"</literal></expr></argument>, <argument><expr><literal type="string">"abch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc\\[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc\\d"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc\\[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc\\\\[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc[def]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc\\\\[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc\\[def]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc\\\\[def]"</literal></expr></argument>, <argument><expr><literal type="string">"abc\\d"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd\\"</literal></expr></argument>, <argument><expr><literal type="string">"abcd\\"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd\\"</literal></expr></argument>, <argument><expr><literal type="string">"abcd\\["</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd\\"</literal></expr></argument>, <argument><expr><literal type="string">"abcde"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd\\["</literal></expr></argument>, <argument><expr><literal type="string">"abcd\\"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/"</literal></expr></argument>, <argument><expr><literal type="string">"a/bc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/./b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a\\/./b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/\\./b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/.\\/b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a\\/\\.\\/b"</literal></expr></argument>, <argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def/"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc/def"</literal></expr></argument>, <argument><expr><literal type="string">"./././abc/./def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc/def/././//"</literal></expr></argument>, <argument><expr><literal type="string">"./././abc/./def/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">".////abc/.//def"</literal></expr></argument>, <argument><expr><literal type="string">"./././abc/./def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc?def/"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"\"?./\" is not the same as \"/./\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc?./def/"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Trailing '/' should match no trailing '/'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def/"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Trailing '/./' is still the same directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def/./"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Trailing '/.' is still the same directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def/."</literal></expr></argument>, <argument><expr><literal type="string">"abc/def"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Trailing '/./' is still the same directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc/./def"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/./"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Trailing '/.' is still the same directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"./abc*/./def"</literal></expr></argument>, <argument><expr><literal type="string">"abc/def/."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"bcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"^bcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"^b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"^b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c/d"</literal></expr></argument>, <argument><expr><literal type="string">"/a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"bcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd/"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><literal type="string">"abcd/."</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="string">"abcd"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c/"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c/$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c/$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c/$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"/a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c/d$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c/d$"</literal></expr></argument>, <argument><expr><literal type="string">"/a/b/c/d/e"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"/a/b/c/d$"</literal></expr></argument>, <argument><expr><literal type="string">"/a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"^a/b/c"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"^a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"a/b/c$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>archive_pathmatch</name><argument_list>(<argument><expr><literal type="string">"b/c/d$"</literal></expr></argument>, <argument><expr><literal type="string">"a/b/c/d"</literal></expr></argument>, <argument><expr><name>PATHMATCH_NO_ANCHOR_START</name> <operator>|</operator> <name>PATHMATCH_NO_ANCHOR_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
