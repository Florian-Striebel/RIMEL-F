<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_archive_string_conversion.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBARCHIVE_TEST</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>


















<function><type><specifier>static</specifier> <name>int</name></type>
<name>unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_p</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>_p</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>archive_be16enc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unicode_to_utf16be</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>archive_le16enc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>unicode_to_utf16le</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wc_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unicode_to_wc</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wc_size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>scan_unicode_pattern</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wout</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>u16be</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>u16le</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mac_nfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>uc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>owp</name> <init>= <expr><name>wout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op16be</name> <init>= <expr><name>u16be</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op16le</name> <init>= <expr><name>u16le</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>(</operator><name>uc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>(</operator><name>uc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0x0a</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mac_nfd</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>==</operator> <name>out</name></expr>)</condition> <block>{<block_content>






<switch>switch <condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x2194</literal></expr>:</case> <case>case <expr><literal type="number">0x219A</literal></expr>:</case> <case>case <expr><literal type="number">0x219B</literal></expr>:</case>
<case>case <expr><literal type="number">0x21AE</literal></expr>:</case> <case>case <expr><literal type="number">0x21CD</literal></expr>:</case> <case>case <expr><literal type="number">0x21CE</literal></expr>:</case>
<case>case <expr><literal type="number">0x21CF</literal></expr>:</case> <case>case <expr><literal type="number">0x2204</literal></expr>:</case> <case>case <expr><literal type="number">0x2209</literal></expr>:</case>
<case>case <expr><literal type="number">0x220C</literal></expr>:</case> <case>case <expr><literal type="number">0x2224</literal></expr>:</case> <case>case <expr><literal type="number">0x2226</literal></expr>:</case>
<case>case <expr><literal type="number">0x2241</literal></expr>:</case> <case>case <expr><literal type="number">0x2244</literal></expr>:</case> <case>case <expr><literal type="number">0x2247</literal></expr>:</case>
<case>case <expr><literal type="number">0x2249</literal></expr>:</case> <case>case <expr><literal type="number">0x2260</literal></expr>:</case> <case>case <expr><literal type="number">0x2262</literal></expr>:</case>
<case>case <expr><literal type="number">0x226D</literal></expr>:</case> <case>case <expr><literal type="number">0x226E</literal></expr>:</case> <case>case <expr><literal type="number">0x226F</literal></expr>:</case>
<case>case <expr><literal type="number">0x2270</literal></expr>:</case> <case>case <expr><literal type="number">0x2271</literal></expr>:</case> <case>case <expr><literal type="number">0x2274</literal></expr>:</case>
<case>case <expr><literal type="number">0x2275</literal></expr>:</case> <case>case <expr><literal type="number">0x2276</literal></expr>:</case> <case>case <expr><literal type="number">0x2278</literal></expr>:</case>
<case>case <expr><literal type="number">0x2279</literal></expr>:</case> <case>case <expr><literal type="number">0x227A</literal></expr>:</case> <case>case <expr><literal type="number">0x227B</literal></expr>:</case>
<case>case <expr><literal type="number">0x2280</literal></expr>:</case> <case>case <expr><literal type="number">0x2281</literal></expr>:</case> <case>case <expr><literal type="number">0x2284</literal></expr>:</case>
<case>case <expr><literal type="number">0x2285</literal></expr>:</case> <case>case <expr><literal type="number">0x2288</literal></expr>:</case> <case>case <expr><literal type="number">0x2289</literal></expr>:</case>
<case>case <expr><literal type="number">0x22AC</literal></expr>:</case> <case>case <expr><literal type="number">0x22AD</literal></expr>:</case> <case>case <expr><literal type="number">0x22AE</literal></expr>:</case>
<case>case <expr><literal type="number">0x22AF</literal></expr>:</case> <case>case <expr><literal type="number">0x22E0</literal></expr>:</case> <case>case <expr><literal type="number">0x22E1</literal></expr>:</case>
<case>case <expr><literal type="number">0x22E2</literal></expr>:</case> <case>case <expr><literal type="number">0x22E3</literal></expr>:</case> <case>case <expr><literal type="number">0x22EA</literal></expr>:</case>
<case>case <expr><literal type="number">0x22EB</literal></expr>:</case> <case>case <expr><literal type="number">0x22EC</literal></expr>:</case> <case>case <expr><literal type="number">0x22ED</literal></expr>:</case>










<case>case <expr><literal type="number">0x1109A</literal></expr>:</case> <case>case <expr><literal type="number">0x1109C</literal></expr>:</case> <case>case <expr><literal type="number">0x110AB</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op16be</name> <operator>+=</operator> <call><name>unicode_to_utf16be</name><argument_list>(<argument><expr><name>op16be</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op16le</name> <operator>+=</operator> <call><name>unicode_to_utf16le</name><argument_list>(<argument><expr><name>op16le</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>owp</name> <operator>+=</operator> <call><name>unicode_to_wc</name><argument_list>(<argument><expr><name>owp</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>+=</operator> <call><name>unicode_to_utf8</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>op16be</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>op16be</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>op16le</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>op16le</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>owp</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_wc_unicode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_archive_string_normalization_nfc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>mstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>f_sconv8</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t_sconv8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>f_sconv16be</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f_sconv16le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>locale_is_utf8</name></decl>, <decl><type ref="prev"/><name>wc_is_unicode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sconv_opt</name> <init>= <expr><name>SCONV_SET_OPT_NORMALIZATION_C</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>locale_is_utf8</name> <operator>=</operator> <operator>(</operator><name>NULL</name> <operator>!=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"en_US.UTF-8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wc_is_unicode</name> <operator>=</operator> <call><name>is_wc_unicode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locale_is_utf8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wc_is_unicode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"A test of string normalization for NFC requires "</literal>
<literal type="string">"a suitable locale; en_US.UTF-8 not available on this "</literal>
<literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv8</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv16be</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv16le</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a2</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>t_sconv8</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_sconv8</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>f_sconv16be</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>f_sconv16le</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>t_sconv8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv8</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv16be</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv16le</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>t_sconv8</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf8_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf16be_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf16be_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf16le_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf16le_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wc_nfc</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wc_nfd</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mplen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfc</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfd</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfd</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfd</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>scan_unicode_pattern</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>utf16be_nfc</name></expr></argument>, <argument><expr><name>utf16le_nfc</name></expr></argument>,
<argument><expr><name>nfc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>scan_unicode_pattern</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>wc_nfd</name></expr></argument>, <argument><expr><name>utf16be_nfd</name></expr></argument>, <argument><expr><name>utf16le_nfd</name></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>locale_is_utf8</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFD(%s) should be converted to NFC(%s):%d"</literal></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should not be any changed:%d"</literal></expr></argument>,
<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>t_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should not be any changed:%d"</literal></expr></argument>,
<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strncpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf16be_nfd</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16be</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFD(%s) should be converted to NFC(%s):%d"</literal></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strncpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf16le_nfd</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16le</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFD(%s) should be converted to NFC(%s):%d"</literal></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>locale_is_utf8</name> <operator>||</operator> <name>wc_is_unicode</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-8 NFD(%s) should be converted "</literal>
<literal type="string">"to WCS NFC(%s):%d"</literal></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf16be_nfd</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16be</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-8 NFD(%s) should be converted "</literal>
<literal type="string">"to WCS NFC(%s):%d"</literal></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf16le_nfd</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16le</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-8 NFD(%s) should be converted "</literal>
<literal type="string">"to WCS NFC(%s):%d"</literal></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>wc_nfc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_mbs_l</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mplen</name></expr></argument>, <argument><expr><name>t_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"WCS NFC(%s) should be UTF-8 NFC:%d"</literal></expr></argument>
,<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_archive_string_normalization_mac_nfd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>mstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>f_sconv8</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t_sconv8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>f_sconv16be</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f_sconv16le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>locale_is_utf8</name></decl>, <decl><type ref="prev"/><name>wc_is_unicode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sconv_opt</name> <init>= <expr><name>SCONV_SET_OPT_NORMALIZATION_D</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>locale_is_utf8</name> <operator>=</operator> <operator>(</operator><name>NULL</name> <operator>!=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"en_US.UTF-8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wc_is_unicode</name> <operator>=</operator> <call><name>is_wc_unicode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locale_is_utf8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wc_is_unicode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"A test of string normalization for NFD requires "</literal>
<literal type="string">"a suitable locale; en_US.UTF-8 not available on this "</literal>
<literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv8</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv16be</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f_sconv16le</name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a2</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>t_sconv8</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_sconv8</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>f_sconv16be</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>f_sconv16le</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>t_sconv8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv8</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv16be</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>f_sconv16le</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_conversion_set_opt</name><argument_list>(<argument><expr><name>t_sconv8</name></expr></argument>, <argument><expr><name>sconv_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf8_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf16be_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf16be_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf16le_nfc</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utf16le_nfd</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wc_nfc</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wc_nfd</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_be_nfc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfc</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfd</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfd</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfd</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>should_be_nfc</name> <operator>=</operator> <call><name>scan_unicode_pattern</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>wc_nfc</name></expr></argument>,
<argument><expr><name>utf16be_nfc</name></expr></argument>, <argument><expr><name>utf16le_nfc</name></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>scan_unicode_pattern</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>wc_nfd</name></expr></argument>, <argument><expr><name>utf16be_nfd</name></expr></argument>, <argument><expr><name>utf16le_nfd</name></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>locale_is_utf8</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should not be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFD(%s) should not be any changed:%d"</literal></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strcpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>t_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFD(%s) should not be any changed:%d"</literal></expr></argument>,
<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strncpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf16be_nfc</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16be</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should not be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_strncpy_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>, <argument><expr><name>utf16le_nfc</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16le</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should not be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"NFC(%s) should be converted to"</literal>
<literal type="string">" NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name><name>utf8</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>locale_is_utf8</name> <operator>||</operator> <name>wc_is_unicode</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf8_nfc</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-8 NFC(%s) should not be converted "</literal>
<literal type="string">"to WCS NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-8 NFC(%s) should be converted "</literal>
<literal type="string">"to WCS NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf16be_nfc</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16be</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE NFC(%s) should not be "</literal>
<literal type="string">"converted to WCS NFD(%s):%d"</literal></expr></argument>,
<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE NFC(%s) should be converted "</literal>
<literal type="string">"to WCS NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>utf16le_nfc</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><name>f_sconv16le</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>should_be_nfc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE NFC(%s) should not be "</literal>
<literal type="string">"converted to WCS NFD(%s):%d"</literal></expr></argument>,
<argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfc</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE NFC(%s) should be converted "</literal>
<literal type="string">"to WCS NFD(%s):%d"</literal></expr></argument>, <argument><expr><name>nfc</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wc_nfd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>wc_nfd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_mbs_l</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mplen</name></expr></argument>, <argument><expr><name>t_sconv8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"WCS NFD(%s) should be UTF-8 NFD:%d"</literal></expr></argument>
,<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualUTF8String</name><argument_list>(<argument><expr><name>utf8_nfd</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_archive_string_canonicalization</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"en_US.UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"utf16be"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16LE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF16LE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16LE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sconv</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"utf16le"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-16LE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>mstr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wexp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>mstr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mstr2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_utf8</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_wcs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualWString</name><argument_list>(<argument><expr><name>wexp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_mstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_get_mbs_l</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_mstring_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_archive_string_set_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_mstring</name></name></type> <name>mstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"en_US.UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sc</name> <operator>=</operator>
<call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Charset name should be UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="string">"AAA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"AAA"</literal></expr></argument>, <argument><expr><literal type="string">L"AAA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="string">"BBBB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"BBBB"</literal></expr></argument>, <argument><expr><literal type="string">L"BBBB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="string">L"CCC12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"CCC12"</literal></expr></argument>, <argument><expr><literal type="string">L"CCC12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_copy_mbs_len_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="string">"DDDD-l"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"DDDD-l"</literal></expr></argument>, <argument><expr><literal type="string">L"DDDD-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_mstring_update_utf8</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><literal type="string">"EEEEE---H"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="string">"EEEEE---H"</literal></expr></argument>, <argument><expr><literal type="string">L"EEEEE---H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_archive_string_conversion</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>reffile</name><index>[]</index></name> <init>= <expr><literal type="string">"test_archive_string_conversion.txt.Z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>testdata</name><index>[]</index></name> <init>= <expr><literal type="string">"testdata.txt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><name>reffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_raw</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_open_filename</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>reffile</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>archive_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_archive_string_normalization_nfc</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_archive_string_normalization_mac_nfd</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_archive_string_canonicalization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_archive_string_set_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
