<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_short_writes.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>









<struct>struct <name>checker</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>short_archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shortbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shortbuf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>full_archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fullbuf_len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>short_write_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name> <init>= <expr><name>client_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_write</name> <init>= <expr><ternary><condition><expr><name>length</name> <operator>&lt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name> <operator>+</operator> <name>to_write</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf</name></name> <operator>+</operator> <name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>

<return>return <expr><name>to_write</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>full_write_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name> <init>= <expr><name>client_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>to_write</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf_len</name></name> <operator>+</operator> <name>to_write</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf</name></name> <operator>+</operator> <name><name>checker</name><operator>-&gt;</operator><name>fullbuf_len</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf_len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>

<return>return <expr><name>to_write</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type>
<name>create_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>archive_write_callback</name></type> <name>write_cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffered</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_format_pax</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_add_filter_none</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_open</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>checker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type>
<name>checker_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buffered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name>checker</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>checker</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name> <operator>=</operator> <call><name>create_archive</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>short_write_callback</name></expr></argument>, <argument><expr><name>buffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name> <operator>=</operator> <call><name>create_archive</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>full_write_callback</name></expr></argument>, <argument><expr><name>buffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>checker</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checker_add_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFREG</name> <operator>|</operator> <literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checker_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>short_archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>full_archive</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checker_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name></expr></argument>, <argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf</name></name></expr></argument>, <argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf</name></name></expr></argument>, <argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checker_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>fullbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_short_writes</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>checker</name></name> <modifier>*</modifier></type><name>checker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>test_data</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16384</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>test_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>





<expr_stmt><expr><name>checker</name> <operator>=</operator> <call><name>checker_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_add_file</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>test_data</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_close</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name> <operator>&gt;</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_check</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_free</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>checker</name> <operator>=</operator> <call><name>checker_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_add_file</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>test_data</name></expr></argument>, <argument><expr><literal type="number">21</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_close</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name> <operator>&gt;</operator> <literal type="number">21</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_check</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_free</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>checker</name> <operator>=</operator> <call><name>checker_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_add_file</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>test_data</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_close</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>checker</name><operator>-&gt;</operator><name>shortbuf_len</name></name> <operator>&gt;</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_check</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checker_free</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
