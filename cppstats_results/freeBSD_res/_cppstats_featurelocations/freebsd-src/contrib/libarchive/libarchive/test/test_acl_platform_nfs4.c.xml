<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_acl_platform_nfs4.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_NFS4</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_ACL_H</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ACL_PRIVATE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_RICHACL_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/richacl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MEMBERSHIP_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;membership.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>myacl_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>permset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>myacl_t</name></name></type> <name><name>acls_reg</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>

<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="string">"user108"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="string">"user109"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="string">"user112"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="string">"user113"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="string">"user115"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="string">"user117"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="string">"user119"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="string">"user120"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="string">"user122"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="string">"user123"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="string">"user124"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="string">"user125"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="string">"user126"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="string">"user127"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="string">"user128"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="string">"user135"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="string">"group136"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>acls_reg_cnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acls_reg</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls_reg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>myacl_t</name></name></type> <name><name>acls_dir</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="string">"user101"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="string">"user102"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="string">"user201"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="string">"user202"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="string">"user203"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="string">"user204"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="string">"user205"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="string">"user206"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="string">"user207"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="string">"user208"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="string">"user209"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="string">"user210"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="string">"user211"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="string">"user212"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="string">"user213"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">301</literal></expr>, <expr><literal type="string">"user301"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">302</literal></expr>, <expr><literal type="string">"user302"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">303</literal></expr>, <expr><literal type="string">"user303"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="string">"user304"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACE_INHERITED_ACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">305</literal></expr>, <expr><literal type="string">"user305"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ ARCHIVE_ENTRY_ACL_TYPE_AUDIT,
ARCHIVE_ENTRY_ACL_READ_DATA | ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS,
ARCHIVE_ENTRY_ACL_USER, 401, "user401" },
{ ARCHIVE_ENTRY_ACL_TYPE_AUDIT,
ARCHIVE_ENTRY_ACL_READ_DATA | ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS,
ARCHIVE_ENTRY_ACL_USER, 402, "user402" },
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">501</literal></expr>, <expr><literal type="string">"user501"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">502</literal></expr>, <expr><literal type="string">"group502"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>acls_dir_cnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>acls_dir</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls_dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>acls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_entry_acl_clear</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_add_entry</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name><name>acls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>permset</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>,
<argument><expr><name><name>acls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>qual</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_entry_acl_add_entry</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name><name>acls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>permset</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>,
<argument><expr><name><name>acls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qual</name></expr></argument>, <argument><expr><name><name>acls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<name>acl_permset_to_bitmap</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
acl_permset_to_bitmap<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
acl_permset_to_bitmap<parameter_list>(<parameter><decl><type><name>acl_permset_t</name></type> <name>opaque_ps</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<struct><specifier>static</specifier> struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>portable</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>machine</name></decl>;</decl_stmt> }</block> <decl><name><name>perms</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>ACE_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>, <expr><name>ACE_READ_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><name>ACE_LIST_DIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>, <expr><name>ACE_WRITE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><name>ACE_ADD_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>, <expr><name>ACE_APPEND_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>, <expr><name>ACE_ADD_SUBDIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><name>ACE_READ_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><name>ACE_WRITE_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><name>ACE_DELETE_CHILD</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><name>ACE_READ_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><name>ACE_WRITE_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><name>ACE_DELETE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><name>ACE_READ_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><name>ACE_WRITE_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><name>ACE_WRITE_OWNER</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><name>ACE_SYNCHRONIZE</name></expr>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:elif>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>, <expr><name>ACL_READ_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><name>ACL_LIST_DIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>, <expr><name>ACL_WRITE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><name>ACL_ADD_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>ACL_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><name>ACL_DELETE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>, <expr><name>ACL_APPEND_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>, <expr><name>ACL_ADD_SUBDIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><name>ACL_DELETE_CHILD</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><name>ACL_READ_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><name>ACL_WRITE_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><name>ACL_READ_EXTATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><name>ACL_WRITE_EXTATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><name>ACL_READ_SECURITY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><name>ACL_WRITE_SECURITY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><name>ACL_CHANGE_OWNER</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_ACL_SYNCHRONIZE</name></expr></cpp:if>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><name>ACL_SYNCHRONIZE</name></expr>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>RICHACE_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>, <expr><name>RICHACE_READ_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><name>RICHACE_LIST_DIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>, <expr><name>RICHACE_WRITE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><name>RICHACE_ADD_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>, <expr><name>RICHACE_APPEND_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>, <expr><name>RICHACE_ADD_SUBDIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><name>RICHACE_READ_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><name>RICHACE_WRITE_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><name>RICHACE_DELETE_CHILD</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><name>RICHACE_READ_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><name>RICHACE_WRITE_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><name>RICHACE_DELETE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><name>RICHACE_READ_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><name>RICHACE_WRITE_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><name>RICHACE_WRITE_OWNER</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><name>RICHACE_SYNCHRONIZE</name></expr>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>, <expr><name>ACL_EXECUTE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name></expr>, <expr><name>ACL_READ_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_LIST_DIRECTORY</name></expr>, <expr><name>ACL_LIST_DIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name></expr>, <expr><name>ACL_WRITE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_FILE</name></expr>, <expr><name>ACL_ADD_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name></expr>, <expr><name>ACL_APPEND_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY</name></expr>, <expr><name>ACL_ADD_SUBDIRECTORY</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name></expr>, <expr><name>ACL_READ_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name></expr>, <expr><name>ACL_WRITE_NAMED_ATTRS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE_CHILD</name></expr>, <expr><name>ACL_DELETE_CHILD</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name></expr>, <expr><name>ACL_READ_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name></expr>, <expr><name>ACL_WRITE_ATTRIBUTES</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_DELETE</name></expr>, <expr><name>ACL_DELETE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_READ_ACL</name></expr>, <expr><name>ACL_READ_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name></expr>, <expr><name>ACL_WRITE_ACL</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>, <expr><name>ACL_WRITE_OWNER</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>, <expr><name>ACL_SYNCHRONIZE</name></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>permset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>perms</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>perms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>machine</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>acl_get_perm_np</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>, <argument><expr><name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>machine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>permset</name> <operator>|=</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portable</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>permset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<name>acl_flagset_to_bitmap</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
acl_flagset_to_bitmap<parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
acl_flagset_to_bitmap<parameter_list>(<parameter><decl><type><name>acl_flagset_t</name></type> <name>opaque_fs</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<struct><specifier>static</specifier> struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>portable</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>machine</name></decl>;</decl_stmt> }</block> <decl><name><name>perms</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><name>ACE_FILE_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><name>ACE_DIRECTORY_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><name>ACE_NO_PROPAGATE_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><name>ACE_INHERIT_ONLY_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>, <expr><name>ACE_SUCCESSFUL_ACCESS_ACE_FLAG</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>, <expr><name>ACE_FAILED_ACCESS_ACE_FLAG</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_INHERITED_ACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><name>ACE_INHERITED_ACE</name></expr>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:elif>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><name>ACL_ENTRY_INHERITED</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_FILE_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_LIMIT_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><name>ACL_ENTRY_ONLY_INHERIT</name></expr>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><name>RICHACE_FILE_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><name>RICHACE_DIRECTORY_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><name>RICHACE_NO_PROPAGATE_INHERIT_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><name>RICHACE_INHERIT_ONLY_ACE</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><name>RICHACE_INHERITED_ACE</name></expr>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ENTRY_INHERITED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>, <expr><name>ACL_ENTRY_INHERITED</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_FILE_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT</name></expr>, <expr><name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>, <expr><name>ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>, <expr><name>ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>, <expr><name>ACL_ENTRY_FAILED_ACCESS</name></expr>}</block></expr>,
<expr><block>{<expr><name>ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY</name></expr>, <expr><name>ACL_ENTRY_INHERIT_ONLY</name></expr>}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>flagset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>perms</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>perms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>machine</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>acl_get_flag_np</name><argument_list>(<argument><expr><name>opaque_fs</name></expr></argument>, <argument><expr><name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>machine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>flagset</name> <operator>|=</operator> <name><name>perms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portable</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>flagset</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name>ace_t</name> <modifier>*</modifier></type><name>ace</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>perms</name> <operator>=</operator> <call><name>acl_permset_to_bitmap</name><argument_list>(<argument><expr><name><name>ace</name><operator>-&gt;</operator><name>a_access_mask</name></name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>acl_flagset_to_bitmap</name><argument_list>(<argument><expr><name><name>ace</name><operator>-&gt;</operator><name>a_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>!=</operator> <name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>a_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACE_ACCESS_ALLOWED_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACE_ACCESS_DENIED_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACE_SYSTEM_AUDIT_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACE_SYSTEM_ALARM_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>&amp;</operator> <name>ACE_OWNER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>&amp;</operator> <name>ACE_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>&amp;</operator> <name>ACE_EVERYONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>a_flags</name></name> <operator>&amp;</operator> <name>ACE_IDENTIFIER_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>ace</name><operator>-&gt;</operator><name>a_who</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>ace</name><operator>-&gt;</operator><name>a_who</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>richace</name></name> <modifier>*</modifier></type><name>richace</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>perms</name> <operator>=</operator> <call><name>acl_permset_to_bitmap</name><argument_list>(<argument><expr><name><name>richace</name><operator>-&gt;</operator><name>e_mask</name></name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>acl_flagset_to_bitmap</name><argument_list>(<argument><expr><name><name>richace</name><operator>-&gt;</operator><name>e_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>!=</operator> <name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>richace</name><operator>-&gt;</operator><name>e_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RICHACE_ACCESS_ALLOWED_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RICHACE_ACCESS_DENIED_ACE_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>richace</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>RICHACE_SPECIAL_WHO</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>richace</name><operator>-&gt;</operator><name>e_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RICHACE_OWNER_SPECIAL_ID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RICHACE_GROUP_SPECIAL_ID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RICHACE_EVERYONE_SPECIAL_ID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>richace</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>RICHACE_IDENTIFIER_GROUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>richace</name><operator>-&gt;</operator><name>e_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name><name>richace</name><operator>-&gt;</operator><name>e_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>aclent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>ugid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>idtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>tag_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>opaque_ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>opaque_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>acl_get_permset</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <call><name>acl_permset_to_bitmap</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>acl_flagset_to_bitmap</name><argument_list>(<argument><expr><name>opaque_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>!=</operator> <name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tag_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_EXTENDED_ALLOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_EXTENDED_DENY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbr_uuid_to_id</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ugid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>idtype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ID_TYPE_UID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>ugid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ID_TYPE_GID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>ugid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>acl_match</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>aclent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gid_t</name></type> <name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_type_t</name></type> <name>entry_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>tag_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>opaque_ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>opaque_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_get_entry_type_np</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>acl_get_permset</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perms</name> <operator>=</operator> <call><name>acl_permset_to_bitmap</name><argument_list>(<argument><expr><name>opaque_ps</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>acl_flagset_to_bitmap</name><argument_list>(<argument><expr><name>opaque_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>!=</operator> <name><name>myacl</name><operator>-&gt;</operator><name>permset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>entry_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_ENTRY_TYPE_ALLOW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_DENY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_AUDIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_ENTRY_TYPE_ALARM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>tag_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_USER_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_USER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>u</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP_OBJ</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>aclent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gid_t</name><operator>)</operator><name><name>myacl</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>g</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_MASK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_MASK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ACL_EVERYONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>myacl</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compare_acls</name><parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>aclp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>aclcnt</name></decl></parameter>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<parameter><decl><type><name><name>struct</name> <name>richacl</name></name> <modifier>*</modifier></type><name>richacl</name></decl></parameter>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ace_t</name> <modifier>*</modifier></type><name>acl_entry</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>richace</name></name> <modifier>*</modifier></type><name>acl_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aclcnt</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>entry_id</name> <init>= <expr><name>ACL_FIRST_ENTRY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>acl_entry</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>acl_get_entry_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>acl_get_entry_ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>aclp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>richacl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>aclcnt</name> <operator>=</operator> <name><name>richacl</name><operator>-&gt;</operator><name>a_count</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>marker</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>marker</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name> <operator>||</operator> <name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:if>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>aclcnt</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>acl_get_entry_ret</name> <operator>==</operator> <call><name>acl_get_entry</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_entry</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>acl_entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ace_t</name> <operator>*</operator><operator>)</operator><name>aclp</name><operator>)</operator><index>[<expr><name>e</name></expr>]</index></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><name>acl_entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>richacl</name><operator>-&gt;</operator><name>a_entries</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>entry_id</name> <operator>=</operator> <name>ACL_NEXT_ENTRY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>matched</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_match</name><argument_list>(<argument><expr><name>acl_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>marker</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"ACL entry on file %s that shouldn't be there"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>matched</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">" ACL entry %d missing from %s: "</literal>
<literal type="string">"type=%#010x,permset=%#010x,tag=%d,qual=%d,name=``%s''\n"</literal></expr></argument>,
<argument><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>permset</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>qual</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compare_entry_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>myacl_t</name></name> <modifier>*</modifier></type><name>myacls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>permset</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>qual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>marker</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>marker</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ARCHIVE_OK</name> <operator>==</operator> <call><name>archive_entry_acl_next</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>matched</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tag</name>
<operator>&amp;&amp;</operator> <name>qual</name> <operator>==</operator> <name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>qual</name>
<operator>&amp;&amp;</operator> <name>permset</name> <operator>==</operator> <name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>permset</name>
<operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>marker</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"ACL entry on file that shouldn't be there: "</literal>
<literal type="string">"type=%#010x,permset=%#010x,tag=%d,qual=%d"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>,<argument><expr><name>permset</name></expr></argument>,<argument><expr><name>tag</name></expr></argument>,<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>matched</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">" ACL entry %d missing from %s: "</literal>
<literal type="string">"type=%#010x,permset=%#010x,tag=%d,qual=%d,name=``%s''\n"</literal></expr></argument>,
<argument><expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>permset</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tag</name></expr></argument>, <argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>qual</name></expr></argument>,
<argument><expr><name><name>myacls</name><index>[<expr><name><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_platform_nfs4</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCHIVE_ACL_NFS4</name></expr></cpp:if>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"NFS4 ACLs are not supported on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>regcnt</name> <init>= <expr><name>acls_reg_cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dircnt</name> <init>= <expr><name>acls_dir_cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>regcnt</name> <init>= <expr><name>acls_reg_cnt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dircnt</name> <init>= <expr><name>acls_dir_cnt</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aclp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aclcnt</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>richacl</name></name> <modifier>*</modifier></type><name>richacl</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assertMakeFile</name><argument_list>(<argument><expr><literal type="string">"pretest"</literal></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setTestAcl</name><argument_list>(<argument><expr><literal type="string">"pretest"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_TEST_ACL_TYPE_NFS4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"NFS4 ACLs are not writable on this filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_disk_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_disk_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>ARCHIVE_EXTRACT_TIME</name> <operator>|</operator> <name>ARCHIVE_EXTRACT_PERM</name> <operator>|</operator> <name>ARCHIVE_EXTRACT_ACL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>AE_IFREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_perm</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0654</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>, <argument><expr><literal type="number">7890</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_acls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>acls_reg_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>AE_IFDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_perm</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0654</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>, <argument><expr><literal type="number">7890</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_acls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>acls_dir_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acls_dir_cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"dir%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>AE_IFDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_perm</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0654</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">123456</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">7891</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_acls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>ACE_GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aclp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><name>richacl</name> <operator>=</operator> <call><name>richacl_get_file</name><argument_list>(<argument><expr><literal type="string">"testall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"richacl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>richacl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>acl</name> <operator>!=</operator> <operator>(</operator><name>acl_t</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>, <argument><expr><name>aclcnt</name></expr></argument>, <argument><expr><name>acls_reg</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>, <argument><expr><name>acls_reg</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acls_reg</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dircnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"dir%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><literal type="number">123456</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>ACE_GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aclp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><name>richacl</name> <operator>=</operator> <call><name>richacl_get_file</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>dircnt</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>richacl</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>ENODATA</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"richacl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>richacl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ACL_TYPE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>acl</name> <operator>!=</operator> <operator>(</operator><name>acl_t</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>, <argument><expr><name>aclcnt</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>


<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>stat</name><argument_list>(<argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <call><name>sunacl_get</name><argument_list>(<argument><expr><name>ACE_GETACL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aclcnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aclp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><name>richacl</name> <operator>=</operator> <call><name>richacl_get_file</name><argument_list>(<argument><expr><literal type="string">"dirall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"richacl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>richacl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_DARWIN</name></expr></cpp:if>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_file</name><argument_list>(<argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"acl_get_file(\"%s\"): errno = %d (%s)"</literal></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>acl</name> <operator>!=</operator> <operator>(</operator><name>acl_t</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_ACL_SUNOS_NFS4</name></expr></cpp:if>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>, <argument><expr><name>aclcnt</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dircnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aclp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCHIVE_ACL_LIBRICHACL</name></expr></cpp:elif>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dircnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>richacl_free</name><argument_list>(<argument><expr><name>richacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compare_acls</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dircnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_disk_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_disk_entry_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compare_entry_acls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls_reg</name></expr></argument>, <argument><expr><literal type="string">"testall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>acls_reg_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_disk_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_disk_entry_from_file</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compare_entry_acls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls_dir</name></expr></argument>, <argument><expr><literal type="string">"dirall"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>acls_dir_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
</unit>
