<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_acl_pax.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls0</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"user78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_READ</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><literal type="number">0007</literal></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr>, <expr><name>ARCHIVE_ENTRY_ACL_WRITE</name> <operator>|</operator> <name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_OTHER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls3</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls4</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_INHERITED</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"user78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_DENY</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_test_acl_t</name></name></type> <name><name>acls5</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_EXECUTE</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_OWNER</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_AUDIT</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_USER</name></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="string">"user77"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_WRITE_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_APPEND_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP_OBJ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALARM</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_GROUP</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="string">"group78"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_READ_DATA</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_READ_ACL</name> <operator>|</operator>
<name>ARCHIVE_ENTRY_ACL_SYNCHRONIZE</name></expr>,
<expr><name>ARCHIVE_ENTRY_ACL_EVERYONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_pax_posix1e</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>reference_size</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_format_pax</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_add_filter_none</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls0</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"testout"</literal></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>used</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_acl_pax_posix1e.tar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reference</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reference_size</name></expr></argument>, <argument><expr><literal type="string">"test_acl_pax_posix1e.tar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Generated pax archive does not match reference; compare 'testout' to 'test_acl_pax_posix1e.tar' reference file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>reference</name></expr></argument>, <argument><expr><name>reference_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Generated pax archive does not match reference; compare 'testout' to 'test_acl_pax_posix1e.tar' reference file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>used</name></expr></argument>, <argument><expr><name>reference_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs shouldn't be stored as extended ACLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs should set mode to 0142, not %04o"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0142</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"One extended ACL should flag all ACLs to be returned."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0142</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs should set mode to 0142, not %04o"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0142</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0543</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs should set mode to 0543, not %04o"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0543</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs shouldn't be stored as extended ACLs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Basic ACLs should set mode to 0142, not %04o"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0142</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_acl_pax_nfs4</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>reference_size</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_format_pax</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_add_filter_none</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls3</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls4</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEntrySetAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls5</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls5</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"testout"</literal></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>used</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>extract_reference_file</name><argument_list>(<argument><expr><literal type="string">"test_acl_pax_nfs4.tar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reference</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reference_size</name></expr></argument>, <argument><expr><literal type="string">"test_acl_pax_nfs4.tar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Generated pax archive does not match reference; compare 'testout' to 'test_acl_pax_nfs4.tar' reference file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>reference</name></expr></argument>, <argument><expr><name>reference_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Generated pax archive does not match reference; compare 'testout' to 'test_acl_pax_nfs4.tar' reference file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>used</name></expr></argument>, <argument><expr><name>reference_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls3</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_ALLOW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls4</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>archive_entry_acl_reset</name><argument_list>(<argument><expr><name>ae</name></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEntryCompareAcls</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>acls5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acls5</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>acls5</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ARCHIVE_ENTRY_ACL_TYPE_NFS4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
