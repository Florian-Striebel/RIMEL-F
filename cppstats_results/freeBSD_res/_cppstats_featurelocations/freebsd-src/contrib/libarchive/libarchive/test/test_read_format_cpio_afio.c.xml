<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_format_cpio_afio.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,
<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,
<expr><literal type="char">'1'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,
<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'\n'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,
<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'D'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,
<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,
<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'4'</literal></expr>,<expr><literal type="char">'5'</literal></expr>,<expr><literal type="char">'6'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'8'</literal></expr>,<expr><literal type="char">'9'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'\n'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,
<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'1'</literal></expr>,<expr><literal type="char">'2'</literal></expr>,<expr><literal type="char">'7'</literal></expr>,<expr><literal type="char">'3'</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'L'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,
<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'!'</literal></expr>,<expr><literal type="char">'!'</literal></expr>,<expr><literal type="char">'!'</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>uid_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_format_cpio_afio</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">5120</literal> <operator>-</operator><literal type="number">1</literal> <operator>/</operator> <literal type="number">5120</literal><operator>)</operator> <operator>*</operator> <literal type="number">5120</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_FILTER_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_FORMAT_CPIO_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>uid_size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_entry_is_encrypted</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>archive_read_has_encrypted_entries</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_FILTER_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARCHIVE_FORMAT_CPIO_AFIO_LARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
