<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_read_filter_uudecode.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD: head/lib/libarchive/test/test_read_uu.c 201248 2009-12-30 06:12:03Z kientzle $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>archive</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"begin 644 test_read_uu.Z\n"</literal>
<literal type="string">"M'YV0+@`('$BPH,&amp;#\"!,J7,BP(4(8$&amp;_4J`$\"`,08$F%4O)AQ(\\2/(#7&amp;@#%C\n"</literal>
<literal type="string">"M!@T8-##.L`$\"QL@:-F(``%'#H&lt;V;.'/J!%!G#ITP&lt;BS\"H).FS&lt;Z$1(T&gt;/1A2\n"</literal>
<literal type="string">"IHU\"0%9=*G4JUJM6K6+-JW&lt;JUJ]&gt;O8,.*'4NVK-FS:-.J7&lt;NVK=NW9P$`\n"</literal>
<literal type="string">"`\n"</literal>
<literal type="string">"end\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>archive64</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"begin-base64 644 test_read_uu.Z\n"</literal>
<literal type="string">"H52QLgAIHEiwoMGDCBMqXMiwIUIYEG/UqAECAMQYEmFUvJhxI8SPIDXGgDFjBg0YNDDOsAECxsga\n"</literal>
<literal type="string">"NmIAAFHDoc2bOHPqBFBnDp0wcizCoJOmzc6ERI0ePRhSo1CQFZdKnUq1qtWrWLNq3cq1q9evYMOK\n"</literal>
<literal type="string">"HUu2rNmzaNOqXcu2rdu3ZwE=\n"</literal>
<literal type="string">"====\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>extradata</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"From uudecode@libarchive Mon Jun 2 03:03:31 2008\n"</literal>
<literal type="string">"Return-Path: &lt;uudecode@libarchive&gt;\n"</literal>
<literal type="string">"Received: from libarchive (localhost [127.0.0.1])\n"</literal>
<literal type="string">" by libarchive (8.14.2/8.14.2) with ESMTP id m5233UT1006448\n"</literal>
<literal type="string">" for &lt;uudecode@libarchive&gt;; Mon, 2 Jun 2008 03:03:31 GMT\n"</literal>
<literal type="string">" (envelope-from uudecode@libarchive)\n"</literal>
<literal type="string">"Received: (from uudecode@localhost)\n"</literal>
<literal type="string">" by libarchive (8.14.2/8.14.2/Submit) id m5233U3e006406\n"</literal>
<literal type="string">" for uudecode; Mon, 2 Jun 2008 03:03:30 GMT\n"</literal>
<literal type="string">" (envelope-from root)\n"</literal>
<literal type="string">"Date: Mon, 2 Jun 2008 03:03:30 GMT\n"</literal>
<literal type="string">"From: Libarchive Test &lt;uudecode@libarchive&gt;\n"</literal>
<literal type="string">"Message-Id: &lt;200806020303.m5233U3e006406@libarchive&gt;\n"</literal>
<literal type="string">"To: uudecode@libarchive\n"</literal>
<literal type="string">"Subject: Libarchive uudecode test\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"* Redistribution and use in source and binary forms, with or without\n"</literal>
<literal type="string">"* modification, are permitted provided that the following conditions\n"</literal>
<literal type="string">"* are met:\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"01234567890abcdeghijklmnopqrstuvwxyz\n"</literal>
<literal type="string">"01234567890ABCEFGHIJKLMNOPQRSTUVWXYZ\n"</literal>
<literal type="string">"\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_read_uu_sub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uudata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>uusize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>extradata_no_nl</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extradata_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_nl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extradata_no_nl</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata_ptr</name> <operator>=</operator> <name>extradata_no_nl</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>extradata_no_nl</name></expr>;</init>
<condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>extradata_ptr</name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>uusize</name> <operator>+</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>extra</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>extra</name> <operator>=</operator> <ternary><condition><expr><name>extra</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>extra</name><operator>*</operator><literal type="number">2</literal></expr></else></ternary></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>extra</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>extradata_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>extradata_ptr</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>size</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uudata</name></expr></argument>, <argument><expr><name>uusize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>extra</name> <operator>*</operator> <literal type="number">1024</literal> <operator>+</operator> <name>uusize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"archive_filter_name(a, 0)=\"%s\""</literal>
<literal type="string">"extra %d, NL %d"</literal></expr></argument>,
<argument><expr><call><name>archive_filter_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>!</operator><name>no_nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_code</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ARCHIVE_FILTER_COMPRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"archive_format_name(a)=\"%s\""</literal>
<literal type="string">"extra %d, NL %d"</literal></expr></argument>,
<argument><expr><call><name>archive_format_name</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>!</operator><name>no_nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ARCHIVE_FORMAT_TAR_USTAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>extra</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>extra</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>extra</name> <operator>+</operator> <literal type="number">1024</literal></expr>]</index></name> <operator>=</operator> <name><name>buff</name><index>[<expr><name>extra</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>uudata</name></expr></argument>, <argument><expr><name>uusize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>uusize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>,
<argument><expr><call><name>read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_filter_uudecode</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>test_read_uu_sub</name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_read_uu_sub</name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_read_filter_uudecode_base64</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>test_read_uu_sub</name><argument_list>(<argument><expr><name>archive64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive64</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_read_uu_sub</name><argument_list>(<argument><expr><name>archive64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>archive64</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
