<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_fuzz.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






















<struct>struct <name>files</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>uncompress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_fuzz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>files</name></name> <modifier>*</modifier></type><name>filesets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>blk_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skip_fuzz_tests</name></decl>;</decl_stmt>

<expr_stmt><expr><name>skip_fuzz_tests</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SKIP_TEST_FUZZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip_fuzz_tests</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"Skipping fuzz tests due to SKIP_TEST_FUZZ "</literal>
<literal type="string">"environment variable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>names</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buffsize</name> <init>= <expr><literal type="number">30000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rawimage</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>image</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oldsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extract_reference_files</name><argument_list>(<argument><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>uncompress</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_raw</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_open_filenames</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>names</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"Cannot uncompress fileset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>skipping</name><argument_list>(<argument><expr><literal type="string">"Cannot uncompress %s"</literal></expr></argument>, <argument><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>archive_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rawimage</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_EOF</name></expr></argument>,
<argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Internal buffer is not big enough for "</literal>
<literal type="string">"uncompressed test files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Internal buffer is not big enough for "</literal>
<literal type="string">"uncompressed test file: %s"</literal></expr></argument>, <argument><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;</operator> <name>buffsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newraw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>slurpfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>filesets</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newraw</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>, <argument><expr><name>oldsize</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>assert</name><argument_list>(<argument><expr><name>newraw</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <name>newraw</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rawimage</name> <operator>+</operator> <name>oldsize</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldsize</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>oldsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>image</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawimage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rawimage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>numbytes</name></decl>, <decl><type ref="prev"/><name>trycnt</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>rawimage</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>numbytes</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numbytes</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image</name><index>[<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<for>for <control>(<init><expr><name>trycnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>trycnt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>trycnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"after.test.failure.send.this.file."</literal>
<literal type="string">"to.libarchive.maintainers.with.system.details"</literal></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_data_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>blk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blk_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blk_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_filter_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></while>
<expr_stmt><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rawimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_ar</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_ar.ar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_cab</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_fuzz.cab"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_cpio</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_cpio_bin_be.cpio"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_cpio_bin_le.cpio"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset3</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_cpio_svr4_gzip_rpm.rpm"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_iso9660</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_fuzz_1.iso.Z"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_lzh</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_fuzz.lzh"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_mtree</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_mtree.mtree"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_rar</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_binary_data.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset3</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_compress_best.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset4</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_compress_normal.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset5</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_multi_lzss_blocks.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset6</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_noeof.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset7</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_ppmd_lzss_conversion.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset8</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_subblock.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset9</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test_read_format_rar_unicode.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset10</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_rar_multivolume.part0001.rar"</literal></expr>,
<expr><literal type="string">"test_read_format_rar_multivolume.part0002.rar"</literal></expr>,
<expr><literal type="string">"test_read_format_rar_multivolume.part0003.rar"</literal></expr>,
<expr><literal type="string">"test_read_format_rar_multivolume.part0004.rar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset6</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset7</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset9</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset10</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_tar</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_bzip2_1.tbz"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_gtar_1.tar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset3</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_gzip_1.tgz"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset4</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_gzip_2.tgz"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset5</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_tar_hardlink_1.tar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset6</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_xz_1.txz"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset7</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_gtar_sparse_1_17_posix10_modified.tar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_tar_empty_filename.tar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBLZO2</name> <operator>&amp;&amp;</operator> <name>HAVE_LZO_LZO1X_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LZO_LZOCONF_H</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset9</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_lzop_1.tar.lzo"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZSTD_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBZSTD</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset10</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zstd_1.tar.zst"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset6</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset7</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset8</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBLZO2</name> <operator>&amp;&amp;</operator> <name>HAVE_LZO_LZO1X_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LZO_LZOCONF_H</name></expr></cpp:if>
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset9</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ZSTD_H</name> <operator>&amp;&amp;</operator> <name>HAVE_LIBZSTD</name></expr></cpp:if>
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset10</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_fuzz_zip</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_1.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_2.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset3</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_3.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset4</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_4.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset5</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_5.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset6</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_compat_zip_6.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset7</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_comment_stored_1.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset9</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_comment_stored_2.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset10</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_encryption_data.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset11</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_encryption_header.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset12</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_encryption_partially.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset13</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_cp866.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset14</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_cp932.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset15</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_koi8r.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset16</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_utf8_jp.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset17</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_utf8_ru.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset18</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_filename_utf8_ru2.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset19</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_length_at_end.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset20</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_mac_metadata.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset21</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_malformed1.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset22</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_msdos.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset23</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_nested.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset24</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_nofiletype.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset25</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_padded1.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset26</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_padded2.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset27</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_padded3.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset28</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_symlink.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset29</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_traditional_encryption_data.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset30</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_ux.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset31</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_winzip_aes128.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset32</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_winzip_aes256.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset33</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_winzip_aes256_large.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset34</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_winzip_aes256_stored.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset35</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_zip64a.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fileset36</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"test_read_format_zip_zip64b.zip"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>files</name></name></type> <name><name>filesets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset6</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset7</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset9</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset10</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset11</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset12</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset13</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset14</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset15</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset16</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset17</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset18</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset19</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset20</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset21</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset22</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset23</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset24</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset25</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset26</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset27</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset28</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset29</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset30</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset31</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset32</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset33</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset34</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset35</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fileset36</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_fuzz</name><argument_list>(<argument><expr><name>filesets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

</unit>
