<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_write_format_zip_large.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>









<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>nullsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>nulldata</name></decl>;</decl_stmt>

<struct>struct <name>fileblock</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gap_size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fileblocks</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>fileposition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gap_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB</name></cpp:macro> <cpp:value>((int64_t)1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB</name></cpp:macro> <cpp:value>((int64_t)1024 * KB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB</name></cpp:macro> <cpp:value>((int64_t)1024 * MB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TB</name></cpp:macro> <cpp:value>((int64_t)1024 * GB)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>memory_read_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>memory_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>memory_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>le16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>_p</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>le32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>_p</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>le16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>le16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>le64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>_p</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>le32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>memory_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name>_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>nulldata</name> <operator>&lt;=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name>
<operator>&amp;&amp;</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>nulldata</name> <operator>+</operator> <name>nullsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>gap_size</name></name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator>struct <name>fileblock</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>filesize</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>memory_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_private</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name>_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>private</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>nullsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>-=</operator> <name>nullsize</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>nulldata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>+=</operator> <name>nullsize</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>nullsize</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>nulldata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n\nInternal failure\n\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>memory_read_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name>_private</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>memory_read_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_private</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name>_private</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>filesize</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n\nInternal failure: negative seek\n\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>buff</name></name>
<operator>+</operator> <name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name> <operator>&gt;</operator> <name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>gap_remaining</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name>
<operator>-</operator> <operator>(</operator><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>gap_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name> <operator>==</operator> <name><name>private</name><operator>-&gt;</operator><name>filesize</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n\nInternal failure: over-sized seek\n\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>memory_read_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_private</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name>_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>old_position</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>fileposition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>new_position</name> <init>= <expr><call><name>memory_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>_private</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>new_position</name> <operator>-</operator> <name>old_position</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type>
<name>fileblocks_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>fileblocks</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fileblocks</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fileblocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fileblocks</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fileblocks_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>fileblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>fileblocks</name><operator>-&gt;</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblock</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>fileblocks</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fileblocks</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>fileblocks</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name><name>test_sizes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal> <operator>*</operator> <name>GB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">2</literal> <operator>*</operator> <name>GB</name></expr>, <expr><literal type="number">2</literal> <operator>*</operator> <name>GB</name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><literal type="number">4</literal> <operator>*</operator> <name>GB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">4</literal> <operator>*</operator> <name>GB</name></expr>, <expr><literal type="number">4</literal> <operator>*</operator> <name>GB</name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><literal type="number">16</literal> <operator>*</operator> <name>GB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">16</literal> <operator>*</operator> <name>GB</name></expr>, <expr><literal type="number">16</literal> <operator>*</operator> <name>GB</name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><literal type="number">64</literal> <operator>*</operator> <name>GB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">64</literal> <operator>*</operator> <name>GB</name></expr>, <expr><literal type="number">64</literal> <operator>*</operator> <name>GB</name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><literal type="number">256</literal> <operator>*</operator> <name>GB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">256</literal> <operator>*</operator> <name>GB</name></expr>, <expr><literal type="number">256</literal> <operator>*</operator> <name>GB</name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal> <operator>*</operator> <name>TB</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>verify_large_zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>fileblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"zip:ignorecrc32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_open_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>memory_read_open</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_read_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>memory_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_skip_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>memory_read_skip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_seek_callback</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>memory_read_seek</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_set_callback_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_open1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>, <argument><expr><literal type="string">"file_%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>archive_entry_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><literal type="string">"lastfile"</literal></expr></argument>, <argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_EOF</name></expr></argument>, <argument><expr><call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_write_format_zip_large</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fileblocks</name></name> <modifier>*</modifier></type><name>fileblocks</name> <init>= <expr><call><name>fileblocks_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cd_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zip64_eocd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zip64_locator</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eocd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cd_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>writesize</name></decl>, <decl><type ref="prev"/><name>buffsize</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nullsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>*</operator> <name>MB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nulldata</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nullsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulldata</name></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><name>nullsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_write_set_format_zip</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"zip:compression=store"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_options</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"zip:fakecrc32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_open</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>memory_write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>, <argument><expr><literal type="string">"file_%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filesize</name> <operator>=</operator> <name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>filesize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>writesize</name> <operator>=</operator> <name>nullsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>writesize</name> <operator>&gt;</operator> <name>filesize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>writesize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>filesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>writesize</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nulldata</name></expr></argument>, <argument><expr><name>writesize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filesize</name> <operator>-=</operator> <name>writesize</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="string">"lastfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertA</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_zip_seekable</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_large_zip</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_read_support_format_zip_streamable</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_large_zip</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINAL_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>FINAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memory_read_open</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memory_read_seek</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>, <argument><expr><operator>-</operator><name>FINAL_SIZE</name></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>memory_read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileblocks</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>buffsize</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffsize</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>buffsize</name></expr></argument>, <argument><expr><name>FINAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <name>buffsize</name></expr>;</expr_stmt>


<expr_stmt><expr><name>eocd</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>eocd</name></expr></argument>, <argument><expr><literal type="string">"PK\005\006\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>eocd</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"\021\0\021\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cd_size</name> <operator>=</operator> <call><name>le32</name><argument_list>(<argument><expr><name>eocd</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>eocd</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"\xff\xff\xff\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>eocd</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"\0\0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>zip64_locator</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">42</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_locator</name></expr></argument>, <argument><expr><literal type="string">"PK\006\007\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zip64_eocd</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name><name>fileblocks</name><operator>-&gt;</operator><name>filesize</name></name> <operator>-</operator> <call><name>le64</name><argument_list>(<argument><expr><name>zip64_locator</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_locator</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"\001\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>==</operator> <name>p</name> <operator>-</operator> <literal type="number">98</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_eocd</name></expr></argument>, <argument><expr><literal type="string">"PK\006\006"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"\055\0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"\055\0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cd_size</name> <operator>=</operator> <call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cd_start</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name><name>fileblocks</name><operator>-&gt;</operator><name>filesize</name></name> <operator>-</operator> <call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cd_start</name> <operator>+</operator> <name>cd_size</name> <operator>==</operator> <name>zip64_eocd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>le64</name><argument_list>(<argument><expr><name>zip64_eocd</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call>
<operator>+</operator> <name>cd_size</name>
<operator>+</operator> <literal type="number">56</literal>
<operator>+</operator> <literal type="number">20</literal>
<operator>+</operator> <literal type="number">22</literal></expr></argument>,
<argument><expr><name><name>fileblocks</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assertEqualMem</name><argument_list>(<argument><expr><name>cd_start</name></expr></argument>, <argument><expr><literal type="string">"PK\001\002"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fileblocks_free</name><argument_list>(<argument><expr><name>fileblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nulldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
