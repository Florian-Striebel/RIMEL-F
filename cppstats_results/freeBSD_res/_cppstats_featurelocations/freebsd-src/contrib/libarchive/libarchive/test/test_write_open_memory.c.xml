<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/test/test_write_open_memory.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<macro><name>DEFINE_TEST</name><argument_list>(<argument>test_write_open_memory</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>ae</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name><init>=<expr><literal type="string">"/tmp/test"</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ae</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>S_IFREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualString</name><argument_list>(<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">100</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1600</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blocksize</name> <init>= <expr><literal type="number">94</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_format_ustar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_bytes_in_last_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_set_bytes_per_block</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xAE</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_open_memory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">511</literal><operator>/</operator><name>blocksize</name><operator>)</operator><operator>*</operator><name>blocksize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>,
<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>,
<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"buffer size=%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">1536</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>,
<argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>assertEqualIntA</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name>ARCHIVE_OK</name></expr></argument>, <argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assertEqualInt</name><argument_list>(<argument><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>used</name> <operator>&lt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
