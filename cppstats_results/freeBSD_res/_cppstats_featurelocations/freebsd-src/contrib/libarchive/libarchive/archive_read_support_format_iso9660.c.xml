<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_iso9660.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICAL_BLOCK_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_AREA_BLOCK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_offset</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_id_offset</name></cpp:macro> <cpp:value>(PVD_type_offset + PVD_type_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_id_size</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_version_offset</name></cpp:macro> <cpp:value>(PVD_id_offset + PVD_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_version_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved1_offset</name></cpp:macro> <cpp:value>(PVD_version_offset + PVD_version_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved1_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_system_id_offset</name></cpp:macro> <cpp:value>(PVD_reserved1_offset + PVD_reserved1_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_system_id_size</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_id_offset</name></cpp:macro> <cpp:value>(PVD_system_id_offset + PVD_system_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_id_size</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved2_offset</name></cpp:macro> <cpp:value>(PVD_volume_id_offset + PVD_volume_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved2_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_space_size_offset</name></cpp:macro> <cpp:value>(PVD_reserved2_offset + PVD_reserved2_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_space_size_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved3_offset</name></cpp:macro> <cpp:value>(PVD_volume_space_size_offset + PVD_volume_space_size_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved3_size</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_set_size_offset</name></cpp:macro> <cpp:value>(PVD_reserved3_offset + PVD_reserved3_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_set_size_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_sequence_number_offset</name></cpp:macro> <cpp:value>(PVD_volume_set_size_offset + PVD_volume_set_size_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_sequence_number_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_logical_block_size_offset</name></cpp:macro> <cpp:value>(PVD_volume_sequence_number_offset + PVD_volume_sequence_number_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_logical_block_size_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_path_table_size_offset</name></cpp:macro> <cpp:value>(PVD_logical_block_size_offset + PVD_logical_block_size_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_path_table_size_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_1_path_table_offset</name></cpp:macro> <cpp:value>(PVD_path_table_size_offset + PVD_path_table_size_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_1_path_table_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_opt_type_1_path_table_offset</name></cpp:macro> <cpp:value>(PVD_type_1_path_table_offset + PVD_type_1_path_table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_opt_type_1_path_table_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_m_path_table_offset</name></cpp:macro> <cpp:value>(PVD_opt_type_1_path_table_offset + PVD_opt_type_1_path_table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_type_m_path_table_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_opt_type_m_path_table_offset</name></cpp:macro> <cpp:value>(PVD_type_m_path_table_offset + PVD_type_m_path_table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_opt_type_m_path_table_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_root_directory_record_offset</name></cpp:macro> <cpp:value>(PVD_opt_type_m_path_table_offset + PVD_opt_type_m_path_table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_root_directory_record_size</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_set_id_offset</name></cpp:macro> <cpp:value>(PVD_root_directory_record_offset + PVD_root_directory_record_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_volume_set_id_size</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_publisher_id_offset</name></cpp:macro> <cpp:value>(PVD_volume_set_id_offset + PVD_volume_set_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_publisher_id_size</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_preparer_id_offset</name></cpp:macro> <cpp:value>(PVD_publisher_id_offset + PVD_publisher_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_preparer_id_size</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_application_id_offset</name></cpp:macro> <cpp:value>(PVD_preparer_id_offset + PVD_preparer_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_application_id_size</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_copyright_file_id_offset</name></cpp:macro> <cpp:value>(PVD_application_id_offset + PVD_application_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_copyright_file_id_size</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_abstract_file_id_offset</name></cpp:macro> <cpp:value>(PVD_copyright_file_id_offset + PVD_copyright_file_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_abstract_file_id_size</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_bibliographic_file_id_offset</name></cpp:macro> <cpp:value>(PVD_abstract_file_id_offset + PVD_abstract_file_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_bibliographic_file_id_size</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_creation_date_offset</name></cpp:macro> <cpp:value>(PVD_bibliographic_file_id_offset + PVD_bibliographic_file_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_creation_date_size</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_modification_date_offset</name></cpp:macro> <cpp:value>(PVD_creation_date_offset + PVD_creation_date_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_modification_date_size</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_expiration_date_offset</name></cpp:macro> <cpp:value>(PVD_modification_date_offset + PVD_modification_date_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_expiration_date_size</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_effective_date_offset</name></cpp:macro> <cpp:value>(PVD_expiration_date_offset + PVD_expiration_date_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_effective_date_size</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_file_structure_version_offset</name></cpp:macro> <cpp:value>(PVD_effective_date_offset + PVD_effective_date_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_file_structure_version_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved4_offset</name></cpp:macro> <cpp:value>(PVD_file_structure_version_offset + PVD_file_structure_version_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved4_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_application_data_offset</name></cpp:macro> <cpp:value>(PVD_reserved4_offset + PVD_reserved4_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_application_data_size</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved5_offset</name></cpp:macro> <cpp:value>(PVD_application_data_offset + PVD_application_data_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PVD_reserved5_size</name></cpp:macro> <cpp:value>(2048 - PVD_reserved5_offset)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PVD_reserved5_offset</name> <operator>!=</operator> <literal type="number">1395</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> PVD offset and size definitions are wrong.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_type_offset</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_type_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_id_offset</name></cpp:macro> <cpp:value>(SVD_type_offset + SVD_type_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_id_size</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_version_offset</name></cpp:macro> <cpp:value>(SVD_id_offset + SVD_id_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_version_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved1_offset</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved1_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_volume_space_size_offset</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_volume_space_size_size</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_escape_sequences_offset</name></cpp:macro> <cpp:value>(SVD_volume_space_size_offset + SVD_volume_space_size_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_escape_sequences_size</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_logical_block_size_offset</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_logical_block_size_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_type_L_path_table_offset</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_type_M_path_table_offset</name></cpp:macro> <cpp:value>148</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_root_directory_record_offset</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_root_directory_record_size</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_file_structure_version_offset</name></cpp:macro> <cpp:value>881</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved2_offset</name></cpp:macro> <cpp:value>882</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved2_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved3_offset</name></cpp:macro> <cpp:value>1395</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVD_reserved3_size</name></cpp:macro> <cpp:value>653</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_length_offset</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_length_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_ext_attr_length_offset</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_ext_attr_length_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_extent_offset</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_extent_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_size_offset</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_size_size</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_date_offset</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_date_size</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_flags_offset</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_flags_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_file_unit_size_offset</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_file_unit_size_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_interleave_offset</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_interleave_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_volume_sequence_number_offset</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_volume_sequence_number_size</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_name_len_offset</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_name_len_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_name_offset</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zisofs_magic</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x07</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>zisofs</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pz_log2_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pz_uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uncompressed_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pz_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>header_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_passed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_pointers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_pointers_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>zisofs</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pz</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>content</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>file_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>use_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>re_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subdirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ce_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ce_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>rr_moved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>rr_moved_has_re_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>re_descendant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cl_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>birthtime_is_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>birthtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlinks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf16be_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16be_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>name_continues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>symlink_continues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pz_log2_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pz_uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multi_extent</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>contents</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>rede_files</name></decl>;</struct>
}</block>;</struct>

<struct>struct <name>heap_queue</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>iso9660</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO9660_MAGIC</name></cpp:macro> <cpp:value>0x96609660</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>opt_support_joliet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_support_rockridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>seenRockridge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>seenSUSP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>seenJoliet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>suspOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>rr_moved</name></decl>;</decl_stmt>
<struct>struct <name>read_ce_queue</name> <block>{
<struct>struct <name>read_ce_req</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>reqs</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt>
}</block> <decl><name>read_ce_req</name></decl>;</struct>

<decl_stmt><decl><type><name>int64_t</name></type> <name>previous_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>previous_pathname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>use_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>heap_queue</name></name></type> <name>pending_files</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>cache_files</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>re_files</name></decl>;</struct>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>current_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>logical_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>volume_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>volume_block</name></decl>;</decl_stmt>

<struct>struct <name>vd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block> <decl><name>primary</name></decl>, <decl><type ref="prev"/><name>joliet</name></decl>;</struct>

<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_sparse_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_bytes_unconsumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zisofs</name></name></type> <name>entry_zisofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>entry_content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_utf16be</name></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF16_NAME_MAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf16be_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16be_path_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf16be_previous_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16be_previous_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>null</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_iso9660_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>build_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>build_pathname_utf16be</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_isodirrec</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>isodirrec</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>time_from_tm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>isodate17</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>isodate7</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isBootRecord</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isVolumePartition</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isVDSetTerminator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isJolietSVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isSVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isEVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isPVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>next_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>next_entry_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>parse_file_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>isodirrec</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>reclen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_rockridge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>register_CE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_CE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_rockridge_NM1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_rockridge_SL1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_rockridge_TF1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_rockridge_ZF1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>register_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>release_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>toi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>re_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type> <name>re_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rede_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type> <name>rede_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cache_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>cache_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>heap_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>heap_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_entry</name><parameter_list>(<parameter><type><name>arch</name></type></parameter>, <parameter><type><name>iso9660</name></type></parameter>, <parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_add_entry(arch, &amp;((iso9660)-&gt;pending_files), file, file-&gt;offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>next_entry</name><parameter_list>(<parameter><type><name>iso9660</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_get_entry(&amp;((iso9660)-&gt;pending_files))</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>archive_read_support_format_iso9660</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_format_iso9660"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iso9660</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iso9660</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate iso9660 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>ISO9660_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_joliet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_rockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>iso9660</name></expr></argument>,
<argument><expr><literal type="string">"iso9660"</literal></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_bid</name></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_options</name></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_read_header</name></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_read_data</name></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_read_data_skip</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>archive_read_format_iso9660_cleanup</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seenTerminator</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>best_bid</name> <operator>&gt;</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESERVED_AREA</name></cpp:macro> <cpp:value>(SYSTEM_AREA_BLOCK * LOGICAL_BLOCK_SIZE)</cpp:value></cpp:define>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>RESERVED_AREA</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>LOGICAL_BLOCK_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bytes_read</name> <operator>-=</operator> <name>RESERVED_AREA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>RESERVED_AREA</name></expr>;</expr_stmt>


<expr_stmt><expr><name>seenTerminator</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>bytes_read</name> <operator>&gt;</operator> <name>LOGICAL_BLOCK_SIZE</name></expr>;</condition>
<incr><expr><name>bytes_read</name> <operator>-=</operator> <name>LOGICAL_BLOCK_SIZE</name></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <name>LOGICAL_BLOCK_SIZE</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CD001"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isPVD</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>location</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isJolietSVD</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isBootRecord</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isEVD</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isSVD</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isVolumePartition</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isVDSetTerminator</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seenTerminator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>seenTerminator</name> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>location</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"joliet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_joliet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_joliet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"rockridge"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Rockridge"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_rockridge</name></name> <operator>=</operator> <name>val</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isNull</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>bytes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>null</name></name></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isBootRecord</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>iso9660</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isVolumePartition</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&lt;=</operator> <name>SYSTEM_AREA_BLOCK</name> <operator>||</operator>
<name>location</name> <operator>&gt;=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>volume_block</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>location</name> <operator>!=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <literal type="number">76</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isVDSetTerminator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>iso9660</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2048</literal><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isJolietSVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>logical_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>volume_block</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSVD</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>SVD_escape_sequences_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>logical_block_size</name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>SVD_logical_block_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>volume_block</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>SVD_volume_space_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>=</operator> <name>logical_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_block</name></name> <operator>=</operator> <name>volume_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_size</name></name> <operator>=</operator> <name>logical_block_size</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>volume_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>SVD_root_directory_record_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>location</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>DR_extent_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>DR_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isSVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>logical_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>volume_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>iso9660</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>SVD_type_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SVD_reserved1_offset</name></expr></argument>, <argument><expr><name>SVD_reserved1_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SVD_reserved2_offset</name></expr></argument>, <argument><expr><name>SVD_reserved2_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SVD_reserved3_offset</name></expr></argument>, <argument><expr><name>SVD_reserved3_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>SVD_file_structure_version_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>logical_block_size</name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>SVD_logical_block_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>logical_block_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>volume_block</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>SVD_volume_space_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>volume_block</name> <operator>&lt;=</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>SVD_type_L_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal> <operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>SVD_type_M_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>location</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal><operator>)</operator>
<operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>SVD_root_directory_record_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>DR_length_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isEVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>logical_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>volume_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>iso9660</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_type_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_version_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_reserved1_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved2_offset</name></expr></argument>, <argument><expr><name>PVD_reserved2_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved3_offset</name></expr></argument>, <argument><expr><name>PVD_reserved3_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>logical_block_size</name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>PVD_logical_block_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>logical_block_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>volume_block</name> <operator>=</operator>
<call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>PVD_volume_space_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>volume_block</name> <operator>&lt;=</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_file_structure_version_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>PVD_type_1_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal> <operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>PVD_type_m_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>location</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal><operator>)</operator>
<operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved4_offset</name></expr></argument>, <argument><expr><name>PVD_reserved4_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved5_offset</name></expr></argument>, <argument><expr><name>PVD_reserved5_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>PVD_root_directory_record_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>DR_length_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isPVD</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>logical_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>volume_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_type_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_version_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_reserved1_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved2_offset</name></expr></argument>, <argument><expr><name>PVD_reserved2_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved3_offset</name></expr></argument>, <argument><expr><name>PVD_reserved3_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>logical_block_size</name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>PVD_logical_block_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>logical_block_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>volume_block</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name> <operator>+</operator> <name>PVD_volume_space_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>volume_block</name> <operator>&lt;=</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_file_structure_version_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>PVD_type_1_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal> <operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_be32dec</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>PVD_type_m_path_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>location</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <name>SYSTEM_AREA_BLOCK</name><operator>+</operator><literal type="number">2</literal><operator>)</operator>
<operator>||</operator> <name>location</name> <operator>&gt;=</operator> <name>volume_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PVD_reserved4_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>PVD_reserved4_offset</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>h</name><index>[<expr><name>PVD_reserved4_offset</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNull</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>PVD_reserved5_offset</name></expr></argument>, <argument><expr><name>PVD_reserved5_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>PVD_root_directory_record_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>DR_length_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>location</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>=</operator> <name>logical_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_block</name></name> <operator>=</operator> <name>volume_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>volume_size</name></name> <operator>=</operator>
<name>logical_block_size</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>volume_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>location</name></name> <operator>=</operator>
<call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>DR_extent_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>DR_size_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_children</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>multi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>skip_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>&gt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Ignoring out-of-order directory (%s) %jd &gt; %jd"</literal></expr></argument>,
<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>parent</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>parent</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>volume_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Directory is beyond end-of-media: %s"</literal></expr></argument>,
<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skipsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skipsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>skipsize</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name><operator>)</operator> <operator>*</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read full block when scanning "</literal>
<literal type="string">"ISO9660 directory list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>multi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_size</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>-=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <operator>*</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>DR_name_len_offset</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>DR_name_offset</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>DR_name_len_offset</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>DR_name_offset</name><operator>)</operator> <operator>==</operator> <literal type="char">'\001'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>parse_file_info</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>cl_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>multi_extent</name></name> <operator>||</operator> <name>multi</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>multi</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>multi</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>multi</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>multi</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>last</name></name> <operator>=</operator>
<operator>&amp;</operator><operator>(</operator><name><name>multi</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>content</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for multi extent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>multi</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>multi</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>multi</name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>multi</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>child</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>child</name><operator>-&gt;</operator><name>multi_extent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>multi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><call><name>add_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>read_CE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>choose_volume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skipsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vd</name></name> <modifier>*</modifier></type><name>vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>seenJoliet</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_joliet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>&amp;&amp;</operator>
<name><name>vd</name><operator>-&gt;</operator><name>location</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name><operator>.</operator><name>location</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>vd</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skipsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>skipsize</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <name>skipsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read full block when scanning "</literal>
<literal type="string">"ISO9660 directory list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>seenJoliet</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>parse_file_info</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <name>seenJoliet</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>vd</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name>
<operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vd</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>primary</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name>
<operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>joliet</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <name>LOGICAL_BLOCK_SIZE</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>vd</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipsize</name> <operator>-=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipsize</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skipsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>skipsize</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>+=</operator> <name>skipsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read full block when scanning "</literal>
<literal type="string">"ISO9660 directory list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>parse_file_info</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name> <operator>=</operator> <name>seenJoliet</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>add_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_ISO9660_ROCKRIDGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator>
<literal type="string">"ISO9660 with Rockridge extensions"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>rd_r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_ISO9660</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"ISO9660"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>choose_volume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>next_entry_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>UTF16_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>UTF16_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>build_pathname_utf16be</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name></expr></argument>,
<argument><expr><name>UTF16_NAME_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path_len</name></name><operator>)</operator></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_entry_copy_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path_len</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for Pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname cannot be converted "</literal>
<literal type="string">"from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rd_r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>build_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>volume_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"File is beyond end-of-media: %s"</literal></expr></argument>,
<argument><expr><call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>nlinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>birthtime_is_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_birthtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>birthtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_unset_birthtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_entry_set_rdev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>(</operator><name>dev_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_copy_symlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>previous_number</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_entry_copy_hardlink_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path_len</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for Linkname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Linkname cannot be converted "</literal>
<literal type="string">"from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>sconv_utf16be</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rd_r</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_hardlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>previous_pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_entry_unset_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rd_r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>AE_IFDIR</name> <operator>&amp;&amp;</operator>
<name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>r64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r64</name> <operator>=</operator> <call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r64</name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Ignoring out-of-order file @%jx (%s) %jd &lt; %jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>number</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>r64</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>pz</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pz</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pz</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>zisofs</name></name> <modifier>*</modifier></type><name>zisofs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zisofs</name> <operator>=</operator> <operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pz_log2_bs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>previous_number</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path_len</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>previous_pathname</name></name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>archive_entry_set_nlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>subdirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rd_r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rd_r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zisofs</name></name> <modifier>*</modifier></type><name>zisofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>zisofs</name> <operator>=</operator> <operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated zisofs file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uncompressed_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ceil</name></decl>, <decl><type ref="prev"/><name>xsize</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ceil</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>zisofs</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <operator>(</operator><name>ceil</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_alloc</name></name> <operator>&lt;</operator> <name>xsize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>alloc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>xsize</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for zisofs decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_alloc</name></name> <operator>=</operator> <name>alloc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name> <operator>=</operator> <name>xsize</name></expr>;</expr_stmt>


<expr_stmt><expr><name>xsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>&lt;</operator> <name>xsize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for zisofs decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <name>xsize</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name>xsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name> <operator>+=</operator> <name>xsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name>xsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>xsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>&amp;&amp;</operator>
<name><name>zisofs</name><operator>-&gt;</operator><name>header_avail</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>zisofs_magic</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zisofs_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_log2_bs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>header_passed</name></name> <operator>&amp;&amp;</operator>
<name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name> <operator>&lt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name>
<operator>-</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name>xsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name>
<operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name> <operator>+=</operator> <name>xsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name>xsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>xsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_avail</name></name>
<operator>==</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zisofs</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_data</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bst</name></decl>, <decl><type ref="prev"/><name>bed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bst</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(
<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bst</name> <operator>!=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>+</operator> <operator>(</operator><name>bytes_read</name> <operator>-</operator> <name>avail</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers(cannot seek)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(
<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_pointers</name></name> <operator>+</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bed</name> <operator>&lt;</operator> <name>bst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Illegal zisofs block pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>=</operator> <name>bed</name> <operator>-</operator> <name>bst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_off</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Can't initialize zisofs decompression."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uncompressed_size</name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>avail</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator>
<operator>(</operator><name>uInt</name><operator>)</operator><name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"zisofs decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>uncompressed_size</name> <operator>=</operator>
<name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>-</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>block_avail</name></name> <operator>-=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>zisofs</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>next_data</name>:</label>
<expr_stmt><expr><name>bytes_read</name> <operator>-=</operator> <name>avail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name><name>zisofs</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name> <operator>+=</operator> <name>uncompressed_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zisofs</name><operator>-&gt;</operator><name>pz_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>zisofs_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"zisofs is not supported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>step</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Ignoring out-of-order file (%s) %jd &lt; %jd"</literal></expr></argument>,
<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_content</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>pz</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>zisofs_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Truncated input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_sparse_offset</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name> <operator>=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_iso9660_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_files</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>read_ce_req</name><operator>.</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>previous_pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>pending_files</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>uncompressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>block_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>stream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iso9660</name><operator>-&gt;</operator><name>entry_zisofs</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up zlib decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>utf16be_previous_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>parse_file_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>isodirrec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>reclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rr_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fsize</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reclen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dr_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>isodirrec</name><index>[<expr><name>DR_length_offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>reclen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reclen</name> <operator>&lt;</operator> <name>dr_len</name> <operator>||</operator> <name>dr_len</name> <operator>&lt;</operator> <literal type="number">34</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid length of directory record"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>isodirrec</name><index>[<expr><name>DR_name_len_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_extent_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_size_offset</name></expr></argument>, <argument><expr><name>DR_size_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dr_len</name> <operator>-</operator> <literal type="number">33</literal> <operator>&lt;</operator> <name>name_len</name> <operator>||</operator> <name>name_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid length of file identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>location</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>fsize</name> <operator>+</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>/</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name><operator>)</operator><operator>)</operator>
<operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>volume_block</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid location of extent of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid location of extent of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>location</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>filep</name> <operator>=</operator> <name>parent</name></expr>;</init> <condition><expr><name>filep</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>filep</name> <operator>=</operator> <name><name>filep</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>filep</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Directory structure contains loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator>struct <name>file_info</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for file entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>isodate7</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_date_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>isodirrec</name> <operator>+</operator> <name>DR_name_offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name>rr_start</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>name_len</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>name_len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_end</name> <operator>=</operator> <name>isodirrec</name> <operator>+</operator> <name>dr_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenJoliet</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">206</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <literal type="number">206</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name_len</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (name_len &gt; 2 &amp;&amp; p[name_len-2] == 0 &amp;&amp; p[name_len-1] == '.')
name_len -= 2;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>utf16be_name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_name</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_bytes</name></name> <operator>=</operator> <name>name_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><index>[<expr><name>name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>name_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>isodirrec</name><index>[<expr><name>DR_flags_offset</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>AE_IFDIR</name> <operator>|</operator> <literal type="number">0700</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>AE_IFREG</name> <operator>|</operator> <literal type="number">0400</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>multi_extent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>multi_extent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>location</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_rockridge</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rr_end</name> <operator>-</operator> <name>rr_start</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rr_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"SP\x07\x01\xbe\xef"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
















<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>suspOffset</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenSUSP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_start</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenSUSP</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name_continues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>symlink_continues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_start</name> <operator>+=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>suspOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parse_rockridge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>rr_start</name></expr></argument>, <argument><expr><name>rr_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>opt_support_rockridge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nlinks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>rr_moved</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>file</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"rr_moved"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">".rr_moved"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>rr_moved</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rr_moved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rr_moved_has_re_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>re</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>rr_moved</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge RE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge RE and CL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge RE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>rr_moved</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rr_moved_has_re_only</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>re</name></name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>re_descendant</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>re_descendant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge CL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge CL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subdirs</name></name><operator>++</operator></expr>;</expr_stmt>




<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>parent</name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge CL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>||</operator>
<name><name>parent</name><operator>-&gt;</operator><name>rr_moved</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Rockridge CL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x02</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ** Unrecognized flag: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_isodirrec</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>isodirrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_volume_sequence_number_offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ** Unrecognized sequence number: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_isodirrec</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>isodirrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>isodirrec</name> <operator>+</operator> <name>DR_file_unit_size_offset</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ** Unexpected file unit size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_isodirrec</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>isodirrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>isodirrec</name> <operator>+</operator> <name>DR_interleave_offset</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ** Unexpected interleave: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_isodirrec</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>isodirrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>isodirrec</name> <operator>+</operator> <name>DR_ext_attr_length_offset</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n ** Unexpected extended attribute length: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_isodirrec</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>isodirrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>register_file</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>file</name><operator>)</operator></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_rockridge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entry_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>end</name>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_length</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>int32_t</name></type> <name>location</name> <init>=
<expr><call><name>archive_le32dec</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ce_offset</name></name> <operator>=</operator>
<call><name>archive_le32dec</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ce_size</name></name> <operator>=</operator>
<call><name>archive_le32dec</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>register_CE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>*</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>archive_le32dec</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_rockridge_NM1</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>







<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rdev</name></name> <operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rdev</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>rdev</name></name> <operator>|=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name>
<operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nlinks</name></name>
<operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>uid</name></name>
<operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>gid</name></name>
<operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name>
<operator>=</operator> <call><name>toi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>






</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_rockridge_SL1</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal>
<operator>&amp;&amp;</operator> <name>data_length</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenSUSP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_rockridge_TF1</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>seenRockridge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_rockridge_ZF1</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>entry_seen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Tried to parse Rockridge extensions, but none found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>register_CE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>read_ce_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>read_ce_req</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>parent_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hole</name></decl>, <decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iso9660</name> <operator>=</operator> <operator>(</operator>struct <name>iso9660</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>location</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFREG</name> <operator>&amp;&amp;</operator>
<name>offset</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>||</operator>
<macro><name>offset</name></macro> <operator>&lt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>ce_offset</name></name><operator>)</operator> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_size</name></name><operator>)</operator>
<operator>&gt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name> <operator>||</operator>
<name>offset</name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_offset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_size</name></name>
<operator>&gt;</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>volume_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid parameter in SUSP \"CE\" extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>read_ce_req</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hole</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>hole</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>hole</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_offset</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>parent</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>parent_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>hole</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>hole</name></expr>]</index></name><operator>.</operator><name>file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>hole</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>parent</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>next_CE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>read_ce_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a_offset</name></decl>, <decl><type ref="prev"/><name>b_offset</name></decl>, <decl><type ref="prev"/><name>c_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>read_ce_req</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a_offset</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_offset</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_offset</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_offset</name> <operator>&lt;</operator> <name>b_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_offset</name> <operator>=</operator> <name>c_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a_offset</name> <operator>&lt;=</operator> <name>b_offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_CE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_ce_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>read_ce_req</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>logical_block_size</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator>
<name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>==</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read full block when scanning "</literal>
<literal type="string">"ISO9660 directory list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>file</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ce_offset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_size</name></name> <operator>&gt;</operator> <name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Malformed CE information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>ce_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_CE</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parse_rockridge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator>
<name><name>heap</name><operator>-&gt;</operator><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>==</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>)</condition>;</do>



<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_rockridge_NM1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>name_continues</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name_continues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>










<switch>switch<condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>data_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>data_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name_continues</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_rockridge_TF1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>flag</name></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>data_length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>birthtime_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>birthtime</name></name> <operator>=</operator> <call><name>isodate17</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>isodate17</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <call><name>isodate17</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>isodate17</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>birthtime_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>birthtime</name></name> <operator>=</operator> <call><name>isodate7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>isodate7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <call><name>isodate7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>isodate7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_rockridge_SL1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separator</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>symlink_continues</name></name> <operator>||</operator> <name><name>file</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>symlink_continues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>symlink_continues</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>data_length</name></expr>;</expr_stmt>










<while>while <condition>(<expr><name>data_length</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flag</name> <init>= <expr><operator>*</operator><name>data</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>nlen</name> <init>= <expr><operator>*</operator><name>data</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>data_length</name> <operator>&lt;</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strncat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x08</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><literal type="string">"ROOT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_length</name> <operator>-=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_rockridge_ZF1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x70</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x7a</literal> <operator>&amp;&amp;</operator> <name>data_length</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pz</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pz_log2_bs</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pz_uncompressed_size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>register_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>use_next</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>use_files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>use_files</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>content</name></name> <modifier>*</modifier></type><name>con</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>connext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>use_files</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>use_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>symlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>contents</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>con</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>connext</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <name>connext</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_entry_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>next_cache_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>*</operator><name>pfile</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>entry_bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>step</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block> <decl><name>empty_files</name></decl>;</struct>
<decl_stmt><decl><type><name>int64_t</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>cache_get_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>re</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pfile</name> <operator>=</operator> <name>file</name> <operator>=</operator> <call><name>next_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>rr_moved</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>rr_moved</name><operator>-&gt;</operator><name>rr_moved_has_re_only</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cache_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name><name>iso9660</name><operator>-&gt;</operator><name>rr_moved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>re</name> <operator>=</operator> <call><name>re_get_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>rede_get_entry</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cache_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>next_cache_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>pfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>first_re</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nexted_re</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<while>while <condition>(<expr><operator>(</operator><name>re</name> <operator>=</operator> <call><name>re_get_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>first_re</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first_re</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_re</name> <operator>=</operator> <name>re</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>subdirs</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>re_descendant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nexted_re</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>re_descendant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rede_add_entry</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal_rr</name>;</goto></block_content></block></if></if_stmt>


<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>rede_get_entry</name><argument_list>(
<argument><expr><name>re</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>rede_add_entry</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal_rr</name>;</goto></block_content></block></if></if_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>pfile</name> <operator>=</operator> <name>file</name> <operator>=</operator> <name>re</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>rede_get_entry</name><argument_list>(
<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cache_add_entry</name><argument_list>(
<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>nexted_re</name></expr>)</condition> <block>{<block_content>





<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFDIR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read_children</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>rr_moved</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>rr_moved_has_re_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>re</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>re_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>re_descendant</name></name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>rede_add_entry</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>AE_IFREG</name> <operator>||</operator> <name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>empty_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>empty_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>empty_files</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>



<while>while <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>pending_files</name><operator>.</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>pending_files</name><operator>.</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>number</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>iso9660</name><operator>-&gt;</operator><name>pending_files</name><operator>.</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>number</name> <operator>==</operator> <name>number</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>empty_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>empty_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>next_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pfile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>file</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then><expr><name>ARCHIVE_EOF</name></expr></then><else>:<expr><name>ARCHIVE_OK</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>empty_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>empty_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_add_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name></expr>;</init>
<condition><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nlinks</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>empty_files</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>empty_files</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>empty_files</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pfile</name> <operator>=</operator> <call><name>cache_get_entry</name><argument_list>(<argument><expr><name>iso9660</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pfile</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then><expr><name>ARCHIVE_EOF</name></expr></then><else>:<expr><name>ARCHIVE_OK</name></expr></else></ternary><operator>)</operator></expr>;</return>

<label><name>fatal_rr</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to connect 'CL' pointer to 'RE' rr_moved pointer of "</literal>
<literal type="string">"Rockridge extensions: current position = %jd, CL offset = %jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>iso9660</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>cl_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>re_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>re_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>re_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>re_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>re_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>last</name></name> <operator>=</operator>
<operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>re_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>file</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>rede_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>re</name></decl>;</decl_stmt>




<expr_stmt><expr><name>re</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>re</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>re</name><operator>-&gt;</operator><name>re</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>re</name> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>re</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>re_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>re_next</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>rede_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>re</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>re_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>last</name></name> <operator>=</operator>
<operator>&amp;</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>rede_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>file</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>cache_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>cache_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iso9660</name></name> <modifier>*</modifier></type><name>iso9660</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>last</name></name> <operator>=</operator>
<operator>&amp;</operator><operator>(</operator><name><name>iso9660</name><operator>-&gt;</operator><name>cache_files</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>file</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>heap_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>file_key</name></decl>, <decl><type ref="prev"/><name>parent_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hole</name></decl>, <decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>new_pending_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_pending_files</name> <operator>=</operator> <operator>(</operator>struct <name>file_info</name> <operator>*</operator><operator>*</operator><operator>)</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_pending_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_pending_files</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_pending_files</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_pending_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name>new_pending_files</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_key</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>




<expr_stmt><expr><name>hole</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>hole</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>hole</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_key</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>parent</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_key</name> <operator>&gt;=</operator> <name>parent_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>hole</name></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>hole</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>parent</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hole</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type>
<name>heap_get_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>heap_queue</name></name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a_key</name></decl>, <decl><type ref="prev"/><name>b_key</name></decl>, <decl><type ref="prev"/><name>c_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>used</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>heap</name><operator>-&gt;</operator><name>used</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a_key</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_key</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_key</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_key</name> <operator>&lt;</operator> <name>b_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_key</name> <operator>=</operator> <name>c_key</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a_key</name> <operator>&lt;=</operator> <name>b_key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>toi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <call><name>toi</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>isodate7</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>v</name><operator>)</operator><index>[<expr><literal type="number">6</literal></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">48</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">52</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>-=</operator> <name>offset</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>-=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_from_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>isodate17</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal>
<operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator>
<operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>v</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>v</name><operator>)</operator><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">48</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">52</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>-=</operator> <name>offset</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>-=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>time_from_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>time_from_tm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIMEGM</name></expr></cpp:if>

<return>return <expr><operator>(</operator><call><name>timegm</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE__MKGMTIME64</name></expr></cpp:elif>
<return>return <expr><operator>(</operator><call><name>_mkgmtime64</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><call><name>mktime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_sec</name></name>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">60</literal>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">3600</literal>
<operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>*</operator> <literal type="number">86400</literal>
<operator>+</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">70</literal><operator>)</operator> <operator>*</operator> <literal type="number">31536000</literal>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">69</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal>
<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">299</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>build_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>build_pathname</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_strcat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_concat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name><name>as</name><operator>-&gt;</operator><name>s</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>build_pathname_utf16be</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>file_info</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>utf16be_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>build_pathname_utf16be</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_bytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>utf16be_bytes</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>utf16be_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>utf16be_bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_isodirrec</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>isodirrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" l %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_length_offset</name></expr></argument>, <argument><expr><name>DR_length_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" a %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_ext_attr_length_offset</name></expr></argument>, <argument><expr><name>DR_ext_attr_length_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" ext 0x%x,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_extent_offset</name></expr></argument>, <argument><expr><name>DR_extent_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" s %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_size_offset</name></expr></argument>, <argument><expr><name>DR_extent_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" f 0x%x,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_flags_offset</name></expr></argument>, <argument><expr><name>DR_flags_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" u %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_file_unit_size_offset</name></expr></argument>, <argument><expr><name>DR_file_unit_size_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" ilv %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_interleave_offset</name></expr></argument>, <argument><expr><name>DR_interleave_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" seq %d,"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_volume_sequence_number_offset</name></expr></argument>,
<argument><expr><name>DR_volume_sequence_number_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" nl %d:"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_name_len_offset</name></expr></argument>, <argument><expr><name>DR_name_len_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" `%.*s'"</literal></expr></argument>,
<argument><expr><call><name>toi</name><argument_list>(<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_name_len_offset</name></expr></argument>, <argument><expr><name>DR_name_len_size</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>isodirrec</name> <operator>+</operator> <name>DR_name_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
