<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_string.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALCHARSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;localcharset.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string_composition.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WMEMCPY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>wmemcpy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmemcpy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wchar_t *)memcpy((a), (b), (i) * sizeof(wchar_t))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WMEMMOVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>wmemmove</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmemmove</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(wchar_t *)memmove((a), (b), (i) * sizeof(wchar_t))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>max</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>

<struct>struct <name>archive_string_conv</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from_charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>from_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>to_cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>same</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_TO_CHARSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_FROM_CHARSET</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_BEST_EFFORT</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_WIN_CP</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_UTF8_LIBARCHIVE_2</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_NORMALIZATION_C</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_NORMALIZATION_D</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_TO_UTF8</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_FROM_UTF8</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_TO_UTF16BE</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_FROM_UTF16BE</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_TO_UTF16LE</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_FROM_UTF16LE</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_TO_UTF16</name></cpp:macro> <cpp:value>(SCONV_TO_UTF16BE | SCONV_TO_UTF16LE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCONV_FROM_UTF16</name></cpp:macro> <cpp:value>(SCONV_FROM_UTF16BE | SCONV_FROM_UTF16LE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ICONV</name></expr></cpp:if>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd_w</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>utftmp</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>converter</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>nconverter</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_C_LOCALE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_UTF16LE</name></cpp:macro> <cpp:value>1200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_UTF16BE</name></cpp:macro> <cpp:value>1201</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_HIGH_SURROGATE_LA</name><parameter_list>(<parameter><type><name>uc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uc) &gt;= 0xD800 &amp;&amp; (uc) &lt;= 0xDBFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LOW_SURROGATE_LA</name><parameter_list>(<parameter><type><name>uc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uc) &gt;= 0xDC00 &amp;&amp; (uc) &lt;= 0xDFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SURROGATE_PAIR_LA</name><parameter_list>(<parameter><type><name>uc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uc) &gt;= 0xD800 &amp;&amp; (uc) &lt;= 0xDFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_MAX</name></cpp:macro> <cpp:value>0x10FFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_R_CHAR</name></cpp:macro> <cpp:value>0xFFFD</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>utf8_replacement_char</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xbd</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>find_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>create_sconv_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>get_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>make_codepage_from_charset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>get_current_codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>get_current_oemcp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>mbsnbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>utf16nbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_wstring_append_from_mbs_in_codepage</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_string_append_from_wcs_in_codepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_big_endian</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>strncat_in_codepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_strncat_from_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_strncat_from_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_strncat_to_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_strncat_to_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>best_effort_strncat_from_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>best_effort_strncat_from_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>best_effort_strncat_to_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>best_effort_strncat_to_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iconv_strncat_in_locale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>best_effort_strncat_in_locale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_utf8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>utf8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>combine_surrogate_pair</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cesu8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>utf16_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>unicode_to_utf16be</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>unicode_to_utf16le</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>strncat_from_utf8_libarchive2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>strncat_from_utf8_to_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_string_normalize_C</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_string_normalize_D</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_string_append_unicode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_string_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type>
<name>archive_wstring_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmemmove</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_array_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_string_concat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_wstring_concat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_wstring_append</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_string_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_wstring_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type>
<name>archive_wstring_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>archive_wstring</name> <operator>*</operator><operator>)</operator>
<call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>(</operator>struct <name>archive_string</name> <operator>*</operator><operator>)</operator><name>as</name></expr></argument>,
<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_string_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_length</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&lt;=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_length</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>&lt;</operator> <literal type="number">8192</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_length</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>new_length</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_length</name> <operator>&lt;</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>new_length</name> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_length</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>new_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <name>new_length</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_strncat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>as</name> <operator>=</operator> <call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type>
<name>archive_wstrncat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>as</name> <operator>=</operator> <call><name>archive_wstring_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_strcat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<return>return <expr><call><name>archive_strncat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x1000000</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type>
<name>archive_wstrcat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>archive_wstrncat</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x1000000</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type>
<name>archive_strappend_char</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>as</name> <operator>=</operator> <call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type>
<name>archive_wstrappend_wchar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>as</name> <operator>=</operator> <call><name>archive_wstring_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>as</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>default_iconv_charset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>charset</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>charset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>charset</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE_CHARSET</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>locale_charset</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_NL_LANGINFO</name></expr></cpp:elif>
<return>return <expr><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="string">""</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>archive_wstring_append_from_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_wstring_append_from_mbs_in_codepage</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_wstring_append_from_mbs_in_codepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>from_cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from_cp</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>from_cp</name> <operator>=</operator> <call><name>get_current_codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from_cp</name> <operator>==</operator> <name>CP_C_LOCALE</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><name>dest</name></expr></argument>,
<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>length</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>mp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ws</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><operator>*</operator><name>mp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_NORMALIZATION_C</name> <operator>|</operator> <name>SCONV_NORMALIZATION_D</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_flag</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SCONV_TO_UTF16BE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SCONV_TO_UTF16LE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>utf16nbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>mbsnbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>u16</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dest</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u16</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>u16</name><operator>.</operator><name>buffer_length</name></name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_string_normalize_C</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u16</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_string_normalize_D</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u16</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>u16</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>u16</name><operator>.</operator><name>length</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <name><name>u16</name><operator>.</operator><name>buffer_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>saved_flag</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>utf16nbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><name>dest</name></expr></argument>,
<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wmemcpy</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name> <init>= <expr><call><name>archive_le16dec</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name> <init>= <expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mbflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>mbsnbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mbflag</name> <operator>=</operator> <name>MB_PRECOMPOSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>from_cp</name></expr></argument>,
<argument><expr><name>mbflag</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><name>int</name></type>
<name>archive_wstring_append_from_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_wstring</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>mbs_length</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbs</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MBRTOWC</name></expr></cpp:if>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>shift_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shift_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wcs</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>





<while>while <condition>(<expr><operator>*</operator><name>mbs</name> <operator>&amp;&amp;</operator> <name>mbs_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MBRTOWC</name></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>mbs_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbtowc</name><argument_list>(<argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>mbs_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&gt;</operator> <name>mbs_length</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wcs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mbs</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbs_length</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>wcs</name> <operator>-</operator> <name><name>dest</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>dest</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><name>int</name></type>
<name>archive_string_append_from_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_string_append_from_wcs_in_codepage</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_string_append_from_wcs_in_codepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>defchar_used</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>to_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wslen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_cp</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_cp</name> <operator>=</operator> <call><name>get_current_codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to_cp</name> <operator>==</operator> <name>CP_C_LOCALE</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>ws</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>wslen</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>defchar_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>wslen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>wp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wp</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>defchar_used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>*</operator><name>wp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>u16</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator>
<call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>defchar_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ws</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>count</name></expr></argument>, <argument><expr><operator>*</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ws</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>count</name></expr></argument>, <argument><expr><operator>*</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ws</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator>
<call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>defchar_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to_cp</name> <operator>==</operator> <name>CP_UTF8</name> <operator>||</operator> <name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>&amp;</operator><name>defchar_used</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>to_cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>wslen</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>defchar_used</name></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><name>ret</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCTOMB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCRTOMB</name></expr></argument>)</argument_list></call></expr></cpp:elif>






<function><type><name>int</name></type>
<name>archive_string_append_from_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WCRTOMB</name></expr></cpp:if>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>shift_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shift_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>wctomb</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>MB_CUR_MAX</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>w</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <call><name>max</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>MB_CUR_MAX</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WCRTOMB</name></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>wcrtomb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>w</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>wctomb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>w</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EILSEQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<function><type><name>int</name></type>
<name>archive_string_append_from_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>as</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>find_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sc</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sconv</name></name></expr>;</init> <condition><expr><name>sc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>sc</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>to_charset</name></name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>sc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>psc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>psc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>sconv</name></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>psc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>psc</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>psc</name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_converter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>converter</name>)
<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Programming error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>converter</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>converter</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_converter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_UTF8_LIBARCHIVE_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>strncat_from_utf8_libarchive2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>archive_string_append_unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_WIN_CP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>win_strncat_to_utf16be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>win_strncat_to_utf16le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>iconv_strncat_in_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_BEST_EFFORT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>,
<argument><expr><name>best_effort_strncat_to_utf16be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>,
<argument><expr><name>best_effort_strncat_to_utf16le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>,<argument><expr><name>archive_string_normalize_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>archive_string_normalize_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator>
<operator>(</operator><name>SCONV_NORMALIZATION_D</name> <operator>|</operator><name>SCONV_NORMALIZATION_C</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>,
<argument><expr><name>archive_string_append_unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_WIN_CP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>win_strncat_from_utf16be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>win_strncat_from_utf16le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>iconv_strncat_in_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_BEST_EFFORT</name> <operator>|</operator> <name>SCONV_FROM_UTF16BE</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>SCONV_BEST_EFFORT</name> <operator>|</operator> <name>SCONV_FROM_UTF16BE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>best_effort_strncat_from_utf16be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_BEST_EFFORT</name> <operator>|</operator> <name>SCONV_FROM_UTF16LE</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>SCONV_BEST_EFFORT</name> <operator>|</operator> <name>SCONV_FROM_UTF16LE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>best_effort_strncat_from_utf16le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF8</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>,<argument><expr><name>archive_string_normalize_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>archive_string_normalize_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator>
<operator>(</operator><name>SCONV_NORMALIZATION_D</name> <operator>|</operator><name>SCONV_NORMALIZATION_C</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>strncat_from_utf8_to_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_WIN_CP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>strncat_in_codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ICONV</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>iconv_strncat_in_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>archive_string_normalize_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_BEST_EFFORT</name><operator>)</operator> <operator>||</operator> <name><name>sc</name><operator>-&gt;</operator><name>same</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>best_effort_strncat_in_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>canonical_charset_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>charset</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>charset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal>
<operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>charset</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>charset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"UTF-8"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF16BE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"UTF-16BE"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"UTF16LE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"UTF-16LE"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"CP932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"CP932"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>charset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>create_sconv_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>current_codepage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>to_charset</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>to_charset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>utftmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>SCONV_TO_CHARSET</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>=</operator> <name>current_codepage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>=</operator> <call><name>make_codepage_from_charset</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsValidCodePage</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>=</operator> <name>current_codepage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>=</operator> <call><name>make_codepage_from_charset</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsValidCodePage</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>==</operator> <name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>same</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>same</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF16BE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF16LE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF16BE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF16LE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>==</operator> <name>CP_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>==</operator> <name>CP_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF16BE</name> <operator>|</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>==</operator> <name>CP_UTF16LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_TO_UTF16LE</name> <operator>|</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>==</operator> <name>CP_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>==</operator> <name>CP_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF16BE</name> <operator>|</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>==</operator> <name>CP_UTF16LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_FROM_UTF16LE</name> <operator>|</operator> <name>SCONV_WIN_CP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_FROM_UTF16</name> <operator>|</operator> <name>SCONV_FROM_UTF8</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_NORMALIZATION_D</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_NORMALIZATION_C</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_TO_CHARSET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_FROM_UTF16</name> <operator>|</operator> <name>SCONV_FROM_UTF8</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_TO_UTF16</name> <operator>|</operator> <name>SCONV_TO_UTF8</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_NORMALIZATION_C</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_FROM_UTF16</name> <operator>|</operator> <name>SCONV_FROM_UTF8</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_NORMALIZATION_D</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_TO_UTF8</name> <operator>|</operator> <name>SCONV_TO_UTF16</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_FROM_UTF8</name> <operator>|</operator> <name>SCONV_FROM_UTF16</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_WIN_CP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_BEST_EFFORT</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"CP932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"SJIS"</literal></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"CP932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"SJIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_BEST_EFFORT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"CP932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="string">"SJIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>setup_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>sc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>to_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>utftmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ICONV</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>my_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>cp</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<struct><specifier>static</specifier> struct <name>charset</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cp</name></decl>;</decl_stmt>
}</block> <decl><name><name>charsets</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"ASCII"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ASMO-708"</literal></expr>, <expr><literal type="number">708</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"BIG5"</literal></expr>, <expr><literal type="number">950</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"CHINESE"</literal></expr>, <expr><literal type="number">936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"CP367"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"CP819"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"CP1025"</literal></expr>, <expr><literal type="number">21025</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"DOS-720"</literal></expr>, <expr><literal type="number">720</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"DOS-862"</literal></expr>, <expr><literal type="number">862</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUC-CN"</literal></expr>, <expr><literal type="number">51936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUC-JP"</literal></expr>, <expr><literal type="number">51932</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUC-KR"</literal></expr>, <expr><literal type="number">949</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUCCN"</literal></expr>, <expr><literal type="number">51936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUCJP"</literal></expr>, <expr><literal type="number">51932</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EUCKR"</literal></expr>, <expr><literal type="number">949</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"GB18030"</literal></expr>, <expr><literal type="number">54936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"GB2312"</literal></expr>, <expr><literal type="number">936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"HEBREW"</literal></expr>, <expr><literal type="number">1255</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"HZ-GB-2312"</literal></expr>, <expr><literal type="number">52936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM273"</literal></expr>, <expr><literal type="number">20273</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM277"</literal></expr>, <expr><literal type="number">20277</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM278"</literal></expr>, <expr><literal type="number">20278</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM280"</literal></expr>, <expr><literal type="number">20280</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM284"</literal></expr>, <expr><literal type="number">20284</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM285"</literal></expr>, <expr><literal type="number">20285</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM290"</literal></expr>, <expr><literal type="number">20290</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM297"</literal></expr>, <expr><literal type="number">20297</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM367"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM420"</literal></expr>, <expr><literal type="number">20420</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM423"</literal></expr>, <expr><literal type="number">20423</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM424"</literal></expr>, <expr><literal type="number">20424</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM819"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM871"</literal></expr>, <expr><literal type="number">20871</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM880"</literal></expr>, <expr><literal type="number">20880</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM905"</literal></expr>, <expr><literal type="number">20905</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"IBM924"</literal></expr>, <expr><literal type="number">20924</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-1"</literal></expr>, <expr><literal type="number">28591</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-13"</literal></expr>, <expr><literal type="number">28603</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-15"</literal></expr>, <expr><literal type="number">28605</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-2"</literal></expr>, <expr><literal type="number">28592</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-3"</literal></expr>, <expr><literal type="number">28593</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-4"</literal></expr>, <expr><literal type="number">28594</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-5"</literal></expr>, <expr><literal type="number">28595</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-6"</literal></expr>, <expr><literal type="number">28596</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-7"</literal></expr>, <expr><literal type="number">28597</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-8"</literal></expr>, <expr><literal type="number">28598</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO-8859-9"</literal></expr>, <expr><literal type="number">28599</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-1"</literal></expr>, <expr><literal type="number">28591</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-13"</literal></expr>, <expr><literal type="number">28603</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-15"</literal></expr>, <expr><literal type="number">28605</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-2"</literal></expr>, <expr><literal type="number">28592</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-3"</literal></expr>, <expr><literal type="number">28593</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-4"</literal></expr>, <expr><literal type="number">28594</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-5"</literal></expr>, <expr><literal type="number">28595</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-6"</literal></expr>, <expr><literal type="number">28596</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-7"</literal></expr>, <expr><literal type="number">28597</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-8"</literal></expr>, <expr><literal type="number">28598</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ISO8859-9"</literal></expr>, <expr><literal type="number">28599</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"JOHAB"</literal></expr>, <expr><literal type="number">1361</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"KOI8-R"</literal></expr>, <expr><literal type="number">20866</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"KOI8-U"</literal></expr>, <expr><literal type="number">21866</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"KS_C_5601-1987"</literal></expr>, <expr><literal type="number">949</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"LATIN1"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"LATIN2"</literal></expr>, <expr><literal type="number">28592</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"MACINTOSH"</literal></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"SHIFT-JIS"</literal></expr>, <expr><literal type="number">932</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"SHIFT_JIS"</literal></expr>, <expr><literal type="number">932</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"SJIS"</literal></expr>, <expr><literal type="number">932</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"US"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"US-ASCII"</literal></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"UTF-16"</literal></expr>, <expr><literal type="number">1200</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"UTF-16BE"</literal></expr>, <expr><literal type="number">1201</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"UTF-16LE"</literal></expr>, <expr><literal type="number">1200</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"UTF-8"</literal></expr>, <expr><name>CP_UTF8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-EUROPA"</literal></expr>, <expr><literal type="number">29001</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-ARABIC"</literal></expr>, <expr><literal type="number">10004</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-CE"</literal></expr>, <expr><literal type="number">10029</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-CHINESEIMP"</literal></expr>, <expr><literal type="number">10008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-CHINESETRAD"</literal></expr>, <expr><literal type="number">10002</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-CROATIAN"</literal></expr>, <expr><literal type="number">10082</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-CYRILLIC"</literal></expr>, <expr><literal type="number">10007</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-GREEK"</literal></expr>, <expr><literal type="number">10006</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-HEBREW"</literal></expr>, <expr><literal type="number">10005</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-ICELANDIC"</literal></expr>, <expr><literal type="number">10079</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-JAPANESE"</literal></expr>, <expr><literal type="number">10001</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-KOREAN"</literal></expr>, <expr><literal type="number">10003</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-ROMANIAN"</literal></expr>, <expr><literal type="number">10010</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-THAI"</literal></expr>, <expr><literal type="number">10021</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-TURKISH"</literal></expr>, <expr><literal type="number">10081</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"X-MAC-UKRAINIAN"</literal></expr>, <expr><literal type="number">10017</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>make_codepage_from_charset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>charset</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>charset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>charset</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>charsets</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>charsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>a</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>charsets</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>charsets</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>cp</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>


<switch>switch <condition>(<expr><operator>*</operator><name>cs</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"CP_ACP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>get_current_codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"CP_OEMCP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>get_current_oemcp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal> <operator>&amp;&amp;</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator>
<name><name>cs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>cs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="string">"WINDOWS-"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><name>cs</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <literal type="number">874</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1250</literal> <operator>||</operator> <name>cp</name></expr></argument> &gt;</argument_list></name> <literal type="number">1258</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_current_codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>locale</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>locale</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>GetACP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>locale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>locale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CP_C_LOCALE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>GetACP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CP_UTF8</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>cp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>GetACP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>acp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ocp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl>;</decl_stmt>
}</block> <decl><name><name>acp_ocp_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">950</literal></expr>, <expr><literal type="number">950</literal></expr>, <expr><literal type="string">"Chinese_Taiwan"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">936</literal></expr>, <expr><literal type="number">936</literal></expr>, <expr><literal type="string">"Chinese_People's Republic of China"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">950</literal></expr>, <expr><literal type="number">950</literal></expr>, <expr><literal type="string">"Chinese_Taiwan"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1250</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="string">"Czech_Czech Republic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Danish_Denmark"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Dutch_Netherlands"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Dutch_Belgium"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">437</literal></expr>, <expr><literal type="string">"English_United States"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"English_Australia"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"English_Canada"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"English_New Zealand"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"English_United Kingdom"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">437</literal></expr>, <expr><literal type="string">"English_United States"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Finnish_Finland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"French_France"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"French_Belgium"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"French_Canada"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"French_Switzerland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"German_Germany"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"German_Austria"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"German_Switzerland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1253</literal></expr>, <expr><literal type="number">737</literal></expr>, <expr><literal type="string">"Greek_Greece"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1250</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="string">"Hungarian_Hungary"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Icelandic_Iceland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Italian_Italy"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Italian_Switzerland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">932</literal></expr>, <expr><literal type="number">932</literal></expr>, <expr><literal type="string">"Japanese_Japan"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">949</literal></expr>, <expr><literal type="number">949</literal></expr>, <expr><literal type="string">"Korean_Korea"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Norwegian (BokmOl)_Norway"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Norwegian (BokmOl)_Norway"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Norwegian-Nynorsk_Norway"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1250</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="string">"Polish_Poland"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Portuguese_Portugal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Portuguese_Brazil"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1251</literal></expr>, <expr><literal type="number">866</literal></expr>, <expr><literal type="string">"Russian_Russia"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1250</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="string">"Slovak_Slovakia"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Spanish_Spain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Spanish_Mexico"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Spanish_Spain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><literal type="number">850</literal></expr>, <expr><literal type="string">"Swedish_Sweden"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1254</literal></expr>, <expr><literal type="number">857</literal></expr>, <expr><literal type="string">"Turkish_Turkey"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>




<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_current_oemcp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>locale</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>locale</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>GetOEMCP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>locale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>locale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CP_C_LOCALE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>GetOEMCP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>locale</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>acp_ocp_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>acp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>acp_ocp_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>locale</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>acp_ocp_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ocp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><call><name>GetOEMCP</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_current_codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>make_codepage_from_charset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>charset</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_current_oemcp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>get_sconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>current_codepage</name></decl>;</decl_stmt>


<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>find_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>sc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_codepage</name> <operator>=</operator> <call><name>get_current_codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>current_codepage</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>create_sconv_object</name><argument_list>(<argument><expr><call><name>canonical_charset_name</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>canonical_charset_name</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>current_codepage</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Could not allocate memory for "</literal>
<literal type="string">"a string conversion object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ICONV</name></expr></cpp:if>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"iconv_open failed : Cannot handle ``%s''"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SCONV_TO_CHARSET</name><operator>)</operator></expr>?</condition><then><expr><name>tc</name></expr></then><else>:<expr><name>fc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"A character-set conversion not fully supported "</literal>
<literal type="string">"on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_sconv_object</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>sc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_current_charset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_charset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_charset</name> <operator>=</operator> <call><name>default_iconv_charset</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>cur_charset</name> <operator>=</operator> <call><name>default_iconv_charset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>current_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>current_code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_code</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>cur_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name> <operator>=</operator> <call><name>get_current_codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_oemcp</name></name> <operator>=</operator> <call><name>get_current_oemcp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>cur_charset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_conversion_to_charset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>best_effort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>SCONV_TO_CHARSET</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>best_effort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_BEST_EFFORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>get_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>get_current_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_conversion_from_charset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>best_effort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>SCONV_FROM_CHARSET</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>best_effort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SCONV_BEST_EFFORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>get_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><call><name>get_current_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_default_conversion_for_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_charset</name> <init>= <expr><call><name>get_current_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>oemcp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>cur_charset</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name> <operator>==</operator> <name>CP_C_LOCALE</name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>current_oemcp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>oemcp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oemcp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CP%d"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>current_oemcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oemcp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>oemcp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>get_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>oemcp</name></expr></argument>, <argument><expr><name>cur_charset</name></expr></argument>,
<argument><expr><name>SCONV_FROM_CHARSET</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_default_conversion_for_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur_charset</name> <init>= <expr><call><name>get_current_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>oemcp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>cur_charset</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name> <operator>==</operator> <name>CP_C_LOCALE</name> <operator>||</operator>
<name><name>a</name><operator>-&gt;</operator><name>current_codepage</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>current_oemcp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>oemcp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oemcp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CP%d"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>current_oemcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oemcp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>oemcp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>get_sconv_object</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cur_charset</name></expr></argument>, <argument><expr><name>oemcp</name></expr></argument>,
<argument><expr><name>SCONV_TO_CHARSET</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_default_conversion_for_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type>
<name>archive_string_default_conversion_for_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>archive_string_conversion_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc_next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sc</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sconv</name></name></expr>;</init> <condition><expr><name>sc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>sc</name> <operator>=</operator> <name>sc_next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sc_next</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_sconv_object</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>sconv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>current_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>current_code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>archive_string_conversion_charset_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_CHARSET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>to_charset</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>from_charset</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>archive_string_conversion_set_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>






<case>case <expr><name>SCONV_SET_OPT_UTF8_LIBARCHIVE2X</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_UTF8_LIBARCHIVE_2</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SCONV_UTF8_LIBARCHIVE_2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>SCONV_SET_OPT_NORMALIZATION_C</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_C</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SCONV_NORMALIZATION_C</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SCONV_NORMALIZATION_D</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SCONV_SET_OPT_NORMALIZATION_D</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_WIN_CP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_FROM_UTF16</name> <operator>|</operator> <name>SCONV_FROM_UTF8</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_TO_UTF16</name> <operator>|</operator> <name>SCONV_TO_UTF8</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_NORMALIZATION_D</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SCONV_NORMALIZATION_D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SCONV_NORMALIZATION_C</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_converter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>mbsnbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>utf16nbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_strncpy_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>archive_strncat_l</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_strncat_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>utf16nbytes</name><argument_list>(<argument><expr><name>_p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>mbsnbytes</name><argument_list>(<argument><expr><name>_p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tn</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>tn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>nconverter</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>utftmp</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>converter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>utftmp</name></name><operator>)</operator><operator>,</operator> <name>s</name><operator>,</operator> <name>length</name><operator>,</operator> <name>sc</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>r2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>utftmp</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>utftmp</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>converter</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>as</name><operator>,</operator> <name>s</name><operator>,</operator> <name>length</name><operator>,</operator> <name>sc</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>r2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ICONV</name></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>iconv_strncat_in_locale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ICONV_CONST</name> <name>char</name> <modifier>*</modifier></type><name>itp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>return_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_size</name></decl>, <decl><type ref="prev"/><name>from_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>from_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>length</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>to_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>cd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>itp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>to_size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>remaining</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>from_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EILSEQ</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCONV_TO_UTF8</name> <operator>|</operator> <name>SCONV_TO_UTF16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rbytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rbytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_replacement_char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rbytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name>rbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>outp</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator>
<operator>(</operator><name>remaining</name> <operator>*</operator> <name>to_size</name><operator>)</operator> <operator>+</operator> <name>rbytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator>
<call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name>
<operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>to_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name>utf8_replacement_char</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_replacement_char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name>UNICODE_R_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name>UNICODE_R_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>outp</name> <operator>+=</operator> <name>rbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name>rbytes</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outp</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>itp</name> <operator>+=</operator> <name>from_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>from_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>return_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>outp</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name>remaining</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>to_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>outp</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to_size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>return_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>strncat_in_codepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_wstring</name></name></type> <name>aws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>saved_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_flag</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SCONV_NORMALIZATION_D</name> <operator>|</operator> <name>SCONV_NORMALIZATION_C</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_wstring_append_from_mbs_in_codepage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aws</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>saved_flag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs_in_codepage</name><argument_list>(
<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>aws</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aws</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOMEM</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>invalid_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codepage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mbflag</name> <init>= <expr><name>MB_ERR_INVALID_CHARS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_CHARSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codepage</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>codepage</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codepage</name> <operator>==</operator> <name>CP_C_LOCALE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codepage</name> <operator>!=</operator> <name>CP_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbflag</name> <operator>|=</operator> <name>MB_PRECOMPOSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>codepage</name></expr></argument>, <argument><expr><name>mbflag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>invalid_mbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MBRTOWC</name></expr></cpp:if>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>shift_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shift_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mbtowc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MBRTOWC</name></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_in_locale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>itp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>return_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>same</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>invalid_mbs</name><argument_list>(<argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>itp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>itp</name> <operator>&amp;&amp;</operator> <name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>itp</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>utf8_replacement_char</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_replacement_char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>return_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_strappend_char</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><operator>*</operator><name>itp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>itp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>return_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>int</name></type>
<name>_utf8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>utf8_count</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>utf8_count</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>ch</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_sequence</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_sequence</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0xc0</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xc1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xf5</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xf7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xf8</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xfb</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0xfc</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0xfd</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&gt;</operator> <name>UNICODE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_sequence</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
<label><name>invalid_sequence</name>:</label>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cnt</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>_utf8_to_unicode</name><argument_list>(<argument><expr><name>pwc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>IS_SURROGATE_PAIR_LA</name><argument_list>(<argument><expr><operator>*</operator><name>pwc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>combine_surrogate_pair</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0xD800</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>*=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>+=</operator> <name>uc2</name> <operator>-</operator> <literal type="number">0xDC00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>cesu8_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>_utf8_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>IS_HIGH_SURROGATE_LA</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wc2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>_utf8_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc2</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><call><name>IS_LOW_SURROGATE_LA</name><argument_list>(<argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>combine_surrogate_pair</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>IS_LOW_SURROGATE_LA</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>invalid_sequence</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
<label><name>invalid_sequence</name>:</label>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remaining</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_p</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <name>UNICODE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>uc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>_p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf16be_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>utf16_to_unicode</name><argument_list>(<argument><expr><name>pwc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf16le_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>utf16_to_unicode</name><argument_list>(<argument><expr><name>pwc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf16_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>uc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>archive_be16dec</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>utf16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IS_HIGH_SURROGATE_LA</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>uc2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc2</name> <operator>=</operator> <call><name>archive_be16dec</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uc2</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uc2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_LOW_SURROGATE_LA</name><argument_list>(<argument><expr><name>uc2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>combine_surrogate_pair</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>uc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><call><name>IS_SURROGATE_PAIR_LA</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>uc</name> <operator>&gt;</operator> <name>UNICODE_MAX</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>utf16</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pwc</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>utf16</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>unicode_to_utf16be</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remaining</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>unicode_to_utf16le</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remaining</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>strncat_from_utf8_to_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>




<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>utf8_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ss</name> <operator>&lt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>ss</name><operator>)</operator> <operator>&gt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name>ss</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>IS_SURROGATE_PAIR_LA</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cesu8_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>unicode_to_utf8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_string_append_unicode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ts</name></decl>, <decl><type ref="prev"/><name>tm</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>unparse</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16be_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16le_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>cesu8_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <name>tm</name> <operator>+</operator> <name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>unparse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <name>tm</name> <operator>+</operator> <name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_SBASE</name></cpp:macro> <cpp:value>0xAC00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_LBASE</name></cpp:macro> <cpp:value>0x1100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_VBASE</name></cpp:macro> <cpp:value>0x1161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_TBASE</name></cpp:macro> <cpp:value>0x11A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_LCOUNT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_VCOUNT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_TCOUNT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_NCOUNT</name></cpp:macro> <cpp:value>(HC_VCOUNT * HC_TCOUNT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_SCOUNT</name></cpp:macro> <cpp:value>(HC_LCOUNT * HC_NCOUNT)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>get_nfc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_composition_table</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>u_composition_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u_composition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp1</name> <operator>&lt;</operator> <name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>u_composition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp1</name> <operator>&gt;</operator> <name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>u_composition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp2</name> <operator>&lt;</operator> <name>uc2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>u_composition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp2</name> <operator>&gt;</operator> <name>uc2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>u_composition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>nfc</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDC_MAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_UC</name><parameter_list>(<parameter><type><name>new_uc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uc = new_uc; ucptr = NULL; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_UC_WITH_UC2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { uc = uc2; ucptr = uc2ptr; n = n2; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPAND_BUFFER</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { as-&gt;length = p - as-&gt;s; if (archive_string_ensure(as, as-&gt;buffer_length + len * tm + ts) == NULL)return (-1); p = as-&gt;s + as-&gt;length; endp = as-&gt;s + as-&gt;buffer_length - ts; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPARSE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>endp</name></type></parameter>, <parameter><type><name>uc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while ((w = unparse(p, (endp) - (p), uc)) == 0) {EXPAND_BUFFER(); } p += w; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_UC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (ucptr) { if (p + n &gt; endp) EXPAND_BUFFER(); switch (n) { case 4: *p++ = *ucptr++; case 3: *p++ = *ucptr++; case 2: *p++ = *ucptr++; case 1: *p++ = *ucptr; break; } ucptr = NULL; } else { UNPARSE(p, endp, uc); } } while (0)</cpp:value></cpp:define>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECT_CPS</name><parameter_list>(<parameter><type><name>start</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int _i; for (_i = start; _i &lt; FDC_MAX ; _i++) { nx = parse(&amp;ucx[_i], s, len); if (nx &lt;= 0) break; cx = CCC(ucx[_i]); if (cl &gt;= cx &amp;&amp; cl != 228 &amp;&amp; cx != 228)break; s += nx; len -= nx; cl = cx; ccx[_i] = cx; } if (_i &gt;= FDC_MAX) { ret = -1; ucx_size = FDC_MAX; } else ucx_size = _i; } while (0)</cpp:value></cpp:define>


























<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_string_normalize_C</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>, <decl><type ref="prev"/><name>uc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>always_replace</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>spair</name></decl>, <decl><type ref="prev"/><name>ts</name></decl>, <decl><type ref="prev"/><name>tm</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>unparse</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16be_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16le_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>cesu8_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <name>tm</name> <operator>+</operator> <name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ucptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>uc2ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNPARSE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>spair</name> <operator>||</operator> <name>always_replace</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>ucptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ucptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>n2</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ucx</name><index>[<expr><name>FDC_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ccx</name><index>[<expr><name>FDC_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cl</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nx</name></decl>, <decl><type ref="prev"/><name>ucx_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LIndex</name></decl>,<decl><type ref="prev"/><name>SIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nfc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>==</operator> <name>spair</name> <operator>||</operator> <name>always_replace</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>uc2ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uc2ptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n2</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_DECOMPOSABLE_BLOCK</name><argument_list>(<argument><expr><name>uc2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH_UC2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>LIndex</name> <operator>=</operator> <name>uc</name> <operator>-</operator> <name>HC_LBASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>LIndex</name> <operator>&lt;</operator> <name>HC_LCOUNT</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>VIndex</name> <init>= <expr><name>uc2</name> <operator>-</operator> <name>HC_VBASE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>VIndex</name> <operator>&amp;&amp;</operator> <name>VIndex</name> <operator>&lt;</operator> <name>HC_VCOUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UPDATE_UC</name><argument_list>(<argument><expr><name>HC_SBASE</name> <operator>+</operator>
<operator>(</operator><name>LIndex</name> <operator>*</operator> <name>HC_VCOUNT</name> <operator>+</operator> <name>VIndex</name><operator>)</operator> <operator>*</operator>
<name>HC_TCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH_UC2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>SIndex</name> <operator>=</operator> <name>uc</name> <operator>-</operator> <name>HC_SBASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>SIndex</name> <operator>&lt;</operator> <name>HC_SCOUNT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIndex</name> <operator>%</operator> <name>HC_TCOUNT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>TIndex</name> <init>= <expr><name>uc2</name> <operator>-</operator> <name>HC_TBASE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>TIndex</name> <operator>&amp;&amp;</operator> <name>TIndex</name> <operator>&lt;</operator> <name>HC_TCOUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UPDATE_UC</name><argument_list>(<argument><expr><name>uc</name> <operator>+</operator> <name>TIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH_UC2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>nfc</name> <operator>=</operator> <call><name>get_nfc</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>uc2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>UPDATE_UC</name><argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>cl</name> <operator>=</operator> <call><name>CCC</name><argument_list>(<argument><expr><name>uc2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH_UC2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>cx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ucx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COLLECT_CPS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ucx_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfc</name> <operator>=</operator> <call><name>get_nfc</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name><name>ucx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>UPDATE_UC</name><argument_list>(<argument><expr><name>nfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>ucx_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ucx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ucx</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ccx</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ucx_size</name> <operator>--</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ucx_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>ucx_size</name> <operator>&amp;&amp;</operator>
<name>nx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cx</name> <operator>==</operator> <name>cl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name><name>ccx</name><index>[<expr><name>ucx_size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COLLECT_CPS</name><argument_list>(<argument><expr><name>ucx_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>





<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ucx_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNPARSE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name><name>ucx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<if_stmt><if>if <condition>(<expr><name>nx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cx</name> <operator>==</operator> <name>cl</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>nx</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ucx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>CCC</name><argument_list>(<argument><expr><name><name>ucx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cl</name> <operator>&gt;</operator> <name>cx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPARSE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name><name>ucx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPARSE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>uc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n2</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n2</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_nfd</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cp1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cp2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uc</name> <operator>&gt;=</operator> <literal type="number">0x2000</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="number">0x2FFF</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>uc</name> <operator>&gt;=</operator> <literal type="number">0xF900</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="number">0xFAFF</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>uc</name> <operator>&gt;=</operator> <literal type="number">0x2F800</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="number">0x2FAFF</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0x1109A</literal> <operator>||</operator> <name>uc</name> <operator>==</operator> <literal type="number">0x1109C</literal> <operator>||</operator> <name>uc</name> <operator>==</operator> <literal type="number">0x110AB</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_decomposition_table</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>u_decomposition_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u_decomposition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>nfc</name> <operator>&lt;</operator> <name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>u_decomposition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>nfc</name> <operator>&gt;</operator> <name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp1</name> <operator>=</operator> <name><name>u_decomposition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp2</name> <operator>=</operator> <name><name>u_decomposition_table</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>cp2</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_UC_WITH</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uc = cp; ucptr = NULL; } while (0)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_string_normalize_D</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>, <decl><type ref="prev"/><name>uc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>always_replace</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>spair</name></decl>, <decl><type ref="prev"/><name>ts</name></decl>, <decl><type ref="prev"/><name>tm</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>unparse</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_TO_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>always_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16be</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf16le</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>unparse</name> <operator>=</operator> <name>unicode_to_utf8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16be_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SCONV_FROM_UTF16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>utf16le_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>cesu8_to_unicode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spair</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>*</operator> <name>tm</name> <operator>+</operator> <name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ucptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp1</name></decl>, <decl><type ref="prev"/><name>cp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SIndex</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ccc</name></decl>;</decl_stmt>
}</block> <decl><name><name>fdc</name><index>[<expr><name>FDC_MAX</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>fdi</name></decl>, <decl><type ref="prev"/><name>fdj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ccc</name></decl>;</decl_stmt>

<label><name>check_first_code</name>:</label>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNPARSE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>spair</name> <operator>||</operator> <name>always_replace</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>ucptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ucptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>SIndex</name> <operator>=</operator> <name>uc</name> <operator>-</operator> <name>HC_SBASE</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SIndex</name> <operator>&lt;</operator> <name>HC_SCOUNT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name>HC_LBASE</name> <operator>+</operator> <name>SIndex</name> <operator>/</operator> <name>HC_NCOUNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><name>HC_VBASE</name> <operator>+</operator> <operator>(</operator><name>SIndex</name> <operator>%</operator> <name>HC_NCOUNT</name><operator>)</operator> <operator>/</operator> <name>HC_TCOUNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name> <init>= <expr><name>HC_TBASE</name> <operator>+</operator> <name>SIndex</name> <operator>%</operator> <name>HC_TCOUNT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>!=</operator> <name>HC_TBASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_DECOMPOSABLE_BLOCK</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CCC</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fdi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>get_nfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp2</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>fdi</name> <operator>&lt;</operator> <name>FDC_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>fdi</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>fdc</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ccc</name> <operator>=</operator> <call><name>CCC</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>uc</name> <operator>=</operator> <name>cp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fdi</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><operator>(</operator><name>n2</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ccc</name> <operator>=</operator> <call><name>CCC</name><argument_list>(<argument><expr><name>uc2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fdi</name> <operator>&lt;</operator> <name>FDC_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n2</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>fdi</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fdc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ccc</name> <operator>&gt;</operator> <name>ccc</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>fdi</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>fdi</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>fdc</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ccc</name> <operator>=</operator> <name>ccc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>uc</name> <operator>=</operator> <name>uc2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>fdi</name></expr>]</index></name><operator>.</operator><name>ccc</name> <operator>=</operator> <name>ccc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdc</name><index>[<expr><name>fdi</name></expr>]</index></name><operator>.</operator><name>uc</name> <operator>=</operator> <name>uc2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fdi</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>fdj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fdj</name> <operator>&lt;</operator> <name>fdi</name></expr>;</condition> <incr><expr><name>fdj</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name><name>fdc</name><index>[<expr><name>fdj</name></expr>]</index></name><operator>.</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_UC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>REPLACE_UC_WITH</name><argument_list>(<argument><expr><name>uc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<goto>goto <name>check_first_code</name>;</goto>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type>
<name>strncat_from_utf8_libarchive2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unicode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WCRTOMB</name></expr></cpp:if>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>shift_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shift_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>wctomb</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>MB_CUR_MAX</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>_utf8_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unicode</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>,
<argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <call><name>max</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name>MB_CUR_MAX</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>L</name><literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name>unicode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WCRTOMB</name></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcrtomb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wctomb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_from_utf16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>defchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mbs_size</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>bytes</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mbs</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbs_size</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name> <operator>==</operator> <name>CP_C_LOCALE</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>u16</name> <operator>=</operator> <name>_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>archive_be16dec</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>u16</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mbs</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mbs</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>val</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ll</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <name>_p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>bytes</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name> <init>= <expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name><operator>+</operator><name>b</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <name>_p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>bytes</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name> <init>= <expr><call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>s</name></name><operator>+</operator><name>b</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>defchar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>u16</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>mbs_size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>to_cp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>u16</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>ll</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mbs</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbs_size</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>ll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>defchar</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_from_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>win_strncat_from_utf16</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_from_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>win_strncat_from_utf16</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_big_endian</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>archive_be16dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_to_utf16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bigendian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>avail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as16</name></expr></argument>,
<argument><expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u16</name> <operator>=</operator> <name><name>as16</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>as16</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>==</operator> <name>CP_C_LOCALE</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bigendian</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>u16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>count</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr></argument>,
<argument><expr><name>MB_PRECOMPOSED</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>u16</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>avail</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr></argument>,
<argument><expr><name>MB_PRECOMPOSED</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as16</name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <name><name>as16</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>as16</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_big_endian</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bigendian</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><call><name>archive_be16dec</name><argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bigendian</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><call><name>archive_le16dec</name><argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>u16</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_to_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>win_strncat_to_utf16</name><argument_list>(<argument><expr><name>as16</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_strncat_to_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>win_strncat_to_utf16</name><argument_list>(<argument><expr><name>as16</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_from_utf16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>bytes</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mbs</name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>utf16_to_unicode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>be</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>utf16</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mbs</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mbs</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>uc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>mbs</name> <operator>-</operator> <name><name>as</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_from_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>best_effort_strncat_from_utf16</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_from_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>best_effort_strncat_from_utf16</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_to_utf16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bigendian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_string_ensure</name><argument_list>(<argument><expr><name>as16</name></expr></argument>,
<argument><expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>utf16</name> <operator>=</operator> <name><name>as16</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>remaining</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>UNICODE_R_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bigendian</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_be16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>utf16</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>utf16</name> <operator>-</operator> <name><name>as16</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as16</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>as16</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_to_utf16be</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>best_effort_strncat_to_utf16</name><argument_list>(<argument><expr><name>as16</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>best_effort_strncat_to_utf16le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>as16</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>best_effort_strncat_to_utf16</name><argument_list>(<argument><expr><name>as16</name></expr></argument>, <argument><expr><name>_p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>archive_mstring_clean</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>archive_mstring_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>aes_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_get_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>aes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>archive_string_conversion_to_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_sconv_object</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>|=</operator> <name>AES_SET_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_get_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_WCS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>|=</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_UTF8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_sconv_object</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>|=</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_get_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_WCS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>aes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_wstring_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_wstring_append_from_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>|=</operator> <name>AES_SET_WCS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_get_mbs_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_WCS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_string_append_from_wcs_in_codepage</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>archive_mstring_get_mbs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>aes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>&amp;</operator> <name>AES_SET_MBS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>aes</name><operator>-&gt;</operator><name>aes_mbs_in_locale</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_mbs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mbs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>archive_mstring_copy_mbs_len</name><argument_list>(<argument><expr><name>aes</name></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mbs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_mbs_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbs</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mbs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_wcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_mstring_copy_wcs_len</name><argument_list>(<argument><expr><name>aes</name></expr></argument>, <argument><expr><name>wcs</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>wcs</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wcs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_wcs_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wcs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_WCS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstrncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>, <argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>archive_mstring_copy_mbs_len_l</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mbs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_string_append</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>mbs</name></expr></argument>, <argument><expr><call><name>mbsnbytes</name><argument_list>(<argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>from_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>cd_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <name>cd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_UTF8</name></expr>;</expr_stmt>




<expr_stmt><expr><name>flag</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SCONV_NORMALIZATION_C</name>
<operator>|</operator> <name>SCONV_TO_UTF16</name><operator>|</operator> <name>SCONV_FROM_UTF16</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>from_cp</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>=</operator> <name>CP_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_wstring_append_from_mbs_in_codepage</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>from_cp</name></name> <operator>=</operator> <name>from_cp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>|=</operator> <name>AES_SET_WCS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_wstring_append_from_mbs_in_codepage</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_WCS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_strncpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>archive_mstring_update_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_mstring</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_utf8</name></name><operator>)</operator></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>archive_string_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_UTF8</name></expr>;</expr_stmt>


<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_strcpy_l</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name></name><operator>)</operator></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_sconv_object</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_UTF8</name> <operator>|</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>archive_wstring_append_from_mbs</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>aes</name><operator>-&gt;</operator><name>aes_wcs</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_mbs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>aes</name><operator>-&gt;</operator><name>aes_set</name></name> <operator>=</operator> <name>AES_SET_UTF8</name> <operator>|</operator> <name>AES_SET_WCS</name> <operator>|</operator> <name>AES_SET_MBS</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
