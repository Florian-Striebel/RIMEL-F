<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_pack_dev.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_CDEFS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAJOR_IN_MKDEV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mkdev.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MAJOR</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MAJOR_IN_SYSMACROS</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MAJOR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_pack_dev.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_netbsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_freebsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_8_8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_12_20</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_14_18</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_8_24</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pack_t</name></type> <name>pack_bsdos</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compare_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>iMajorError</name><index>[]</index></name> <init>= <expr><literal type="string">"invalid major number"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>iMinorError</name><index>[]</index></name> <init>= <expr><literal type="string">"invalid minor number"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tooManyFields</name><index>[]</index></name> <init>= <expr><literal type="string">"too many fields for format"</literal></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(0x00ff &amp; ((x) &gt;&gt; 8)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(0xffff00ff &amp; (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>,<parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0xff00 &amp; ((maj)&lt;&lt;8)) | (0xffff00ff &amp; (min)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/netmgr.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apd_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev(ND_LOCAL_NODE, (maj), (min))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>makedev</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apd_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev((maj), (min))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>mkdev</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__WIN32__</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apd_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mkdev((maj), (min))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apd_makedev</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>makedev((maj), (min))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>dev_t</name></type>
<name>pack_native</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>apd_makedev</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_netbsd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_netbsd</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_netbsd</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_netbsd</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_freebsd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x0000ff00) &gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor_freebsd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0xffff00ff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_freebsd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 8) &amp; 0x0000ff00) | (((y) &lt;&lt; 0) &amp; 0xffff00ff)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_freebsd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_freebsd</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_freebsd</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_freebsd</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_8_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x0000ff00) &gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor_8_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x000000ff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_8_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 8) &amp; 0x0000ff00) | (((y) &lt;&lt; 0) &amp; 0x000000ff)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_8_8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_8_8</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_8_8</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_8_8</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_12_20</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0xfff00000) &gt;&gt; 20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor_12_20</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x000fffff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_12_20</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 20) &amp; 0xfff00000) | (((y) &lt;&lt; 0) &amp; 0x000fffff)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_12_20</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_12_20</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_12_20</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_12_20</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_14_18</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0xfffc0000) &gt;&gt; 18))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor_14_18</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x0003ffff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_14_18</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 18) &amp; 0xfffc0000) | (((y) &lt;&lt; 0) &amp; 0x0003ffff)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_14_18</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_14_18</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_14_18</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_14_18</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_8_24</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0xff000000) &gt;&gt; 24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minor_8_24</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x00ffffff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_8_24</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 24) &amp; 0xff000000) | (((y) &lt;&lt; 0) &amp; 0x00ffffff)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_8_24</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_8_24</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_8_24</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_8_24</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>major_12_12_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0xfff00000) &gt;&gt; 20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unit_12_12_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x000fff00) &gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>subunit_12_12_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t)(((x) &amp; 0x000000ff) &gt;&gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makedev_12_12_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dev_t)((((x) &lt;&lt; 20) &amp; 0xfff00000) | (((y) &lt;&lt; 8) &amp; 0x000fff00) | (((z) &lt;&lt; 0) &amp; 0x000000ff)))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>dev_t</name></type>
<name>pack_bsdos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>numbers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_12_20</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_12_20</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>minor_12_20</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMinorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev_12_12_8</name><argument_list>(<argument><expr><name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numbers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>major_12_12_8</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>iMajorError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>unit_12_12_8</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="string">"invalid unit number"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>subunit_12_12_8</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>numbers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="string">"invalid subunit number"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>tooManyFields</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>format</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pack_t</name> <modifier>*</modifier></type><name>pack</name></decl>;</decl_stmt>
}</block> <decl><name><name>formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"386bsd"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"4bsd"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"bsdos"</literal></expr>, <expr><name>pack_bsdos</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"freebsd"</literal></expr>, <expr><name>pack_freebsd</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"hpux"</literal></expr>, <expr><name>pack_8_24</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isc"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"linux"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"native"</literal></expr>, <expr><name>pack_native</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"netbsd"</literal></expr>, <expr><name>pack_netbsd</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"osf1"</literal></expr>, <expr><name>pack_12_20</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sco"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"solaris"</literal></expr>, <expr><name>pack_14_18</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sunos"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"svr3"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"svr4"</literal></expr>, <expr><name>pack_14_18</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ultrix"</literal></expr>, <expr><name>pack_8_8</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>format</name></name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>pack_t</name> <modifier>*</modifier></type>
<name>pack_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>format</name></name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>format</name><operator>-&gt;</operator><name>pack</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
