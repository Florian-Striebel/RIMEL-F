<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_ppmd7.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd7_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetPtr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetContext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetStats</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;Stats)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetPtr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((p)-&gt;Base + (offs)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetContext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd7_Context *)Ppmd7_GetPtr((p), (offs)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetStats</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_State *)Ppmd7_GetPtr((p), ((ctx)-&gt;Stats)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ppmd7_GetBinSumm</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;p-&gt;BinSumm[Ppmd7Context_OneState(p-&gt;MinContext)-&gt;Freq - 1][p-&gt;PrevSuccess + p-&gt;NS2BSIndx[Ppmd7_GetContext(p, p-&gt;MinContext-&gt;Suffix)-&gt;NumStats - 1] + (p-&gt;HiBitsFlag = p-&gt;HB2Flag[p-&gt;FoundState-&gt;Symbol]) + 2 * p-&gt;HB2Flag[Ppmd7Context_OneState(p-&gt;MinContext)-&gt;Symbol] + ((p-&gt;RunLength &gt;&gt; 26) &amp; 0x20)]</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kTopValue</name></cpp:macro> <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FREQ</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIT_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U2B</name><parameter_list>(<parameter><type><name>nu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UInt32)(nu) * UNIT_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U2I</name><parameter_list>(<parameter><type><name>nu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p-&gt;Units2Indx[(nu) - 1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I2U</name><parameter_list>(<parameter><type><name>indx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p-&gt;Indx2Units[indx])</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UInt32)((Byte *)(ptr) - (p)-&gt;Base))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_REF</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_State_Ref)REF(ptr))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd7_Context *)Ppmd7_GetContext(p, ref))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Ppmd7_GetStats(p, ctx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_STATE</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Ppmd7Context_OneState(ctx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUFFIX</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CTX((ctx)-&gt;Suffix)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UInt16</name></type> <name><name>kInitBinEsc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x3CDD</literal></expr>, <expr><literal type="number">0x1F3F</literal></expr>, <expr><literal type="number">0x59BF</literal></expr>, <expr><literal type="number">0x48F3</literal></expr>, <expr><literal type="number">0x64A1</literal></expr>, <expr><literal type="number">0x5ABC</literal></expr>, <expr><literal type="number">0x6632</literal></expr>, <expr><literal type="number">0x6051</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Byte</name></type> <name><name>PPMD7_kExpEscape</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>CPpmd7_Context</name> <modifier>*</modifier></type> <name>CTX_PTR</name>;</typedef>

<struct_decl>struct <name>CPpmd7_Node_</name>;</struct_decl>

<typedef>typedef
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<type><name><name>struct</name> <name>CPpmd7_Node_</name></name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>UInt32</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>CPpmd7_Node_Ref</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CPpmd7_Node_</name>
<block>{
<decl_stmt><decl><type><name>UInt16</name></type> <name>Stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>NU</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>Next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>Prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>CPpmd7_Node</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE</name><parameter_list>(<parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd7_Node *)(p-&gt;Base + (offs)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update1</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update1_0</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update2</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_UpdateBin</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CPpmd_See</name> <modifier>*</modifier></type><name>Ppmd7_MakeEscFreq</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>numMasked</name></decl></parameter>,
<parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Construct</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PPMD_NUM_INDEXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Units2Indx</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>i</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>--</operator><name>step</name></expr>)</condition>;</do>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Indx2Units</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>NS2BSIndx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>NS2BSIndx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>NS2BSIndx</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>NS2BSIndx</name></name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>NS2Indx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>NS2Indx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>++</operator><name>m</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>HB2Flag</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>HB2Flag</name></name> <operator>+</operator> <literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal> <operator>-</operator> <literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Free</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>Base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bool</name></type> <name>Ppmd7_Alloc</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Base</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <name>size</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>UNIT_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Ppmd7_Free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>AlignOffset</name></name> <operator>=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Base</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>AlignOffset</name></name> <operator>+</operator> <name>size</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <name>UNIT_SIZE</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InsertNode</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>CPpmd_Void_Ref</name> <operator>*</operator><operator>)</operator><name>node</name><operator>)</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>RemoveNode</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_Void_Ref</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>CPpmd_Void_Ref</name> <operator>*</operator><operator>)</operator><call><name>Ppmd7_GetPtr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SplitBlock</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>oldIndx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>newIndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nu</name> <init>= <expr><call><name>I2U</name><argument_list>(<argument><expr><name>oldIndx</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>I2U</name><argument_list>(<argument><expr><name>newIndx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Byte</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <call><name>U2B</name><argument_list>(<argument><expr><call><name>I2U</name><argument_list>(<argument><expr><name>newIndx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>I2U</name><argument_list>(<argument><expr><name>i</name> <operator>=</operator> <call><name>U2I</name><argument_list>(<argument><expr><name>nu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nu</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name> <init>= <expr><call><name>I2U</name><argument_list>(<argument><expr><operator>--</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Byte</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator> <operator>+</operator> <call><name>U2B</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nu</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GlueFreeBlocks</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PPMD_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CPpmd7_Node</name></type> <name>headItem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>head</name> <init>= <expr><operator>&amp;</operator><name>headItem</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>head</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>AlignOffset</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>n</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>GlueCount</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PPMD_NUM_INDEXES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt16</name></type> <name>nu</name> <init>= <expr><call><name>I2U</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>next</name> <init>= <expr><operator>(</operator><name>CPpmd7_Node_Ref</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7_Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>NODE</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NODE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>CPpmd7_Node_Ref</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>Stamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>NU</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><name>nu</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>NODE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Stamp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NODE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Next</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NODE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Prev</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>CPpmd7_Node</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name><operator>)</operator><operator>-&gt;</operator><name>Stamp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>n</name> <operator>!=</operator> <name>head</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7_Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>NODE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nu</name> <init>= <expr><operator>(</operator><name>UInt32</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>NU</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7_Node</name> <modifier>*</modifier></type><name>node2</name> <init>= <expr><call><name>NODE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nu</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nu</name> <operator>+=</operator> <name><name>node2</name><operator>-&gt;</operator><name>NU</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node2</name><operator>-&gt;</operator><name>Stamp</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nu</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>NODE</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>Prev</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Next</name> <operator>=</operator> <name><name>node2</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NODE</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>Next</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Prev</name> <operator>=</operator> <name><name>node2</name><operator>-&gt;</operator><name>Prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>NU</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><name>nu</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>NODE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Next</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>head</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7_Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>NODE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7_Node_Ref</name></type> <name>next</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>Next</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>nu</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>NU</name></name></expr>;</init> <condition><expr><name>nu</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>nu</name> <operator>-=</operator> <literal type="number">128</literal></expr><operator>,</operator> <expr><name>node</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>PPMD_NUM_INDEXES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><call><name>I2U</name><argument_list>(<argument><expr><name>i</name> <operator>=</operator> <call><name>U2I</name><argument_list>(<argument><expr><name>nu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nu</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name> <init>= <expr><call><name>I2U</name><argument_list>(<argument><expr><operator>--</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>node</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>nu</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AllocUnitsRare</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>retVal</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>GlueCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GlueFreeBlocks</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>RemoveNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>indx</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>PPMD_NUM_INDEXES</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>numBytes</name> <init>= <expr><call><name>U2B</name><argument_list>(<argument><expr><call><name>I2U</name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>GlueCount</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>UnitsStart</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>Text</name></name><operator>)</operator> <operator>&gt;</operator> <name>numBytes</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>UnitsStart</name></name> <operator>-=</operator> <name>numBytes</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>RemoveNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SplitBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>retVal</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retVal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AllocUnits</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>numBytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>RemoveNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>numBytes</name> <operator>=</operator> <call><name>U2B</name><argument_list>(<argument><expr><call><name>I2U</name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>numBytes</name> <operator>&lt;=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>retVal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name> <operator>+=</operator> <name>numBytes</name></expr>;</expr_stmt>
<return>return <expr><name>retVal</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>AllocUnitsRare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MyMem12Cpy</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ UInt32 *d = (UInt32 *)dest; const UInt32 *s = (const UInt32 *)src; UInt32 n = num; do { d[0] = s[0]; d[1] = s[1]; d[2] = s[2]; s += 3; d += 3; } while(--n); }</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ShrinkUnits</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>oldNU</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>newNU</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i0</name> <init>= <expr><call><name>U2I</name><argument_list>(<argument><expr><name>oldNU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i1</name> <init>= <expr><call><name>U2I</name><argument_list>(<argument><expr><name>newNU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i0</name> <operator>==</operator> <name>i1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>oldPtr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>RemoveNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MyMem12Cpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldPtr</name></expr></argument>, <argument><expr><name>newNU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldPtr</name></expr></argument>, <argument><expr><name>i0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SplitBlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldPtr</name></expr></argument>, <argument><expr><name>i0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>oldPtr</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESSOR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CPpmd_Void_Ref)((p)-&gt;SuccessorLow | ((UInt32)(p)-&gt;SuccessorHigh &lt;&lt; 16)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetSuccessor</name><parameter_list>(<parameter><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>CPpmd_Void_Ref</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>SuccessorLow</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name>v</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>SuccessorHigh</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><operator>(</operator><name>v</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RestartModel</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Text</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>Base</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>AlignOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>Text</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>Size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>UnitsStart</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>Size</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>/</operator> <name>UNIT_SIZE</name> <operator>*</operator> <literal type="number">7</literal> <operator>*</operator> <name>UNIT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>GlueCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MaxOrder</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>RunLength</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>InitRL</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>Int32</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>MaxOrder</name></name> <operator>&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>MaxOrder</name></name></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name> <operator>=</operator> <operator>(</operator><name>CTX_PTR</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>-=</operator> <name>UNIT_SIZE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <operator>(</operator><name>CPpmd_State</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name> <operator>+=</operator> <call><name>U2B</name><argument_list>(<argument><expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Stats</name></name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt16</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>BinSumm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt16</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name>PPMD_BIN_SCALE</name> <operator>-</operator> <name><name>kInitBinEsc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>m</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_See</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>See</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Summ</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Shift</name></name> <operator>=</operator> <name>PPMD_PERIOD_BITS</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Count</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxOrder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MaxOrder</name></name> <operator>=</operator> <name>maxOrder</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>DummySee</name><operator>.</operator><name>Shift</name></name> <operator>=</operator> <name>PPMD_PERIOD_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>DummySee</name><operator>.</operator><name>Summ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>DummySee</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CTX_PTR</name></type> <name>CreateSuccessors</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Bool</name></type> <name>skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name></type> <name>upState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTX_PTR</name></type> <name>c</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_Byte_Ref</name></type> <name>upBranch</name> <init>= <expr><operator>(</operator><name>CPpmd_Byte_Ref</name><operator>)</operator><call><name>SUCCESSOR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><name>PPMD7_MAX_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numPs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><index>[<expr><name>numPs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>Suffix</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_Void_Ref</name></type> <name>successor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>SUFFIX</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <call><name>STATS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ONE_STATE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>successor</name> <operator>=</operator> <call><name>SUCCESSOR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>successor</name> <operator>!=</operator> <name>upBranch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>CTX</name><argument_list>(<argument><expr><name>successor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>numPs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ps</name><index>[<expr><name>numPs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>upState</name><operator>.</operator><name>Symbol</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>Byte</name> <operator>*</operator><operator>)</operator><call><name>Ppmd7_GetPtr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>upBranch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>upState</name></expr></argument>, <argument><expr><name>upBranch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>upState</name><operator>.</operator><name>Freq</name></name> <operator>=</operator> <call><name>ONE_STATE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Freq</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>cf</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <call><name>STATS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>!=</operator> <name><name>upState</name><operator>.</operator><name>Symbol</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <name>cf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upState</name><operator>.</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>cf</name> <operator>&lt;=</operator> <name>s0</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>cf</name> <operator>&gt;</operator> <name>s0</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>cf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>s0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>s0</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>numPs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>CTX_PTR</name></type> <name>c1</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>LoUnit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>CTX_PTR</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>HiUnit</name></name> <operator>-=</operator> <name>UNIT_SIZE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FreeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>CTX_PTR</name><operator>)</operator><call><name>RemoveNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>CTX_PTR</name><operator>)</operator><call><name>AllocUnitsRare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>ONE_STATE</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>upState</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>Suffix</name></name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><operator>--</operator><name>numPs</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>REF</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SwapStates</name><parameter_list>(<parameter><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>t1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <operator>*</operator><name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateModel</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_Void_Ref</name></type> <name>successor</name></decl>, <decl><type ref="prev"/><name>fSuccessor</name> <init>= <expr><call><name>SUCCESSOR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTX_PTR</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;</operator> <name>MAX_FREQ</name> <operator>/</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>SUFFIX</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ONE_STATE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>STATS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>)</condition>
<block>{<block_content>
<do>do <block>{<block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Freq</name> <operator>&gt;=</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Freq</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SwapStates</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;</operator> <name>MAX_FREQ</name> <operator>-</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name> <operator>=</operator> <call><name>CreateSuccessors</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>, <argument><expr><call><name>REF</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>Text</name></name><operator>++</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>successor</name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Text</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>UnitsStart</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fSuccessor</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fSuccessor</name> <operator>&lt;=</operator> <name>successor</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CTX_PTR</name></type> <name>cs</name> <init>= <expr><call><name>CreateSuccessors</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fSuccessor</name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>successor</name> <operator>=</operator> <name>fSuccessor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Text</name></name> <operator>-=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>, <argument><expr><name>successor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fSuccessor</name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>-</operator> <operator>(</operator><name>ns</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>SUFFIX</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ns1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>cf</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ns1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ns1</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>oldNU</name> <init>= <expr><name>ns1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><call><name>U2I</name><argument_list>(<argument><expr><name>oldNU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name>U2I</name><argument_list>(<argument><expr><name>oldNU</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>AllocUnits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>oldPtr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oldPtr</name> <operator>=</operator> <call><name>STATS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MyMem12Cpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldPtr</name></expr></argument>, <argument><expr><name>oldNU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldPtr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Stats</name></name> <operator>=</operator> <call><name>STATS_REF</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ns1</name> <operator>&lt;</operator> <name>ns</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>ns1</name> <operator>&lt;=</operator> <name>ns</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>*</operator> <name>ns1</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>CPpmd_State</name><operator>*</operator><operator>)</operator><call><name>AllocUnits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RestartModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><call><name>ONE_STATE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Stats</name></name> <operator>=</operator> <call><name>REF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;</operator> <name>MAX_FREQ</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <name>MAX_FREQ</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>InitEsc</name></name> <operator>+</operator> <operator>(</operator><name>ns</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><name>s0</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cf</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>*</operator> <name>sf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>cf</name> <operator>&gt;</operator> <name>sf</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cf</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>sf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>cf</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>*</operator> <name>sf</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cf</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>*</operator> <name>sf</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cf</name> <operator>&gt;=</operator> <literal type="number">15</literal> <operator>*</operator> <name>sf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+</operator> <name>cf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>STATS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ns1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetSuccessor</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>successor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><name>cf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name>ns1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <call><name>CTX</name><argument_list>(<argument><expr><name>fSuccessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Rescale</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>adder</name></decl>, <decl><type ref="prev"/><name>sumFreq</name></decl>, <decl><type ref="prev"/><name>escFreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>STATS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>stats</name></expr>;</condition> <incr><expr><name>s</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>escFreq</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>adder</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+</operator> <name>adder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sumFreq</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>escFreq</name> <operator>-=</operator> <operator>(</operator><operator>++</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Freq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+</operator> <name>adder</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sumFreq</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Freq</name> <operator>&gt;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Freq</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>s1</name></expr></init></decl>;</decl_stmt>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>--</operator><name>s1</name> <operator>!=</operator> <name>stats</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>.</operator><name>Freq</name></name> <operator>&gt;</operator> <name><name>s1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Freq</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>s1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numStats</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>(</operator><operator>--</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Freq</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>escFreq</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>stats</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><name><name>tmp</name><operator>.</operator><name>Freq</name></name> <operator>-</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>Freq</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>escFreq</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>escFreq</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>InsertNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><call><name>U2I</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>numStats</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <call><name>ONE_STATE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n0</name> <operator>=</operator> <operator>(</operator><name>numStats</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n0</name> <operator>!=</operator> <name>n1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Stats</name></name> <operator>=</operator> <call><name>STATS_REF</name><argument_list>(<argument><expr><call><name>ShrinkUnits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name>sumFreq</name> <operator>+</operator> <name>escFreq</name> <operator>-</operator> <operator>(</operator><name>escFreq</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <call><name>STATS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CPpmd_See</name> <modifier>*</modifier></type><name>Ppmd7_MakeEscFreq</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>numMasked</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>escFreq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_See</name> <modifier>*</modifier></type><name>see</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nonMasked</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <name>numMasked</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>see</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>See</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>NS2Indx</name><index>[<expr><name>nonMasked</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>nonMasked</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>SUFFIX</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>NumStats</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name><operator>)</operator> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>&lt;</operator> <literal type="number">11</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name><operator>)</operator> <operator>+</operator>
<literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>numMasked</name> <operator>&gt;</operator> <name>nonMasked</name><operator>)</operator> <operator>+</operator>
<name><name>p</name><operator>-&gt;</operator><name>HiBitsFlag</name></name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>&gt;&gt;</operator> <name><name>see</name><operator>-&gt;</operator><name>Shift</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>escFreq</name> <operator>=</operator> <name>r</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>see</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>DummySee</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>escFreq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>see</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NextContext</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CTX_PTR</name></type> <name>c</name> <init>= <expr><call><name>CTX</name><argument_list>(<argument><expr><call><name>SUCCESSOR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>Byte</name> <operator>*</operator><operator>)</operator><name>c</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>Text</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MaxContext</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UpdateModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update1</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Freq</name> <operator>&gt;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Freq</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SwapStates</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <operator>--</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&gt;</operator> <name>MAX_FREQ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Rescale</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>NextContext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update1_0</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>RunLength</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <name>MAX_FREQ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Rescale</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>NextContext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_UpdateBin</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&lt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>RunLength</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NextContext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_Update2</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Freq</name></name> <operator>+=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <name>MAX_FREQ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Rescale</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>RunLength</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>InitRL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateModel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Bool</name></type> <name>Ppmd_RangeDec_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>Bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name><name>p</name><operator>-&gt;</operator><name>Stream</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>&lt;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bool</name></type> <name>Ppmd7z_RangeDec_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>-&gt;</operator><name>Stream</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Stream</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Ppmd_RangeDec_Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Bool</name></type> <name>PpmdRAR_RangeDec_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Ppmd_RangeDec_Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Bottom</name></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UInt32</name></type> <name>Range_GetThreshold</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CPpmd7z_RangeDec</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>Low</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>/=</operator> <name>total</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Range_Normalize</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>^</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>Range</name></name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>kTopValue</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>Bottom</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Bottom</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name><name>p</name><operator>-&gt;</operator><name>Stream</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Range_Decode_7z</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CPpmd7z_RangeDec</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>-=</operator> <name>start</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>Range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>*=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Range_Normalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Range_Decode_RAR</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CPpmd7z_RangeDec</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>+=</operator> <name>start</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>Range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>*=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Range_Normalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UInt32</name></type> <name>Range_DecodeBit_7z</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CPpmd7z_RangeDec</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>newBound</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>*</operator> <name>size0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>symbol</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>&lt;</operator> <name>newBound</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>=</operator> <name>newBound</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Code</name></name> <operator>-=</operator> <name>newBound</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>-=</operator> <name>newBound</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Range_Normalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UInt32</name></type> <name>Range_DecodeBit_RAR</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CPpmd7z_RangeDec</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>GetThreshold</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PPMD_BIN_SCALE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&lt;</operator> <name>size0</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>Decode</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>Decode</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size0</name></expr></argument>, <argument><expr><name>PPMD_BIN_SCALE</name> <operator>-</operator> <name>size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7z_RangeDec_CreateVTable</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>GetThreshold</name></name> <operator>=</operator> <name>Range_GetThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>Decode</name></name> <operator>=</operator> <name>Range_Decode_7z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>DecodeBit</name></name> <operator>=</operator> <name>Range_DecodeBit_7z</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PpmdRAR_RangeDec_CreateVTable</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeDec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>GetThreshold</name></name> <operator>=</operator> <name>Range_GetThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>Decode</name></name> <operator>=</operator> <name>Range_Decode_RAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>DecodeBit</name></name> <operator>=</operator> <name>Range_DecodeBit_RAR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((signed char *)charMask)[sym]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Ppmd7_DecodeSymbol</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>IPpmd7_RangeDec</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>charMask</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>Ppmd7_GetStats</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>hiCnt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <call><name><name>rc</name><operator>-&gt;</operator><name>GetThreshold</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>hiCnt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Byte</name></type> <name>symbol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>Decode</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update1_0</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hiCnt</name> <operator>+=</operator> <operator>(</operator><operator>++</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Freq</name><operator>)</operator> <operator>&gt;</operator> <name>count</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Byte</name></type> <name>symbol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>Decode</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>hiCnt</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>HiBitsFlag</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>HB2Flag</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>Decode</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>hiCnt</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>-</operator> <name>hiCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PPMD_SetAllBitsIn256Bytes</name><argument_list>(<argument><expr><name>charMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><operator>(</operator><operator>--</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Symbol</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>UInt16</name> <modifier>*</modifier></type><name>prob</name> <init>= <expr><call><name>Ppmd7_GetBinSumm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>rc</name><operator>-&gt;</operator><name>DecodeBit</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Byte</name></type> <name>symbol</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>prob</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><call><name>PPMD_UPDATE_PROB_0</name><argument_list>(<argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <call><name>Ppmd7Context_OneState</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>Symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_UpdateBin</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>prob</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><call><name>PPMD_UPDATE_PROB_1</name><argument_list>(<argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>InitEsc</name></name> <operator>=</operator> <name><name>PPMD7_kExpEscape</name><index>[<expr><operator>*</operator><name>prob</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PPMD_SetAllBitsIn256Bytes</name><argument_list>(<argument><expr><name>charMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><call><name>Ppmd7Context_OneState</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Symbol</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>freqSum</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>hiCnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_See</name> <modifier>*</modifier></type><name>see</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>numMasked</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <call><name>Ppmd7_GetContext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>==</operator> <name>numMasked</name></expr>)</condition>;</do>
<expr_stmt><expr><name>hiCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>Ppmd7_GetStats</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <name>numMasked</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hiCnt</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&amp;</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>i</name> <operator>!=</operator> <name>num</name></expr>)</condition>;</do>

<expr_stmt><expr><name>see</name> <operator>=</operator> <call><name>Ppmd7_MakeEscFreq</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numMasked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freqSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freqSum</name> <operator>+=</operator> <name>hiCnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>rc</name><operator>-&gt;</operator><name>GetThreshold</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>freqSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>hiCnt</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Byte</name></type> <name>symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier><modifier>*</modifier></type><name>pps</name> <init>= <expr><name>ps</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>hiCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>hiCnt</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>pps</name><operator>)</operator><operator>-&gt;</operator><name>Freq</name></name><operator>)</operator> <operator>&lt;=</operator> <name>count</name></expr>;</condition> <incr><expr><name>pps</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>pps</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>Decode</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>hiCnt</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd_See_Update</name><argument_list>(<argument><expr><name>see</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update2</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>freqSum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>Decode</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>hiCnt</name></expr></argument>, <argument><expr><name>freqSum</name> <operator>-</operator> <name>hiCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>+</operator> <name>freqSum</name><operator>)</operator></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>Symbol</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kTopValue</name></cpp:macro> <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7z_RangeEnc_Init</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>CacheSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RangeEnc_ShiftLow</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UInt32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&lt;</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><literal type="number">0xFF000000</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Byte</name></type> <name>temp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>Cache</name></name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>Stream</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>Stream</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><name>temp</name> <operator>+</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>CacheSize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Cache</name></name> <operator>=</operator> <operator>(</operator><name>Byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>CacheSize</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>UInt32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RangeEnc_Encode</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>+=</operator> <operator>(</operator><name>UInt64</name><operator>)</operator><name>start</name> <operator>*</operator> <operator>(</operator><name>UInt64</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>/=</operator> <name>total</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>*=</operator> <name>size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;</operator> <name>kTopValue</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RangeEnc_ShiftLow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RangeEnc_EncodeBit_0</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>*</operator> <name>size0</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;</operator> <name>kTopValue</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RangeEnc_ShiftLow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RangeEnc_EncodeBit_1</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>size0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>newBound</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>*</operator> <name>size0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Low</name></name> <operator>+=</operator> <name>newBound</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>-=</operator> <name>newBound</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;</operator> <name>kTopValue</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RangeEnc_ShiftLow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7z_RangeEnc_FlushData</name><parameter_list>(<parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RangeEnc_ShiftLow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name><parameter_list>(<parameter><type><name>sym</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((signed char *)charMask)[sym]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Ppmd7_EncodeSymbol</name><parameter_list>(<parameter><decl><type><name>CPpmd7</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>CPpmd7z_RangeEnc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>charMask</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>Ppmd7_GetStats</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>==</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RangeEnc_Encode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update1_0</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Symbol</name> <operator>==</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RangeEnc_Encode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>Freq</name></name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>HiBitsFlag</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>HB2Flag</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name><operator>-&gt;</operator><name>Symbol</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PPMD_SetAllBitsIn256Bytes</name><argument_list>(<argument><expr><name>charMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><operator>(</operator><operator>--</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>Symbol</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>RangeEnc_Encode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name> <operator>-</operator> <name>sum</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>SummFreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>UInt16</name> <modifier>*</modifier></type><name>prob</name> <init>= <expr><call><name>Ppmd7_GetBinSumm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>Ppmd7Context_OneState</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name> <operator>==</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RangeEnc_EncodeBit_0</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>prob</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><call><name>PPMD_UPDATE_PROB_0</name><argument_list>(<argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_UpdateBin</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RangeEnc_EncodeBit_1</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>prob</name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><call><name>PPMD_UPDATE_PROB_1</name><argument_list>(<argument><expr><operator>*</operator><name>prob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>InitEsc</name></name> <operator>=</operator> <name><name>PPMD7_kExpEscape</name><index>[<expr><operator>*</operator><name>prob</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PPMD_SetAllBitsIn256Bytes</name><argument_list>(<argument><expr><name>charMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>PrevSuccess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>escFreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_See</name> <modifier>*</modifier></type><name>see</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numMasked</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>OrderFall</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name> <operator>=</operator> <call><name>Ppmd7_GetContext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>Suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name> <operator>==</operator> <name>numMasked</name></expr>)</condition>;</do>

<expr_stmt><expr><name>see</name> <operator>=</operator> <call><name>Ppmd7_MakeEscFreq</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numMasked</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>escFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>Ppmd7_GetStats</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>MinContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>MinContext</name><operator>-&gt;</operator><name>NumStats</name></name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>low</name> <init>= <expr><name>sum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd_State</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>MASK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>Symbol</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>RangeEnc_Encode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>Freq</name></name></expr></argument>, <argument><expr><name>sum</name> <operator>+</operator> <name>escFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd_See_Update</name><argument_list>(<argument><expr><name>see</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>FoundState</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Ppmd7_Update2</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>Freq</name></name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>MASK</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MASK</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>--</operator><name>i</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>RangeEnc_Encode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>escFreq</name></expr></argument>, <argument><expr><name>sum</name> <operator>+</operator> <name>escFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>=</operator> <operator>(</operator><name>UInt16</name><operator>)</operator><operator>(</operator><name><name>see</name><operator>-&gt;</operator><name>Summ</name></name> <operator>+</operator> <name>sum</name> <operator>+</operator> <name>escFreq</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>IPpmd7</name></type> <name>__archive_ppmd7_functions</name> <init>=
<expr><block>{
<expr><operator>&amp;</operator><name>Ppmd7_Construct</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7_Alloc</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7_Free</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7_Init</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7z_RangeDec_CreateVTable</name></expr>,
<expr><operator>&amp;</operator><name>PpmdRAR_RangeDec_CreateVTable</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7z_RangeDec_Init</name></expr>,
<expr><operator>&amp;</operator><name>PpmdRAR_RangeDec_Init</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7_DecodeSymbol</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7z_RangeEnc_Init</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7z_RangeEnc_FlushData</name></expr>,
<expr><operator>&amp;</operator><name>Ppmd7_EncodeSymbol</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
