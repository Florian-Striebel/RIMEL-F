<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_random.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARC4RANDOM_BUF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>arc4random_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_random_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINCRYPT_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>archive_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hProv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hProv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,
<argument><expr><name>CRYPT_VERIFYCONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>NTE_BAD_KEYSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hProv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>PROV_RSA_FULL</name></expr></argument>, <argument><expr><name>CRYPT_NEWKEYSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>CryptGenRandom</name><argument_list>(<argument><expr><name>hProv</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hProv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_FAILED</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>arc4random_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARC4RANDOM_BUF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>arc4_stream</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOMDEV</name></cpp:macro> <cpp:value>"/dev/urandom"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYSIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>arc4random_mtx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARC4_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;arc4random_mtx);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARC4_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;arc4random_mtx);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARC4_LOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARC4_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rs_initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>arc4_stream</name></name></type> <name>rs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>arc4_stir_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>arc4_count</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>arc4_getbyte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>arc4_stir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arc4_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>arc4_addrandom</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>si</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>rs</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>=</operator> <operator>(</operator><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>+</operator> <name>si</name> <operator>+</operator> <name><name>dat</name><index>[<expr><name>n</name> <operator>%</operator> <name>datlen</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>i</name></name></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arc4_stir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rnd</name><index>[<expr><name>KEYSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>rdat</name></decl>;</struct>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs_initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>arc4_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rs_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>RANDOMDEV</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdat</name></expr></argument>, <argument><expr><name>KEYSIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>KEYSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdat</name><operator>.</operator><name>tv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rdat</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>arc4_addrandom</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rdat</name></expr></argument>, <argument><expr><name>KEYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3072</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>arc4_getbyte</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>arc4_count</name> <operator>=</operator> <literal type="number">1600000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arc4_stir_if_needed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arc4_count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>rs_initialized</name> <operator>||</operator> <name>arc4_stir_pid</name> <operator>!=</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arc4_stir_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arc4_stir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type>
<name>arc4_getbyte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>si</name></decl>, <decl><type ref="prev"/><name>sj</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>rs</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>=</operator> <operator>(</operator><name><name>rs</name><operator>.</operator><name>j</name></name> <operator>+</operator> <name>si</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sj</name> <operator>=</operator> <name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>i</name></name></expr>]</index></name> <operator>=</operator> <name>sj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><name><name>rs</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>rs</name><operator>.</operator><name>s</name><index>[<expr><operator>(</operator><name>si</name> <operator>+</operator> <name>sj</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arc4random_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>_buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_ARC4_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>arc4_stir_if_needed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>arc4_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>arc4_stir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>arc4_getbyte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_ARC4_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
