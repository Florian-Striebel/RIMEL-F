<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_filter_bzip2.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bzlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>private_data</name> <block>{
<decl_stmt><decl><type><name>bz_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>eof</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>bzip2_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bzip2_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bzip2_reader_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bzip2_reader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bzip2_reader_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">4000000</literal></expr></cpp:if>

<function><type><name>int</name></type>
<name>archive_read_support_compression_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>archive_read_support_filter_bzip2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>archive_read_support_filter_bzip2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_filter_bzip2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__archive_read_get_bidder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>bid</name></name> <operator>=</operator> <name>bzip2_reader_bid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>bzip2_reader_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>bzip2_reader_free</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Using external bzip2 program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bzip2_reader_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>self</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>bzip2_reader_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_checked</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>self</name></expr>;</expr_stmt>


<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bits_checked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"BZh"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits_checked</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'1'</literal> <operator>||</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits_checked</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\x31\x41\x59\x26\x53\x59"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits_checked</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\x17\x72\x45\x38\x50\x90"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits_checked</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>bits_checked</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>bzip2_reader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_program</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"bzip2 -d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_BZIP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>bzip2_reader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>out_block_size</name> <init>= <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>ARCHIVE_FILTER_BZIP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"bzip2"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_block</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>out_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate data for bzip2 decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name> <operator>=</operator> <name>out_block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name> <operator>=</operator> <name>out_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>bzip2_filter_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>bzip2_filter_close</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>bzip2_filter_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>decompressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>read_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block_size</name></name></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bzip2_reader_bid</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>bidder</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>decompressed</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name>
<operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>decompressed</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument> ,
<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>BZ_MEM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument> ,
<argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>ARCHIVE_ERRNO_MISC</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_PARAM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"invalid setup parameter"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_CONFIG_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"mis-compiled library"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing decompressor%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>detail</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">": "</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>read_buf</name> <operator>=</operator>
<call><name>__archive_read_filter_ahead</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"truncated bzip2 input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>read_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>decompressed</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name>
<operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>decompressed</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BZ2_bzDecompress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_filter_consume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>read_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_STREAM_END</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>BZ_OK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>decompressed</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name>
<operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>decompressed</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"bzip decompression failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>bzip2_filter_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>private_data</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator>struct <name>private_data</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>archive</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
