<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_private.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_READ_PRIVATE_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_READ_PRIVATE_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>

<struct_decl>struct <name>archive_read</name>;</struct_decl>
<struct_decl>struct <name>archive_read_filter_bidder</name>;</struct_decl>
<struct_decl>struct <name>archive_read_filter</name>;</struct_decl>
















<struct>struct <name>archive_read_filter_bidder</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bid</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>






<struct>struct <name>archive_read_filter</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>position</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier></type><name>bidder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>upstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>archive</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>skip</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sswitch</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iindex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_header</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>client_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>client_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>client_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>end_of_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>closed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>fatal</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>archive_read_data_node</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>begin_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>archive_read_client</name> <block>{
<decl_stmt><decl><type><name>archive_open_callback</name> <modifier>*</modifier></type><name>opener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_read_callback</name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_skip_callback</name> <modifier>*</modifier></type><name>skipper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_seek_callback</name> <modifier>*</modifier></type><name>seeker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_close_callback</name> <modifier>*</modifier></type><name>closer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_switch_callback</name> <modifier>*</modifier></type><name>switcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_data_node</name></name> <modifier>*</modifier></type><name>dataset</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>archive_read_passphrase</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_passphrase</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>archive_read_extract</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>ad</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>extract_progress</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extract_progress_user_data</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>archive_read</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name></type> <name>archive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>skip_file_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip_file_ino</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_client</name></name></type> <name>client</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name></type> <name><name>bidders</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bypass_filter_bidding</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>header_position</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_start_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_end_node</name></decl>;</decl_stmt>









<struct>struct <name>archive_format_descriptor</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bid</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_header</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data_skip</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_capabilties</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>has_encrypted_entries</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>formats</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_format_descriptor</name></name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_extract</name></name> <modifier>*</modifier></type><name>extract</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cleanup_archive_extract</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_passphrase</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read_passphrase</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>candidate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>archive_passphrase_callback</name> <modifier>*</modifier></type><name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl>;</decl_stmt>
}</block> <decl><name>passphrases</name></decl>;</struct>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>__archive_read_register_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>format_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bid</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>options</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_header</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_data_skip</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek_data</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_capabilities</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>has_encrypted_entries</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__archive_read_get_bidder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_read_filter_bidder</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>bidder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>__archive_read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>__archive_read_filter_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>__archive_read_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>__archive_read_filter_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>__archive_read_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>__archive_read_filter_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__archive_read_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read_filter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__archive_read_free_filters</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>archive_read_extract</name></name> <modifier>*</modifier></type><name>__archive_read_get_extract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>__archive_read_reset_passphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>__archive_read_next_passphrase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
