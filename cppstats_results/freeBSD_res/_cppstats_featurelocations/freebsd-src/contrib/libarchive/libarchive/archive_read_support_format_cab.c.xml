<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_cab.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>


<struct>struct <name>lzx_dec</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>w_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>w_buff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>copy_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>translation_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>translation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>block_type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBATIM_BLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_OFFSET_BLOCK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCOMPRESSED_BLOCK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_bytes_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rbytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rbytes_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_bits</name></decl>;</decl_stmt>

<struct>struct <name>lzx_pos_tbl</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>footer_bits</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>pos_tbl</name></decl>;</struct>



<struct>struct <name>lzx_br</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_BITS</name></cpp:macro> <cpp:value>(8 * sizeof(CACHE_TYPE))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>CACHE_TYPE</name></type> <name>cache_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cache_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>odd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>have_odd</name></decl>;</decl_stmt>
}</block> <decl><name>br</name></decl>;</struct>




<struct>struct <name>huffman</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>freq</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitlen</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>max_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tbl_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tree_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>
}</block> <decl><name>at</name></decl>, <decl><type ref="prev"/><name>lt</name></decl>, <decl><type ref="prev"/><name>mt</name></decl>, <decl><type ref="prev"/><name>pt</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>slots</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">290</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_BASE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_MAX</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<struct>struct <name>lzx_stream</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
}</block>;</struct>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_signature</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cbCabinet</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_coffFiles</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_versionMinor</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_versionMajor</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cFolders</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cFiles</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_flags</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_setID</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_iCabinet</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cbCFHeader</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cbCFFolder</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFHEADER_cbCFData</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFOLDER_coffCabStart</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFOLDER_cCFData</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFOLDER_typeCompress</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFOLDER_abReserve</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFILE_cbFile</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFILE_uoffFolderStart</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFILE_iFolder</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFILE_date_time</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFFILE_attribs</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFDATA_csum</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFDATA_cbData</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFDATA_cbUncomp</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>compression_name</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"NONE"</literal></expr>,
<expr><literal type="string">"MSZIP"</literal></expr>,
<expr><literal type="string">"Quantum"</literal></expr>,
<expr><literal type="string">"LZX"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>cfdata</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>compressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>compressed_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>uncompressed_bytes_remaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>uncompressed_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>read_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>unconsumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>memimage_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>memimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum_calculated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sum_extra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum_extra_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sum_ptr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cffolder</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cfdata_offset_in_cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cfdata_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>comptype</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPTYPE_NONE</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPTYPE_MSZIP</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPTYPE_QUANTUM</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPTYPE_LZX</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>compdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name></type> <name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cfdata_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>decompress_init</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cffile</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>folder</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iFoldCONTINUED_FROM_PREV</name></cpp:macro> <cpp:value>0xFFFD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iFoldCONTINUED_TO_NEXT</name></cpp:macro> <cpp:value>0xFFFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iFoldCONTINUED_PREV_AND_NEXT</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>attr</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_RDONLY</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_NAME_IS_UTF</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string</name></name></type> <name>pathname</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cfheader</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>files_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>folder_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>file_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREV_CABINET</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_CABINET</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESERVE_PRESENT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>setid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cabinet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cffolder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cfdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cffolder</name></name> <modifier>*</modifier></type><name>folder_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cffile</name></name> <modifier>*</modifier></type><name>file_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file_index</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cab</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_unconsumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_compressed_bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_uncompressed_bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cffolder</name></name> <modifier>*</modifier></type><name>entry_cffolder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cffile</name></name> <modifier>*</modifier></type><name>entry_cffile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>entry_cfdata</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>cab_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfheader</name></name></type> <name>cfheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_wstring</name></name></type> <name>ws</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>found_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>end_of_archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>end_of_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>end_of_entry_cleanup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>read_data_invoked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uncompressed_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_default_conversion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>format_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>stream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_stream</name></name></type> <name>xstrm</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_cab_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cab_skip_sfx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>cab_dos_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cab_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cab_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>cab_checksum_cfdata_4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>cab_checksum_cfdata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cab_checksum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cab_checksum_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cab_next_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cab_read_ahead_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cab_read_ahead_cfdata_none</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cab_read_ahead_cfdata_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cab_read_ahead_cfdata_lzx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cab_consume_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cab_minimum_consume_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_decode_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_read_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_decode_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lzx_decode_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lzx_translation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lzx_cleanup_bitstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_read_pre_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_read_bitlen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_huffman_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lzx_huffman_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lzx_make_huffman_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>lzx_decode_huffman</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type>
<name>archive_read_support_format_cab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_format_cab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cab</name> <operator>=</operator> <operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cab</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate CAB data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_ensure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>cab</name></expr></argument>,
<argument><expr><literal type="string">"cab"</literal></expr></argument>,
<argument><expr><name>archive_read_format_cab_bid</name></expr></argument>,
<argument><expr><name>archive_read_format_cab_options</name></expr></argument>,
<argument><expr><name>archive_read_format_cab_read_header</name></expr></argument>,
<argument><expr><name>archive_read_format_cab_read_data</name></expr></argument>,
<argument><expr><name>archive_read_format_cab_read_data_skip</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>archive_read_format_cab_cleanup</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_cab_magic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>







<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"MSCF\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>window</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>best_bid</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"MSCF\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">64</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>window</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>bytes_avail</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>find_cab_magic</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">64</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_FAILED</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cab</name> <operator>=</operator> <operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"hdrcharset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"cab: hdrcharset option needs a character-set name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>sconv</name></name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>sconv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_skip_sfx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>window</name></decl>;</decl_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't find out CAB header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>find_cab_magic</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>truncated_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated CAB header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>cab_strnlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_remaining</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>min</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>min</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_convert_path_separator_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_string</name></name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>;</decl_stmt>


<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mb</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>ATTR_NAME_IS_UTF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>cab_convert_path_separator_2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <call><name>archive_entry_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_wstrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>ws</name></name><operator>)</operator></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>ws</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>ws</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>ws</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>archive_entry_copy_pathname_w</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>ws</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfheader</name></name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_folder</name></decl>, <decl><type ref="prev"/><name>prev_folder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset32</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_CAB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"CAB"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cab</name> <operator>=</operator> <operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>found_header</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_skip_sfx</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>cfheader</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>CFHEADER_signature</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>CFHEADER_signature</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'S'</literal> <operator>||</operator>
<name><name>p</name><index>[<expr><name>CFHEADER_signature</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'C'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>CFHEADER_signature</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't find out CAB header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>total_bytes</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_cbCabinet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>files_offset</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_coffFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>CFHEADER_versionMinor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>CFHEADER_versionMajor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_cFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_cFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>setid</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_setID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>cabinet</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_iCabinet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>CFHEADER_iCabinet</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RESERVE_PRESENT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cfheader</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfheader</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFHEADER_cbCFHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfheader</name> <operator>&gt;</operator> <literal type="number">60000U</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>cffolder</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>CFHEADER_cbCFFolder</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>cfdata</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>CFHEADER_cbCFData</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>cfheader</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>cffolder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PREV_CABINET</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name><operator>+</operator><literal type="number">256</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cab_strnlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>used</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name><operator>+</operator><literal type="number">256</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cab_strnlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>used</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NEXT_CABINET</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name><operator>+</operator><literal type="number">256</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cab_strnlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>used</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name><operator>+</operator><literal type="number">256</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cab_strnlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>used</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name></name> <operator>=</operator> <operator>(</operator>struct <name>cffolder</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(
<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cffolder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RESERVE_PRESENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name><name>hd</name><operator>-&gt;</operator><name>cffolder</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>*=</operator> <name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cffolder</name></name> <modifier>*</modifier></type><name>folder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name> <operator>=</operator>
<call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFOLDER_coffCabStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>cfdata_count</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>CFFOLDER_cCFData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>CFFOLDER_typeCompress</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>compdata</name></name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>CFFOLDER_typeCompress</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>&lt;</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>compression_name</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>compression_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>compname</name></name> <operator>=</operator> <name><name>compression_name</name><index>[<expr><name><name>folder</name><operator>-&gt;</operator><name>comptype</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>compname</name></name> <operator>=</operator> <literal type="string">"UNKNOWN"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>RESERVE_PRESENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>hd</name><operator>-&gt;</operator><name>cffolder</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>hd</name><operator>-&gt;</operator><name>cffolder</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>offset32</name> <operator>&gt;=</operator> <name><name>folder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset32</name> <operator>=</operator> <name><name>folder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>decompress_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>





<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>hd</name><operator>-&gt;</operator><name>files_offset</name></name> <operator>-</operator> <name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid offset of CFFILE %jd &lt; %jd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>hd</name><operator>-&gt;</operator><name>files_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>file_array</name></name> <operator>=</operator> <operator>(</operator>struct <name>cffile</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(
<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cffile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>file_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_folder</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cffile</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>hd</name><operator>-&gt;</operator><name>file_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFILE_cbFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFILE_uoffFolderStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>folder</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFILE_iFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>cab_dos_time</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFILE_date_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFFILE_attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>cab_read_ahead_remaining</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cab_strnlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>avail</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>archive_string_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <literal type="number">0x7FFF8000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name>
<operator>&gt;</operator> <call><name>ARCHIVE_LITERAL_LL</name><argument_list>(<argument><expr><literal type="number">0x7FFF8000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cur_folder</name> <operator>=</operator> <name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_folder</name> <operator>=</operator> <name>cur_folder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset32</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>folder</name></name> <operator>&gt;=</operator> <name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cur_folder</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>folder</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>cur_folder</name> <operator>&lt;</operator> <name>prev_folder</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_folder</name> <operator>!=</operator> <name>prev_folder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_folder</name> <operator>=</operator> <name>cur_folder</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>offset32</name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset32</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><name>cur_folder</name></expr>]</index></name><operator>.</operator><name>cfdata_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>cabinet</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PREV_CABINET</name> <operator>|</operator> <name>NEXT_CABINET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Multivolume cabinet file is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_WARN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>invalid</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid CAB header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<label><name>nomem</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for CAB data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfheader</name></name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cffolder</name></name> <modifier>*</modifier></type><name>prev_folder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cffile</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cab</name> <operator>=</operator> <operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>found_header</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_read_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>found_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>cfheader</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>file_index</name></name> <operator>&gt;=</operator> <name><name>hd</name><operator>-&gt;</operator><name>file_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_archive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>&amp;</operator><name><name>hd</name><operator>-&gt;</operator><name>file_array</name><index>[<expr><name><name>hd</name><operator>-&gt;</operator><name>file_index</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_compressed_bytes_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_uncompressed_bytes_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>




<expr_stmt><expr><name>prev_folder</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>folder</name></name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>prev_folder</name> <operator>!=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>ATTR_NAME_IS_UTF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>=</operator>
<call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>sconv_utf8</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sconv</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>sconv_utf8</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>sconv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sconv</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>sconv</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cab</name><operator>-&gt;</operator><name>init_default_conversion</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>sconv_default</name></name> <operator>=</operator>
<call><name>archive_string_default_conversion_for_read</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>init_default_conversion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sconv</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>sconv_default</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cab_convert_path_separator_1</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_entry_copy_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>pathname</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>archive_strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>pathname</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sconv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname cannot be converted "</literal>
<literal type="string">"from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name>sconv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cab_convert_path_separator_2</name><argument_list>(<argument><expr><name>cab</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>attr</name></name> <operator>&amp;</operator> <name>ATTR_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFREG</name> <operator>|</operator> <literal type="number">0555</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFREG</name> <operator>|</operator> <literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>format_name</name></name></expr></argument>, <argument><expr><literal type="string">"CAB %d.%d (%s)"</literal></expr></argument>,
<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>compname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>format_name</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Cannot restore this file split in multivolume."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>read_data_invoked</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>bytes_skipped</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cab_next_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>bytes_skipped</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>bytes_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>read_data_invoked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>cab_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_archive</name></name> <operator>||</operator> <name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>cab_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>cab_checksum_cfdata_4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u32num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u32num</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>u32num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>u32num</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>^=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>sum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>cab_checksum_cfdata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>cab_checksum_cfdata_4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>bytes</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>bytes</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>b</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>b</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>sum</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>sum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cab_checksum_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name> <init>= <expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sumbytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sumbytes</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>sumbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra</name><index>[
<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sumbytes</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>=</operator> <call><name>cab_checksum_cfdata_4</name><argument_list>(
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sumbytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>odd</name> <init>= <expr><name>sumbytes</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sumbytes</name> <operator>-</operator> <name>odd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>=</operator> <call><name>cab_checksum_cfdata_4</name><argument_list>(
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sumbytes</name> <operator>-</operator> <name>odd</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>odd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>sumbytes</name> <operator>-</operator> <name>odd</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>=</operator> <name>odd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_checksum_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name> <init>= <expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>=</operator>
<call><name>cab_checksum_cfdata</name><argument_list>(<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra</name></name></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RESERVE_PRESENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>cfdata</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>=</operator> <call><name>cab_checksum_cfdata</name><argument_list>(
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage</name></name> <operator>+</operator> <name>CFDATA_cbData</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>!=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>sum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Checksum error CFDATA[%d] %"</literal> <name>PRIx32</name> <literal type="string">":%"</literal> <name>PRIx32</name> <literal type="string">" in %d bytes"</literal></expr></argument>,
<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name> <operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_next_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name> <init>= <expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>cfdata</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cfdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skip</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name>
<operator>-</operator> <name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>folder_index</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<expr_stmt><expr><name>folder_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<expr_stmt><expr><name>folder_index</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>folder_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>folder_index</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid offset of CFDATA in folder(%d) %jd &lt; %jd"</literal></expr></argument>,
<argument><expr><name>folder_index</name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>=</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_offset_in_cab</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name> <operator>&lt;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>=</operator> <name>cfdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_calculated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_extra_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RESERVE_PRESENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>cfdata</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFDATA_csum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFDATA_cbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>CFDATA_cbUncomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>=</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0x8000</literal><operator>+</operator><literal type="number">6144</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>&gt;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name> <operator>&lt;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_count</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>!=</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>==</operator> <name>COMPTYPE_NONE</name> <operator>&amp;&amp;</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>!=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage_size</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for CAB data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage_size</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>memimage</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>=</operator> <name>cfdata</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cfdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cfdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
<label><name>invalid</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid CFDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_next_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>comptype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COMPTYPE_NONE</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cab_read_ahead_cfdata_none</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>COMPTYPE_MSZIP</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cab_read_ahead_cfdata_deflate</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>COMPTYPE_LZX</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cab_read_ahead_cfdata_lzx</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported CAB compression : %s"</literal></expr></argument>,
<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>compname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_cfdata_none</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>







<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>avail</name> <operator>&gt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <operator>*</operator><name>avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_cfdata_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>mszip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>uavail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>eod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name>
<operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for CAB reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uavail</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uavail</name> <operator>==</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>uavail</name> <operator>-</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>decompress_init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Can't initialize deflate decompression."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>decompress_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>==</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mszip</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mszip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>eod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <name>uavail</name></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>!</operator><name>eod</name> <operator>&amp;&amp;</operator> <name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>&lt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator>
<name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-</operator> <name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mszip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <name>mszip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mszip</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x43</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x4b</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x4b</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mszip</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>bytes_avail</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mszip</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x4b</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mszip</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x43</literal> <operator>||</operator>
<name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x4b</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomszip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>+=</operator> <name>mszip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>-=</operator> <name>mszip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>+=</operator> <name>mszip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mszip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<expr_stmt><expr><name>eod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>zlibfailed</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>uavail</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uavail</name> <operator>&lt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid uncompressed size (%d &lt; %d)"</literal></expr></argument>,
<argument><expr><name>uavail</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name> <operator>&lt;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>zlibfailed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateSetDictionary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>zlibfailed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>uavail</name> <operator>-</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>=</operator> <name>uavail</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>

<label><name>zlibfailed</name>:</label>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Out of memory for deflate decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Deflate decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
<label><name>nomszip</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"CFDATA incorrect(no MSZIP signature)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_cfdata_deflate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"libarchive compiled without deflate support (no libz)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cab_read_ahead_cfdata_lzx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>uavail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name>
<operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for CAB reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uavail</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uavail</name> <operator>==</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>uavail</name> <operator>-</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>decompress_init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_decode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name></name></expr></argument>,
<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>compdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Can't initialize LZX decompression."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>decompress_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>lzx_cleanup_bitstream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <name>uavail</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_out</name></name> <operator>&lt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator>
<name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator>
<name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>-</operator> <name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated CAB file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name></name></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>==</operator> <name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_OK</name></expr>:</case>
<case>case <expr><name>ARCHIVE_EOF</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"LZX decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>uavail</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <call><name>truncated_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>sum_ptr</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>lzx_translation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name></name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>cfdata_index</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <name>uavail</name> <operator>-</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>=</operator> <name>uavail</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>cab_consume_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>consumed_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cbytes</name></decl>, <decl><type ref="prev"/><name>rbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rbytes</name> <operator>=</operator> <call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>consumed_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>avail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Invalid CFDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbytes</name> <operator>&gt;</operator> <name>rbytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name>rbytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rbytes</name> <operator>-=</operator> <name>cbytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name> <operator>==</operator> <name>iFoldCONTINUED_PREV_AND_NEXT</name> <operator>||</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name> <operator>==</operator> <name>iFoldCONTINUED_FROM_PREV</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cbytes</name> <operator>==</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>compressed_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_next_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<expr_stmt><expr><name>rbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>-=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_next_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffile</name><operator>-&gt;</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>iFoldCONTINUED_PREV_AND_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_TO_NEXT</name></expr>:</case>
<case>case <expr><name>iFoldCONTINUED_FROM_PREV</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>cbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cab_read_ahead_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <name>cbytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cab_minimum_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cbytes</name> <operator>-=</operator> <name>avail</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>consumed_bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>cab_minimum_consume_cfdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>consumed_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfdata</name></name> <modifier>*</modifier></type><name>cfdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cbytes</name></decl>, <decl><type ref="prev"/><name>rbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfdata</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rbytes</name> <operator>=</operator> <name>consumed_bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>==</operator> <name>COMPTYPE_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>consumed_bytes</name> <operator>&lt;</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name>consumed_bytes</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rbytes</name> <operator>-=</operator> <name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>-=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>-=</operator> <name>cbytes</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_avail</name></name> <operator>-</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>consumed_bytes</name> <operator>&lt;</operator> <name>cbytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name>consumed_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rbytes</name> <operator>-=</operator> <name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>read_offset</name></name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>uncompressed_bytes_remaining</name></name> <operator>-=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cab_checksum_update</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>cab_offset</name></name> <operator>+=</operator> <name>cbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>-=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cbytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfdata</name><operator>-&gt;</operator><name>compressed_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cab_checksum_finish</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rbytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cab_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>cab_read_ahead_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"Invalid CFDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes_avail</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_offset</name></name> <operator>+=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>==</operator> <name>COMPTYPE_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>&gt;</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cab</name> <operator>=</operator> <operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_archive</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cab</name><operator>-&gt;</operator><name>read_data_invoked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>bytes_skipped</name></name> <operator>+=</operator> <name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>cab_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cab_next_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>bytes_skipped</name> <operator>=</operator> <call><name>cab_consume_cfdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cffolder</name><operator>-&gt;</operator><name>comptype</name></name> <operator>==</operator> <name>COMPTYPE_NONE</name> <operator>&amp;&amp;</operator>
<name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>entry_cfdata</name><operator>-&gt;</operator><name>unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>cab</name><operator>-&gt;</operator><name>end_of_entry_cleanup</name></name> <operator>=</operator> <name><name>cab</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_cab_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cab</name></name> <modifier>*</modifier></type><name>cab</name> <init>= <expr><operator>(</operator>struct <name>cab</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cfheader</name></name> <modifier>*</modifier></type><name>hd</name> <init>= <expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>cfheader</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hd</name><operator>-&gt;</operator><name>folder_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cfdata</name><operator>.</operator><name>memimage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>folder_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>file_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cab</name><operator>-&gt;</operator><name>cfheader</name><operator>.</operator><name>file_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_string_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hd</name><operator>-&gt;</operator><name>file_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pathname</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>file_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cab</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lzx_decode_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>xstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_wstring_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cab</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cab</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>cab_dos_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>msTime</name></decl>, <decl><type ref="prev"/><name>msDate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msDate</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msTime</name> <operator>=</operator> <call><name>archive_le16dec</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>msDate</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>msDate</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>msDate</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name>msTime</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>msTime</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>msTime</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3e</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_decode_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>w_size</name></decl>, <decl><type ref="prev"/><name>w_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>, <decl><type ref="prev"/><name>footer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>base_inc</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>ARCHIVE_FAILED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>w_bits</name> <argument_list type="generic">&lt; <argument><expr><name>SLOT_BASE</name> <operator>||</operator> <name>w_bits</name></expr></argument> &gt;</argument_list></name> <name>SLOT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>




<expr_stmt><expr><name>w_size</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_slot</name> <operator>=</operator> <name><name>slots</name><index>[<expr><name>w_bits</name> <operator>-</operator> <name>SLOT_BASE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>w_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_mask</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>w_size</name> <operator>!=</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>w_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>footer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>footer</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>footer</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base_inc</name><index>[<expr><name>footer</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>footer</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>footer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>w_slot</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>footer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <name><name>base_inc</name><index>[<expr><name>footer</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>footer</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>footer</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>base</name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>footer</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>footer</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>footer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>base</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>footer_bits</name> <operator>=</operator> <name>footer</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>cache_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>cache_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzx_huffman_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzx_huffman_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzx_huffman_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>mt</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">256</literal><operator>+</operator><operator>(</operator><name>w_slot</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzx_huffman_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>lt</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">249</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzx_decode_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_huffman_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>at</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_huffman_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>pt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_huffman_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>mt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_huffman_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>lt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzx_translation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ds</name><operator>-&gt;</operator><name>translation</name></name> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0xE8</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>b</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cp</name></decl>, <decl><type ref="prev"/><name>displacement</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><name>cp</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>translation_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>displacement</name> <operator>=</operator> <name>value</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>displacement</name> <operator>=</operator> <name>value</name> <operator>+</operator> <name><name>ds</name><operator>-&gt;</operator><name>translation_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_le32enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>displacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_has</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail &gt;= n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_bits</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)((br)-&gt;cache_buffer &gt;&gt; ((br)-&gt;cache_avail - (n)))) &amp; cache_masks[n])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_bits_forced</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)((br)-&gt;cache_buffer &lt;&lt; ((n) - (br)-&gt;cache_avail))) &amp; cache_masks[n])</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_read_ahead_0</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lzx_br_has((br), (n)) || lzx_br_fillup(strm, br))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_read_ahead</name><parameter_list>(<parameter><type><name>strm</name></type></parameter>, <parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lzx_br_read_ahead_0((strm), (br), (n)) || lzx_br_has((br), (n)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_consume</name><parameter_list>(<parameter><type><name>br</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail -= (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_consume_unaligned_bits</name><parameter_list>(<parameter><type><name>br</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail &amp;= ~0x0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzx_br_is_unaligned</name><parameter_list>(<parameter><type><name>br</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((br)-&gt;cache_avail &amp; 0x0f)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>cache_masks</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00000003</literal></expr>, <expr><literal type="number">0x00000007</literal></expr>,
<expr><literal type="number">0x0000000F</literal></expr>, <expr><literal type="number">0x0000001F</literal></expr>, <expr><literal type="number">0x0000003F</literal></expr>, <expr><literal type="number">0x0000007F</literal></expr>,
<expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x000001FF</literal></expr>, <expr><literal type="number">0x000003FF</literal></expr>, <expr><literal type="number">0x000007FF</literal></expr>,
<expr><literal type="number">0x00000FFF</literal></expr>, <expr><literal type="number">0x00001FFF</literal></expr>, <expr><literal type="number">0x00003FFF</literal></expr>, <expr><literal type="number">0x00007FFF</literal></expr>,
<expr><literal type="number">0x0000FFFF</literal></expr>, <expr><literal type="number">0x0001FFFF</literal></expr>, <expr><literal type="number">0x0003FFFF</literal></expr>, <expr><literal type="number">0x0007FFFF</literal></expr>,
<expr><literal type="number">0x000FFFFF</literal></expr>, <expr><literal type="number">0x001FFFFF</literal></expr>, <expr><literal type="number">0x003FFFFF</literal></expr>, <expr><literal type="number">0x007FFFFF</literal></expr>,
<expr><literal type="number">0x00FFFFFF</literal></expr>, <expr><literal type="number">0x01FFFFFF</literal></expr>, <expr><literal type="number">0x03FFFFFF</literal></expr>, <expr><literal type="number">0x07FFFFFF</literal></expr>,
<expr><literal type="number">0x0FFFFFFF</literal></expr>, <expr><literal type="number">0x1FFFFFFF</literal></expr>, <expr><literal type="number">0x3FFFFFFF</literal></expr>, <expr><literal type="number">0x7FFFFFFF</literal></expr>,
<expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_br_fillup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lzx_br</name></name> <modifier>*</modifier></type><name>br</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>CACHE_BITS</name> <operator>-</operator> <name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>


<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>odd</name></name> <operator>=</operator> <operator>*</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>have_odd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<call><name>archive_le16dec</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzx_br_fixup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lzx_br</name></name> <modifier>*</modifier></type><name>br</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>CACHE_BITS</name> <operator>-</operator> <name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>br</name><operator>-&gt;</operator><name>have_odd</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>=</operator>
<operator>(</operator><name><name>br</name><operator>-&gt;</operator><name>cache_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>br</name><operator>-&gt;</operator><name>odd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>cache_avail</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name><operator>-&gt;</operator><name>have_odd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzx_cleanup_bitstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>cache_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>have_odd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_TRANSLATION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_TRANSLATION_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_BLOCK_TYPE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_BLOCK_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_ALIGNMENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_R0</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_R1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_R2</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_COPY_UNCOMP1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_COPY_UNCOMP2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_ALIGNED_OFFSET</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_VERBATIM</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_PRE_MAIN_TREE_256</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_MAIN_TREE_256</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_PRE_MAIN_TREE_REM</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_MAIN_TREE_REM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_RD_PRE_LENGTH_TREE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_LENGTH_TREE</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_MAIN</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_LENGTH</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_OFFSET</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_REAL_POS</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_COPY</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>error</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avail_in</name> <operator>=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_fixup</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>ST_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_read_blocks</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_written</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_decode_blocks</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>-=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_in</name></name> <operator>+=</operator> <name>avail_in</name> <operator>-</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_read_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ST_RD_TRANSLATION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_TRANSLATION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>translation</name></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ST_RD_TRANSLATION_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>translation</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_TRANSLATION_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>translation_size</name></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>translation_size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>translation_size</name></name> <operator>|=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ST_RD_BLOCK_TYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_BLOCK_TYPE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VERBATIM_BLOCK</name></expr>:</case>
<case>case <expr><name>ALIGNED_OFFSET_BLOCK</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_BLOCK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></switch>

<case>case <expr><name>ST_RD_BLOCK_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_BLOCK_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name> <operator>|=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_type</name></name> <operator>!=</operator> <name>UNCOMPRESSED_BLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>VERBATIM_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_VERBATIM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_ALIGNED_OFFSET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ST_RD_ALIGNMENT</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><call><name>lzx_br_is_unaligned</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzx_br_consume_unaligned_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_ALIGNMENT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_R0</name></expr>;</expr_stmt>

<case>case <expr><name>ST_RD_R0</name></expr>:</case>
<case>case <expr><name>ST_RD_R1</name></expr>:</case>
<case>case <expr><name>ST_RD_R2</name></expr>:</case>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>u16</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lzx_br_has</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name></expr></argument>, <argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>lzx_br_has</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u16</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_le16enc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name></expr></argument>, <argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>have_odd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>odd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>have_odd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>*</operator><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_RD_R0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_R1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_RD_R1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>r1</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_R2</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ST_RD_R2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>rbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>r2</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_COPY_UNCOMP1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ST_COPY_UNCOMP1</name></expr>)</condition>;</do>

<case>case <expr><name>ST_COPY_UNCOMP1</name></expr>:</case>



<while>while <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>w_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></while>

<case>case <expr><name>ST_COPY_UNCOMP2</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_COPY_UNCOMP2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_BLOCK_TYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>

<case>case <expr><name>ST_RD_ALIGNED_OFFSET</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>len_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_ALIGNED_OFFSET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>len_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>freq</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>at</name><operator>.</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><name>ST_RD_VERBATIM</name></expr>:</case>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_RD_PRE_MAIN_TREE_256</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_read_pre_tree</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_PRE_MAIN_TREE_256</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_MAIN_TREE_256</name></expr>:</case>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_read_bitlen</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_MAIN_TREE_256</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_RD_PRE_MAIN_TREE_REM</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_read_pre_tree</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_PRE_MAIN_TREE_REM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_MAIN_TREE_REM</name></expr>:</case>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_read_bitlen</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_MAIN_TREE_REM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>mt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_RD_PRE_LENGTH_TREE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_read_pre_tree</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_PRE_LENGTH_TREE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_LENGTH_TREE</name></expr>:</case>



<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzx_read_bitlen</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>lt</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_LENGTH_TREE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_make_huffman_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>lt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_MAIN</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">100</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<label><name>failed</name>:</label>
<return>return <expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_decode_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_br</name></name></type> <name>bre</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>br</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>at</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>at</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lt</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>lt</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mt</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>mt</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>lzx_pos_tbl</name></name> <modifier>*</modifier></type><name>pos_tbl</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>pos_tbl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>noutp</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>next_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>noutp</name> <operator>+</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>w_buff</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>w_buff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>at_bitlen</name> <init>= <expr><name><name>at</name><operator>-&gt;</operator><name>bitlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lt_bitlen</name> <init>= <expr><name><name>lt</name><operator>-&gt;</operator><name>bitlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mt_bitlen</name> <init>= <expr><name><name>mt</name><operator>-&gt;</operator><name>bitlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_bytes_avail</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at_max_bits</name> <init>= <expr><name><name>at</name><operator>-&gt;</operator><name>max_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lt_max_bits</name> <init>= <expr><name><name>lt</name><operator>-&gt;</operator><name>max_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mt_max_bits</name> <init>= <expr><name><name>mt</name><operator>-&gt;</operator><name>max_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>copy_len</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>copy_len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>copy_pos</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>copy_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_pos</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w_mask</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>w_mask</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w_size</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>w_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length_header</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>length_header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_bits</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>offset_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position_slot</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>position_slot</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r0</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>r1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>r2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>block_type</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>block_type</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ST_MAIN</name></expr>:</case>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_bytes_avail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ST_RD_BLOCK_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <name>bre</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name> <operator>=</operator>
<name>block_bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>copy_len</name></name> <operator>=</operator> <name>copy_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>copy_pos</name></name> <operator>=</operator> <name>copy_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>length_header</name></name> <operator>=</operator> <name>length_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>position_slot</name></name> <operator>=</operator> <name>position_slot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name> <operator>=</operator> <name>w_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>endp</name> <operator>-</operator> <name>noutp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>noutp</name> <operator>&gt;=</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>next_data</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>,
<argument><expr><name>mt_max_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_data</name>;</goto></block_content></block></if></if_stmt>





<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits_forced</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>mt_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>mt_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_has</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>mt_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>mt_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>UCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>w_buff</name><index>[<expr><name>w_pos</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_pos</name> <operator>=</operator> <operator>(</operator><name>w_pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>w_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>noutp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_bytes_avail</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>UCHAR_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length_header</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>position_slot</name> <operator>=</operator> <name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<case>case <expr><name>ST_LENGTH</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>length_header</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>,
<argument><expr><name>lt_max_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_LENGTH</name></expr>;</expr_stmt>
<goto>goto <name>next_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>lt</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits_forced</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>lt_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>lt_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_has</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>lt</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>lt_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>lt_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name>length_header</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>copy_len</name> <operator>&gt;</operator> <name>block_bytes_avail</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>



<switch>switch <condition>(<expr><name>position_slot</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_REAL_POS</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>copy_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_REAL_POS</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>copy_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_REAL_POS</name></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<expr_stmt><expr><name>offset_bits</name> <operator>=</operator>
<name><name>pos_tbl</name><index>[<expr><name>position_slot</name></expr>]</index></name><operator>.</operator><name>footer_bits</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<case>case <expr><name>ST_OFFSET</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>ALIGNED_OFFSET_BLOCK</name> <operator>&amp;&amp;</operator>
<name>offset_bits</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offbits</name> <init>= <expr><name>offset_bits</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offbits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_OFFSET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>next_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offbits</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>,
<argument><expr><name>offbits</name> <operator>+</operator> <name>at_max_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_OFFSET</name></expr>;</expr_stmt>
<goto>goto <name>next_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>at</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits_forced</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>,
<argument><expr><name>at_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>at_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_has</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><name>at</name></expr></argument>,
<argument><expr><call><name>lzx_br_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>at_max_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name><name>at_bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>copy_pos</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>,
<argument><expr><name>offset_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_OFFSET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>next_data</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offset_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bre</name></expr></argument>, <argument><expr><name>offset_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>copy_pos</name> <operator>+=</operator> <name><name>pos_tbl</name><index>[<expr><name>position_slot</name></expr>]</index></name><operator>.</operator><name>base</name> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r0</name> <operator>=</operator> <name>copy_pos</name></expr>;</expr_stmt>

<case>case <expr><name>ST_REAL_POS</name></expr>:</case>



<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <operator>(</operator><name>w_pos</name> <operator>-</operator> <name>copy_pos</name><operator>)</operator> <operator>&amp;</operator> <name>w_mask</name></expr>;</expr_stmt>

<case>case <expr><name>ST_COPY</name></expr>:</case>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>copy_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy_pos</name> <operator>&gt;</operator> <name>w_pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>w_size</name> <operator>-</operator> <name>copy_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>w_size</name> <operator>-</operator> <name>copy_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>w_size</name> <operator>-</operator> <name>w_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>w_size</name> <operator>-</operator> <name>w_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>noutp</name> <operator>+</operator> <name>l</name> <operator>&gt;=</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endp</name> <operator>-</operator> <name>noutp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>w_buff</name> <operator>+</operator> <name>copy_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>copy_pos</name> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>w_pos</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>w_pos</name> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>copy_pos</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>w_buff</name> <operator>+</operator> <name>w_pos</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>noutp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>w_buff</name> <operator>+</operator> <name>w_pos</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>li</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>li</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>noutp</name><index>[<expr><name>li</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>li</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>li</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>noutp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_pos</name> <operator>=</operator> <operator>(</operator><name>copy_pos</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <name>w_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_pos</name> <operator>=</operator> <operator>(</operator><name>w_pos</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <name>w_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_bytes_avail</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy_len</name> <operator>&lt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>copy_len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>noutp</name> <operator>&gt;=</operator> <name>endp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_COPY</name></expr>;</expr_stmt>
<goto>goto <name>next_data</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ST_MAIN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<label><name>failed</name>:</label>
<return>return <expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<label><name>next_data</name>:</label>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <name>bre</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>block_bytes_avail</name></name> <operator>=</operator> <name>block_bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>copy_len</name></name> <operator>=</operator> <name>copy_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>copy_pos</name></name> <operator>=</operator> <name>copy_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>length_header</name></name> <operator>=</operator> <name>length_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>offset_bits</name></name> <operator>=</operator> <name>offset_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>position_slot</name></name> <operator>=</operator> <name>position_slot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>w_pos</name></name> <operator>=</operator> <name>w_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>endp</name> <operator>-</operator> <name>noutp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_read_pre_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>loop</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>len_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>freq</name><index>[<expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_read_bitlen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lzx_stream</name></name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_dec</name></name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lzx_br</name></name> <modifier>*</modifier></type><name>br</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>br</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>same</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>loop</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>len_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>getdata</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rbits</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name><operator>)</operator></expr></argument>, <argument><expr><name>rbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>getdata</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>same</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>same</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>getdata</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>same</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>bitlen</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>same</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lzx_br_read_ahead</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>br</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>getdata</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>same</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rbits</name> <operator>=</operator> <call><name>lzx_br_bits</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lzx_decode_huffman</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>pt</name></name><operator>)</operator></expr></argument>, <argument><expr><name>rbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">17</literal><operator>)</operator> <operator>%</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>same</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <name>same</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>lzx_br_consume</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>pt</name><operator>.</operator><name>bitlen</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">17</literal><operator>)</operator> <operator>%</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>getdata</name>:</label>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_huffman_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tbl_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>hf</name><operator>-&gt;</operator><name>len_size</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>len_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>len_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>tbl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>tbl</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tbl_bits</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>tbl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>tbl_bits</name></name> <operator>=</operator> <name>tbl_bits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lzx_huffman_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>hf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>lzx_make_huffman_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>hf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bitlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bitptn</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>weight</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ptn</name></decl>, <decl><type ref="prev"/><name>tbl_size</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_avail</name></decl>;</decl_stmt>




<expr_stmt><expr><name>ptn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>w</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>w</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bitptn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ptn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptn</name> <operator>+=</operator> <name><name>hf</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptn</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxbits</name> <operator>&gt;</operator> <name><name>hf</name><operator>-&gt;</operator><name>tbl_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>max_bits</name></name> <operator>=</operator> <name>maxbits</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>maxbits</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ebits</name> <init>= <expr><literal type="number">16</literal> <operator>-</operator> <name>maxbits</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bitptn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>ebits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>ebits</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>tbl_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>hf</name><operator>-&gt;</operator><name>tbl_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>tbl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitlen</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>bitlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_avail</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>len_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>tree_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len_avail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bitlen</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>tbl_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptn</name> <operator>=</operator> <name><name>bitptn</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>weight</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bitptn</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>ptn</name> <operator>+</operator> <name>cnt</name><operator>)</operator> <operator>&gt;</operator> <name>tbl_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>tbl</name><index>[<expr><name>ptn</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>lzx_decode_huffman</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>huffman</name></name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>tbl</name><index>[<expr><name>rbits</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>hf</name><operator>-&gt;</operator><name>len_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
