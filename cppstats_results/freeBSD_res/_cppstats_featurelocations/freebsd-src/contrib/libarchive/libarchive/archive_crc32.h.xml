<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_crc32.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARCHIVE_CRC32_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE_CRC32_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBARCHIVE_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This header is only to be used internally to libarchive.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>crc32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc2</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>crc_tbl_inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>crc_tbl</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crc_tbl_inited</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>crc2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <operator>(</operator><name>crc2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xedb88320UL</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <operator>(</operator><name>crc2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>crc_tbl</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>crc2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>crc_tbl_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>^</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>crc_tbl</name><index>[<expr><operator>(</operator><name>crc</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>crc</name> <operator>^</operator> <literal type="number">0xffffffffUL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
