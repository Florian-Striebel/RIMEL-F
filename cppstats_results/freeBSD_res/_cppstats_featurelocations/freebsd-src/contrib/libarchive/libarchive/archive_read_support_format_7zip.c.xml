<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libarchive/libarchive/archive_read_support_format_7zip.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_platform.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bzlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzma.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_entry_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_ppmd7_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_read_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_endian.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive_crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7ZIP_SIGNATURE</name></cpp:macro> <cpp:value>"7z\xBC\xAF\x27\x1C"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFX_MIN_ADDR</name></cpp:macro> <cpp:value>0x27000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFX_MAX_ADDR</name></cpp:macro> <cpp:value>0x60000</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_COPY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_LZMA</name></cpp:macro> <cpp:value>0x030101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_LZMA2</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_DEFLATE</name></cpp:macro> <cpp:value>0x040108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_BZ2</name></cpp:macro> <cpp:value>0x040202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_PPMD</name></cpp:macro> <cpp:value>0x030401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_DELTA</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_CRYPTO_MAIN_ZIP</name></cpp:macro> <cpp:value>0x06F10101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_CRYPTO_RAR_29</name></cpp:macro> <cpp:value>0x06F10303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_CRYPTO_AES_256_SHA_256</name></cpp:macro> <cpp:value>0x06F10701</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_X86</name></cpp:macro> <cpp:value>0x03030103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_X86_BCJ2</name></cpp:macro> <cpp:value>0x0303011B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_POWERPC</name></cpp:macro> <cpp:value>0x03030205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_IA64</name></cpp:macro> <cpp:value>0x03030401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_ARM</name></cpp:macro> <cpp:value>0x03030501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_ARMTHUMB</name></cpp:macro> <cpp:value>0x03030701</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_7Z_SPARC</name></cpp:macro> <cpp:value>0x03030805</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEnd</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHeader</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kArchiveProperties</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAdditionalStreamsInfo</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMainStreamsInfo</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kFilesInfo</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kPackInfo</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kUnPackInfo</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSubStreamsInfo</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSize</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCRC</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kFolder</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCodersUnPackSize</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNumUnPackStream</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEmptyStream</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEmptyFile</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAnti</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kName</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCTime</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kATime</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMTime</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAttributes</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEncodedHeader</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kDummy</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>

<struct>struct <name>_7z_digests</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>defineds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>digests</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_7z_folder</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numCoders</name></decl>;</decl_stmt>
<struct>struct <name>_7z_coder</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numInStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numOutStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>propertiesSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>properties</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>coders</name></decl>;</struct>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numBindPairs</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>inIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>outIndex</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>bindPairs</name></decl>;</struct>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numPackedStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>packedStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numInStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numOutStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>unPackSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>digest_defined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numUnpackStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>skipped_bytes</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7z_coders_info</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numFolders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>folders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dataStreamIndex</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7z_pack_info</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numPackStreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_digests</name></name></type> <name>digest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>positions</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7z_substream_info</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>unpack_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>unpackSizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digestsDefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>digests</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7z_stream_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_pack_info</name></name></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_coders_info</name></name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_substream_info</name></name></type> <name>ss</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7z_header_info</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dataIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>emptyStreamBools</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>emptyFileBools</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>antiBools</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>attrBools</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7zip_entry</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf16name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>folderIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flg</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTIME_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_IS_SET</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_STREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mtime_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>atime_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ctime_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>attr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_7zip</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_is_being_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_is_encoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>header_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>header_crc32</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>header_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>seek_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>entries_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numFiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip_entry</name></name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry_names</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry_bytes_remaining</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>entry_crc32</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>end_of_entry</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBUFF_SIZE</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uncompressed_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uncompressed_buffer_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_buffer_bytes_remaining</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>stream_offset</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>folder_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>folder_outbytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pack_stream_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pack_stream_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pack_stream_inbytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pack_stream_bytes_unconsumed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>codec2</name></decl>;</decl_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>lzma_stream</name></type> <name>lzstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lzstream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bz_stream</name></type> <name>bzstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bzstream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_valid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ppmd7_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7</name></type> <name>ppmd7_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CPpmd7z_RangeDec</name></type> <name>range_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IByteIn</name></type> <name>bytein</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>avail_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>total_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overconsumed</name></decl>;</decl_stmt>
}</block> <decl><name>ppstream</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>ppmd7_valid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>bcj_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>odd_bcj_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>odd_bcj</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bcj_prevPosT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bcj_prevMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bcj_ip</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>main_stream_bytes_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>sub_stream_buff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>sub_stream_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_stream_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_stream_buff_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_stream_bytes_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_stream_bytes_remaining</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LZMA_PROB32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CProb</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CProb</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>CProb</name></type> <name><name>bcj2_p</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bcj2_prevByte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bcj2_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bcj2_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bcj2_outPos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>archive_string_conv</name></name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>format_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>has_encrypted_entries</name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMAX_ENTRY</name></cpp:macro> <cpp:value>ARCHIVE_LITERAL_ULL(100000000)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_support_format_7zip_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>archive_read_format_7zip_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_7zip_header_in_sfx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>decode_codec_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_encoded_header_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>extract_pack_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fileTimeToUtc</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>folder_uncompressed_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_CodersInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_coders_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_Digest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_digests</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_Folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_Header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_PackInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_pack_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_StreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_SubStreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_substream_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>free_decompression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>get_uncompressed_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>header_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init_decompression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_7zip_uint64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_Bools</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_CodersInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_coders_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_Digests</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_digests</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_Folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_Header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_PackInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_pack_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_StreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_SubStreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_substream_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_Times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>read_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seek_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>skip_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>skip_sfx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>slurp_central_directory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>setup_decode_folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>x86_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>x86_Convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Bcj2_Decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type>
<name>archive_read_support_format_7zip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>archive_read</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>archive_check_magic</name><argument_list>(<argument><expr><name>_a</name></expr></argument>, <argument><expr><name>ARCHIVE_READ_MAGIC</name></expr></argument>,
<argument><expr><name>ARCHIVE_STATE_NEW</name></expr></argument>, <argument><expr><literal type="string">"archive_read_support_format_7zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>zip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zip</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate 7zip data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>__archive_read_register_format</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>zip</name></expr></argument>,
<argument><expr><literal type="string">"7zip"</literal></expr></argument>,
<argument><expr><name>archive_read_format_7zip_bid</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>archive_read_format_7zip_read_header</name></expr></argument>,
<argument><expr><name>archive_read_format_7zip_read_data</name></expr></argument>,
<argument><expr><name>archive_read_format_7zip_read_data_skip</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>archive_read_format_7zip_cleanup</name></expr></argument>,
<argument><expr><name>archive_read_support_format_7zip_capabilities</name></expr></argument>,
<argument><expr><name>archive_read_format_7zip_has_encrypted_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_support_format_7zip_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA</name> <operator>|</operator>
<name>ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_has_encrypted_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>_a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_a</name> <operator>&amp;&amp;</operator> <name><name>_a</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type> <name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>_a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zip</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_bid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>best_bid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>best_bid</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>_7ZIP_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x7F\x45LF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><name>SFX_MIN_ADDR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>window</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>+</operator> <name>window</name> <operator>&lt;=</operator> <operator>(</operator><name>SFX_MAX_ADDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>offset</name> <operator>+</operator> <name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">32</literal> <operator>&lt;</operator> <name>buff</name> <operator>+</operator> <name>bytes_avail</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>check_7zip_header_in_sfx</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">48</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buff</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_7zip_header_in_sfx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x1C</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>_7ZIP_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">6</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">6</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">0x37</literal></expr>:</case> <return>return <expr><operator>(</operator><literal type="number">5</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">0x7A</literal></expr>:</case> <return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">0xBC</literal></expr>:</case> <return>return <expr><operator>(</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">0xAF</literal></expr>:</case> <return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">0x27</literal></expr>:</case> <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default> <return>return <expr><operator>(</operator><literal type="number">6</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>skip_sfx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>window</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;</operator> <name>SFX_MIN_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>SFX_MIN_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>SFX_MIN_ADDR</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>+</operator> <name>window</name> <operator>&lt;=</operator> <name>SFX_MAX_ADDR</name> <operator>-</operator> <name>SFX_MIN_ADDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">32</literal> <operator>&lt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>check_7zip_header_in_sfx</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>=
<expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>seek_base</name></name> <operator>=</operator> <name>SFX_MIN_ADDR</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>skip</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<label><name>fatal</name>:</label>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't find out 7-Zip header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip_entry</name></name> <modifier>*</modifier></type><name>zip_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>folder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format</name></name> <operator>=</operator> <name>ARCHIVE_FORMAT_7ZIP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <literal type="string">"7-Zip"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_header_info</name></name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>slurp_central_directory</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_Header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entries_remaining</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>zip</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>zip_entry</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entries_remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>zip_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>zip</name><operator>-&gt;</operator><name>entries_remaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>=</operator> <call><name>archive_string_conversion_from_charset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>zip_entry</name> <operator>&amp;&amp;</operator> <name><name>zip_entry</name><operator>-&gt;</operator><name>folderIndex</name></name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>numFolders</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>folder</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>folderIndex</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>fidx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>folder</name> <operator>&amp;&amp;</operator> <name>fidx</name><operator>&lt;</operator><name><name>folder</name><operator>-&gt;</operator><name>numCoders</name></name></expr>;</condition> <incr><expr><name>fidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_CRYPTO_MAIN_ZIP</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_RAR_29</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_AES_256_SHA_256</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_is_data_encrypted</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>archive_entry_copy_pathname_l</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>zip_entry</name><operator>-&gt;</operator><name>utf16name</name></name></expr></argument>,
<argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Pathname cannot be converted "</literal>
<literal type="string">"from %s to current locale."</literal></expr></argument>,
<argument><expr><call><name>archive_string_conversion_charset_name</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>MTIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>,
<argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mtime_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>CTIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_ctime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>,
<argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>ctime_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>ATIME_IS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_atime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>,
<argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>atime_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>ssIndex</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ss</name><operator>.</operator><name>unpackSizes</name><index>[<expr><name><name>zip_entry</name><operator>-&gt;</operator><name>ssIndex</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip_entry</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFLNK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>symname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>symsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<while>while <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_format_7zip_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>symname</name></expr></argument>, <argument><expr><name>symsize</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for Symname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>symname</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>symname</name><operator>+</operator><name>symsize</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>symsize</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>symsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_IFMT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>AE_IFREG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>zip_entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>symname</name><index>[<expr><name>symsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_symlink</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>format_name</name></name></expr></argument>, <argument><expr><literal type="string">"7-Zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>archive</name><operator>.</operator><name>archive_format_name</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>format_name</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_read_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>max_read_size</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_read</name> <init>= <expr><name>max_read_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bytes_to_read</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_to_read</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>read_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes_to_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>CRC32_IS_SET</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buff</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>flg</name></name> <operator>&amp;</operator> <name>CRC32_IS_SET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ss</name><operator>.</operator><name>digests</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>ssIndex</name></name></expr>]</index></name> <operator>!=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"7-Zip bad CRC: 0x%lx should be 0x%lx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>entry_crc32</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ss</name><operator>.</operator><name>digests</name><index>[
<expr><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>ssIndex</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_WARN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_offset</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_read_data_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_skipped</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>bytes_skipped</name> <operator>=</operator> <call><name>skip_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>end_of_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>archive_read_format_7zip_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_StreamsInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_decompression</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream_offset</name></name> <operator>+=</operator> <name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_STREAM_END</name></expr>:</case>
<case>case <expr><name>LZMA_OK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>LZMA_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: Cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_MEMLIMIT_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_FORMAT_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: format not recognized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_OPTIONS_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: Invalid options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_DATA_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: Corrupted input data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_BUF_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Lzma library error: No progress is possible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Lzma decompression failed: Unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>decode_codec_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>codecId</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>id_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>id_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>+=</operator> <name><name>codecId</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Byte</name></type>
<name>ppmd_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><operator>(</operator><name>IByteIn</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated RAR file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>overconsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>next_in</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_in</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>total_in</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_decompression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name>coder1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name>coder2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name><name>coder1</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_COPY</name></expr>:</case>
<case>case <expr><name>_7Z_BZ2</name></expr>:</case>
<case>case <expr><name>_7Z_DEFLATE</name></expr>:</case>
<case>case <expr><name>_7Z_PPMD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>coder2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name>_7Z_X86</name> <operator>&amp;&amp;</operator>
<name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name>_7Z_X86_BCJ2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported filter %lx for %lx"</literal></expr></argument>,
<argument><expr><name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>coder1</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>=</operator> <name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>x86_Init</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_COPY</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>_7Z_LZMA</name></expr>:</case> <case>case <expr><name>_7Z_LZMA2</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LZMA_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_MEMLIMIT</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_MEMLIMIT</name></cpp:macro> <cpp:value>(1U &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_options_delta</name></type> <name>delta_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_filter</name></type> <name><name>filters</name><index>[<expr><name>LZMA_FILTERS_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



















<if_stmt><if>if <condition>(<expr><name>coder2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>=</operator> <name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_X86</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_LZMA2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_X86</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>x86_Init</name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_X86_BCJ2</name></expr>:</case>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_DELTA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>coder2</name><operator>-&gt;</operator><name>propertiesSize</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Invalid Delta parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_DELTA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta_opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>delta_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta_opt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>LZMA_DELTA_TYPE_BYTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta_opt</name><operator>.</operator><name>dist</name></name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>coder2</name><operator>-&gt;</operator><name>properties</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <operator>&amp;</operator><name>delta_opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>_7Z_POWERPC</name></expr>:</case>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_POWERPC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_IA64</name></expr>:</case>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_IA64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_ARM</name></expr>:</case>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_ARMTHUMB</name></expr>:</case>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_ARMTHUMB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>_7Z_SPARC</name></expr>:</case>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_SPARC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected codec ID: %lX"</literal></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_LZMA2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_FILTER_LZMA1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ff</name> <operator>=</operator> <operator>&amp;</operator><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_properties_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>coder1</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>coder1</name><operator>-&gt;</operator><name>propertiesSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fi</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>LZMA_VLI_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filters</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_raw_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"LZMA codec is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>_7Z_BZ2</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>BZ_MEM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompressInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>ARCHIVE_ERRNO_MISC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_PARAM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"invalid setup parameter"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_MEM_ERROR</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_CONFIG_ERROR</name></expr>:</case>
<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"mis-compiled library"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"Internal error initializing decompressor: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>detail</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>detail</name></expr> </then><else>: <expr><literal type="string">"??"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_in_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_in_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_out_lo32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>total_out_hi32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"BZ2 codec is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>_7Z_DEFLATE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't initialize zlib stream."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"DEFLATE codec is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>_7Z_PPMD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>msize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coder1</name><operator>-&gt;</operator><name>propertiesSize</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Malformed PPMd parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>coder1</name><operator>-&gt;</operator><name>properties</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>msize</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>coder1</name><operator>-&gt;</operator><name>properties</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>order</name> <argument_list type="generic">&lt; <argument><expr><name>PPMD7_MIN_ORDER</name> <operator>||</operator> <name>order</name></expr></argument> &gt;</argument_list></name> <name>PPMD7_MAX_ORDER</name> <operator>||</operator>
<name><name>msize</name> <argument_list type="generic">&lt; <argument><expr><name>PPMD7_MIN_MEM_SIZE</name> <operator>||</operator> <name>msize</name></expr></argument> &gt;</argument_list></name> <name>PPMD7_MAX_MEM_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Malformed PPMd parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Construct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Alloc</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"Coludn't allocate memory for PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Init</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7z_RangeDec_CreateVTable</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>range_dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>overconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>_7Z_X86</name></expr>:</case>
<case>case <expr><name>_7Z_X86_BCJ2</name></expr>:</case>
<case>case <expr><name>_7Z_POWERPC</name></expr>:</case>
<case>case <expr><name>_7Z_IA64</name></expr>:</case>
<case>case <expr><name>_7Z_ARM</name></expr>:</case>
<case>case <expr><name>_7Z_ARMTHUMB</name></expr>:</case>
<case>case <expr><name>_7Z_SPARC</name></expr>:</case>
<case>case <expr><name>_7Z_DELTA</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected codec ID: %lX"</literal></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<case>case <expr><name>_7Z_CRYPTO_MAIN_ZIP</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_RAR_29</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_AES_256_SHA_256</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_is_metadata_encrypted</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_is_data_encrypted</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Crypto codec not supported yet (ID: 0x%lX)"</literal></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unknown codec ID: %lX"</literal></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outbytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t_next_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>t_next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>o_avail_in</name></decl>, <decl><type ref="prev"/><name>o_avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>t_avail_in</name></decl>, <decl><type ref="prev"/><name>t_avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bcj2_next_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bcj2_avail_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t_avail_in</name> <operator>=</operator> <name>o_avail_in</name> <operator>=</operator> <operator>*</operator><name>used</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <name>o_avail_out</name> <operator>=</operator> <operator>*</operator><name>outbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_next_in</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_next_out</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name>_7Z_LZMA2</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <name>_7Z_X86</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t_avail_out</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t_avail_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t_next_out</name><operator>++</operator> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>odd_bcj</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>t_avail_out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>o_avail_in</name> <operator>-</operator> <name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>o_avail_out</name> <operator>-</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bcj2_next_out</name> <operator>=</operator> <name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bcj2_avail_out</name> <operator>=</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <name>_7Z_X86_BCJ2</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name> <init>= <expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>Bcj2_Decode</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>t_next_out</name></expr></argument>, <argument><expr><name>t_avail_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"BCJ2 conversion Failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name> <operator>-=</operator>
<name>remaining</name> <operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>t_avail_out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>o_avail_out</name> <operator>-</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t_next_out</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bcj2_next_out</name> <operator>=</operator> <name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bcj2_avail_out</name> <operator>=</operator> <name>t_avail_out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t_next_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_COPY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>t_avail_in</name> <operator>&gt;</operator> <name>t_avail_out</name><operator>)</operator></expr>?</condition><then><expr><name>t_avail_out</name></expr></then><else>:<expr><name>t_avail_in</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t_next_out</name></expr></argument>, <argument><expr><name>t_next_in</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_in</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_avail_in</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>_7Z_LZMA</name></expr>:</case> <case>case <expr><name>_7Z_LZMA2</name></expr>:</case>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>t_next_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>t_avail_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lzma_code</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>, <argument><expr><name>LZMA_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LZMA_STREAM_END</name></expr>:</case>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LZMA_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Decompression failed(%d)"</literal></expr></argument>,
<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>t_avail_in</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>lzstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>_7Z_BZ2</name></expr>:</case>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>t_next_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BZ2_bzDecompress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_STREAM_END</name></expr>:</case>
<switch>switch <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BZ_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"bzip decompression failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>t_avail_in</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bzstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>_7Z_DEFLATE</name></expr>:</case>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>t_next_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uInt</name><operator>)</operator><name>t_avail_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ARCHIVE_EOF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Z_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"File decompression failed (%d)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>t_avail_in</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>_7Z_PPMD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flush_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name> <operator>||</operator> <name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>t_avail_out</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Decompression internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>t_next_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>t_next_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bytein</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bytein</name><operator>.</operator><name>Read</name></name> <operator>=</operator> <operator>&amp;</operator><name>ppmd_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>Stream</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>bytein</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7z_RangeDec_Init</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>range_dec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to initialize PPMd range decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>overconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_avail_in</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flush_bytes</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flush_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sym</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_DecodeSymbol</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>range_dec</name><operator>.</operator><name>p</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Failed to decode PPMd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>overconsumed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_stat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>next_out</name></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_out</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>total_out</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush_bytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flush_bytes</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_out</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_in</name></name> <operator>||</operator> <name>flush_bytes</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><name>t_avail_in</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_avail_out</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>ppstream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Decompression internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ARCHIVE_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>used</name> <operator>=</operator> <name>o_avail_in</name> <operator>-</operator> <name>t_avail_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>o_avail_out</name> <operator>-</operator> <name>t_avail_out</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name>_7Z_LZMA2</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <name>_7Z_X86</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>x86_Convert</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>*</operator><name>outbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>=</operator> <operator>*</operator><name>outbytes</name> <operator>-</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<name>o_avail_in</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>ARCHIVE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name><operator>)</operator> <operator>+</operator> <name>l</name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <name>_7Z_X86_BCJ2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff_size</name></name> <operator>-</operator> <name>t_avail_out</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name> <operator>&gt;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>Bcj2_Decode</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>bcj2_next_out</name></expr></argument>, <argument><expr><name>bcj2_avail_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"BCJ2 conversion Failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FAILED</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name> <operator>-=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name>
<operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bcj2_avail_out</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbytes</name> <operator>=</operator> <name>o_avail_out</name> <operator>-</operator> <name>bcj2_avail_out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>free_decompression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>ARCHIVE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LZMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>lzstream_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>lzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BZLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BZ2_bzDecompressEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>bzstream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BZ_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up bzip2 decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bzstream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>stream_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Failed to clean up zlib decompressor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>ARCHIVE_FATAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__archive_ppmd7_functions</name><operator>.</operator><name>Ppmd7_Free</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>ppmd7_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_7zip_uint64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>avail</name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_Bools</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>avail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>avail</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_Digest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_digests</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>digests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_Digests</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_digests</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>digests</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>digests</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>digests</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>defineds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>digests</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_PackInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_pack_info</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_Digest</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>digest</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_PackInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_pack_info</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>sizes</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>positions</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pi</name><operator>-&gt;</operator><name>sizes</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pi</name><operator>-&gt;</operator><name>positions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kEnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>defineds</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>defineds</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>digests</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>digests</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>defineds</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pi</name><operator>-&gt;</operator><name>digest</name><operator>.</operator><name>digests</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kCRC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_Digests</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pi</name><operator>-&gt;</operator><name>digest</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pi</name><operator>-&gt;</operator><name>numPackStreams</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_Folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>coders</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numCoders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>unPackSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_Folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numInStreamsTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>numOutStreamsTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>numCoders</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>numCoders</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>numCoders</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>coders</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numCoders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>codec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>simple</name></decl>, <decl><type ref="prev"/><name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name>codec_size</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>simple</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>codec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name> <operator>=</operator> <call><name>decode_codec_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>codec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numInStreams</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOutStreams</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numInStreams</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numInStreams</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOutStreams</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOutStreams</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertiesSize</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertiesSize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertiesSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertiesSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numInStreamsTotal</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numInStreams</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numOutStreamsTotal</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOutStreams</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>numOutStreamsTotal</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>numInStreamsTotal</name> <operator>&lt;</operator> <name>numOutStreamsTotal</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name> <operator>=</operator> <name>numOutStreamsTotal</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inIndex</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inIndex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outIndex</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outIndex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numPackedStreams</name></name> <operator>=</operator> <name>numInStreamsTotal</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>numPackedStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>numPackedStreams</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numInStreamsTotal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>inIndex</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>numInStreamsTotal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>numPackedStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>packedStreams</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>packedStreams</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numInStreams</name></name> <operator>=</operator> <name>numInStreamsTotal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numOutStreams</name></name> <operator>=</operator> <name>numOutStreamsTotal</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_CodersInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_coders_info</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_Folder</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>folders</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_CodersInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_coders_info</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_digests</name></name></type> <name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kFolder</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ci</name><operator>-&gt;</operator><name>folders</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_Folder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>folders</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>dataStreamIndex</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>dataStreamIndex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kCodersUnPackSize</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>folder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>folders</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>numOutStreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>folder</name><operator>-&gt;</operator><name>numOutStreams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kCRC</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_Digests</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>numFolders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>digest_defined</name> <operator>=</operator> <name><name>digest</name><operator>.</operator><name>defineds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>folders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>digest</name> <operator>=</operator> <name><name>digest</name><operator>.</operator><name>digests</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free_Digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>free_Digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>folder_uncompressed_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>numOutStreams</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pairs</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>numBindPairs</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pairs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outIndex</name> <operator>==</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>pairs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_SubStreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_substream_info</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>unpackSizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>digests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_SubStreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_substream_info</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numFolders</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>usizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>unpack_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>numDigests</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kNumUnPackStream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unpack_streams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unpack_streams</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <name>UMAX_ENTRY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>unpack_streams</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>unpack_streams</name> <operator>=</operator> <name>numFolders</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>unpack_streams</name></name> <operator>=</operator> <name>unpack_streams</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unpack_streams</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>unpackSizes</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>unpack_streams</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ss</name><operator>-&gt;</operator><name>unpackSizes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>unpack_streams</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>digests</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>unpack_streams</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ss</name><operator>-&gt;</operator><name>digests</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>unpackSizes</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>ss</name><operator>-&gt;</operator><name>digests</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>usizes</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>unpackSizes</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kSize</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pack</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pack</name> <operator>&lt;</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>;</condition> <incr><expr><name>pack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>usizes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><name>usizes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>usizes</name><operator>++</operator> <operator>=</operator> <call><name>folder_uncompressed_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kSize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>unpack_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>digests</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>numDigests</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>digest_defined</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numDigests</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kCRC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_digests</name></name></type> <name>tmpDigests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digestsDefined</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>digestsDefined</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>digests</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>digests</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>di</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDigests</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpDigests</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_Digests</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>tmpDigests</name><operator>)</operator></expr></argument>, <argument><expr><name>numDigests</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_Digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDigests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFolders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>digest_defined</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>digestsDefined</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>digests</name><operator>++</operator> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>digest</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>;</condition>
<incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>di</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>digestsDefined</name><operator>++</operator> <operator>=</operator>
<name><name>tmpDigests</name><operator>.</operator><name>defineds</name><index>[<expr><name>di</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>digests</name><operator>++</operator> <operator>=</operator>
<name><name>tmpDigests</name><operator>.</operator><name>digests</name><index>[<expr><name>di</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free_Digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDigests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_StreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_PackInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>pi</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_CodersInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>ci</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_SubStreamsInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>ss</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_StreamsInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kPackInfo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>packPos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_PackInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>pi</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>positions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>sizes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>packPos</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>numPackStreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>packPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packPos</name> <operator>+=</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packPos</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>header_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kUnPackInfo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_CodersInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>ci</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>packIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>folders</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>numFolders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packIndex</name> <operator>=</operator> <name>packIndex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packIndex</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numPackedStreams</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packIndex</name> <operator>&gt;</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>numPackStreams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kSubStreamsInfo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_SubStreamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>ss</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>folders</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>numFolders</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_Header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_Header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>check_header_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>folders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip_entry</name></name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>folderIndex</name></decl>, <decl><type ref="prev"/><name>indexInFolder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eindex</name></decl>, <decl><type ref="prev"/><name>empty_streams</name></decl>, <decl><type ref="prev"/><name>sindex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>check_header_id</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kHeader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kArchiveProperties</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kMainStreamsInfo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_StreamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>kFilesInfo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>empty_streams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ll</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kEnd</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kEmptyStream</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>empty_streams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>empty_streams</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>kEmptyFile</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>empty_streams</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>empty_streams</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name></expr></argument>, <argument><expr><name>empty_streams</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>kAnti</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>empty_streams</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>empty_streams</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>antiBools</name></name></expr></argument>, <argument><expr><name>empty_streams</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>kCTime</name></expr>:</case>
<case>case <expr><name>kATime</name></expr>:</case>
<case>case <expr><name>kMTime</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>read_Times</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>kName</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nl</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ll</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ll</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>ll</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>






<while>while <condition>(<expr><name>nb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&gt;</operator> <name>UBUFF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>UBUFF_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry_names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nl</name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>utf16name</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wname</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>np</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><name>nl</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>np</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>np</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nl</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <name>np</name> <operator>-</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>utf16name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nl</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kAttributes</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>allAreDefined</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>allAreDefined</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>allAreDefined</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>attrBools</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kDummy</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__LA_FALLTHROUGH</name></expr>;</expr_stmt>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>




<expr_stmt><expr><name>folders</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>folders</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>eindex</name> <operator>=</operator> <name>sindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>folderIndex</name> <operator>=</operator> <name>indexInFolder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>emptyStreamBools</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>|=</operator> <name>HAS_STREAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>&amp;</operator> <name>HAS_STREAM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sindex</name> <operator>&gt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>unpack_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>AE_IFREG</name> <operator>|</operator> <literal type="number">0666</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>digestsDefined</name><index>[<expr><name>sindex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>|=</operator> <name>CRC32_IS_SET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ssIndex</name> <operator>=</operator> <name>sindex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sindex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>emptyFileBools</name><index>[<expr><name>eindex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>eindex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>AE_IFDIR</name> <operator>|</operator> <literal type="number">0777</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>AE_IFREG</name> <operator>|</operator> <literal type="number">0666</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dir</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>!=</operator> <name>AE_IFDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><name>AE_IFMT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>|=</operator> <name>AE_IFDIR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>AE_IFMT</name><operator>)</operator> <operator>==</operator> <name>AE_IFDIR</name> <operator>&amp;&amp;</operator>
<name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>utf16name</name><index>[<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator>
<name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>utf16name</name><index>[<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>utf16name</name><index>[<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>utf16name</name><index>[<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ssIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0222</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>&amp;</operator> <name>HAS_STREAM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>indexInFolder</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>folderIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>indexInFolder</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>folderIndex</name> <operator>&gt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>numFolders</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>folders</name><index>[<expr><name>folderIndex</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>folderIndex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>folderIndex</name> <operator>=</operator> <name>folderIndex</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>&amp;</operator> <name>HAS_STREAM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>indexInFolder</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indexInFolder</name> <operator>&gt;=</operator> <name><name>folders</name><index>[<expr><name>folderIndex</name></expr>]</index></name><operator>.</operator><name>numUnpackStreams</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>folderIndex</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>indexInFolder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOC_TIME</name></cpp:macro> <cpp:value>ARCHIVE_LITERAL_ULL(116444736000000000)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fileTimeToUtc</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fileTime</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fileTime</name> <operator>&gt;=</operator> <name>EPOC_TIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fileTime</name> <operator>-=</operator> <name>EPOC_TIME</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>timep</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>fileTime</name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>fileTime</name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>timep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_Times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip_entry</name></name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>zip</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>timeBools</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allAreDefined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timeBools</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>timeBools</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>timeBools</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>allAreDefined</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>allAreDefined</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>timeBools</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_Bools</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>timeBools</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_7zip_uint64</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>dataIndex</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UMAX_ENTRY</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>dataIndex</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>timeBools</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kCTime</name></expr>:</case>
<expr_stmt><expr><call><name>fileTimeToUtc</name><argument_list>(<argument><expr><call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ctime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ctime_ns</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>|=</operator> <name>CTIME_IS_SET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kATime</name></expr>:</case>
<expr_stmt><expr><call><name>fileTimeToUtc</name><argument_list>(<argument><expr><call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atime_ns</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>|=</operator> <name>ATIME_IS_SET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kMTime</name></expr>:</case>
<expr_stmt><expr><call><name>fileTimeToUtc</name><argument_list>(<argument><expr><call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mtime_ns</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flg</name> <operator>|=</operator> <name>MTIME_IS_SET</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>timeBools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>timeBools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decode_encoded_header_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_stream_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_StreamsInfo</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>numPackStreams</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>ci</name><operator>.</operator><name>numFolders</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>pi</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Malformed Header offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>header_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>&lt;</operator> <name>rbytes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_encoded</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rbytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>-=</operator> <name>rbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator> <name>rbytes</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>read_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>, <argument><expr><name>rbytes</name></expr></argument>, <argument><expr><name>rbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>rbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>slurp_central_directory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_7z_header_info</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_header_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_header_crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>check_header_crc</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\x7F\x45LF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>skip_sfx</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>ARCHIVE_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>seek_base</name></name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>_7ZIP_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Not 7-Zip archive file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Header CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_header_offset</name> <operator>=</operator> <call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_header_size</name> <operator>=</operator> <call><name>archive_le64dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_header_crc</name> <operator>=</operator> <call><name>archive_le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_header_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ARCHIVE_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>next_header_offset</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_header_offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>next_header_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__archive_read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>next_header_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><name>next_header_offset</name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>seek_base</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream_offset</name></name> <operator>=</operator> <name>next_header_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_offset</name></name> <operator>=</operator> <name>next_header_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>=</operator> <name>next_header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_encoded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_being_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>check_header_crc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kEncodedHeader</name></expr>:</case>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>decode_encoded_header_info</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name> <operator>!=</operator> <name>next_header_crc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>digest_defined</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_header_crc</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>digest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>check_header_crc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>setup_decode_folder</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_bytes_remaining</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>seek_pack</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_StreamsInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>si</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_encoded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>kHeader</name></expr>:</case>



<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read_Header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_encoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Couldn't allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>header_bytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>kEnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>check_header_crc</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>header_crc32</name></name> <operator>!=</operator> <name>next_header_crc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Unexpected Property ID = %X"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_being_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>get_uncompressed_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>minimum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_COPY</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_avail</name> <operator>&gt;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_avail</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>minimum</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>+=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>-=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bytes_avail</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>extract_pack_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>minimum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_COPY</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>minimum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minimum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bytes_avail</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>-=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bytes_avail</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>-=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <name>UBUFF_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <name>minimum</name> <operator>+</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x3ff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for 7-Zip decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>&lt;</operator> <name>minimum</name> <operator>||</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>-</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>minimum</name> <operator>+</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x3ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for 7-Zip decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name> <operator>+</operator> <name>used</name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_in</name></decl>, <decl><type ref="prev"/><name>bytes_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_data</name></decl>;</decl_stmt>







<expr_stmt><expr><name>buff_in</name> <operator>=</operator> <call><name>__archive_read_ahead</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_avail</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buff_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name>
<operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_out</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name>
<operator>-</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_in</name> <operator>=</operator> <name>bytes_avail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_in</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_in</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>decompress</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>, <argument><expr><name>buff_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_out</name></expr></argument>,
<argument><expr><name>buff_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARCHIVE_OK</name></expr>:</case>
<expr_stmt><expr><name>end_of_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE_EOF</name></expr>:</case>
<expr_stmt><expr><name>end_of_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>-=</operator> <name>bytes_in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_out</name> <operator>&gt;</operator> <name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes_out</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>-=</operator> <name>bytes_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>+=</operator> <name>bytes_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator> <name>bytes_in</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>==</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>codec2</name></name> <operator>==</operator> <name>_7Z_X86</name> <operator>&amp;&amp;</operator> <name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_of_data</name> <operator>||</operator> <operator>(</operator><name>bytes_in</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes_out</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_pointer</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>seek_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pack_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Damaged 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>pi</name><operator>.</operator><name>sizes</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pack_offset</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>pi</name><operator>.</operator><name>positions</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>stream_offset</name></name> <operator>!=</operator> <name>pack_offset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>__archive_read_seek</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pack_offset</name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>seek_base</name></name></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>stream_offset</name></name> <operator>=</operator> <name>pack_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>read_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>minimum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>skip_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>get_uncompressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>get_uncompressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>get_uncompressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>header_is_being_read</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>, <argument><expr><literal type="string">"Malformed 7-Zip archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>folderIndex</name></name></expr>]</index></name><operator>.</operator><name>skipped_bytes</name>
<operator>||</operator> <name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name> <operator>!=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>folderIndex</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>folderIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_bytes</name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name></expr>]</index></name><operator>.</operator><name>skipped_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name> <operator>&gt;=</operator> <name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>numFolders</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>setup_decode_folder</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>seek_pack</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<while>while <condition>(<expr><name>skip_bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>skipped</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>skipped</name> <operator>=</operator> <call><name>get_uncompressed_data</name><argument_list>(
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>skip_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>skipped</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_bytes</name> <operator>-=</operator> <name>skipped</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><call><name>get_uncompressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_decode_folder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_7z_folder</name></name> <modifier>*</modifier></type><name>folder</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name>coder1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coder2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>header</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"archive header"</literal></expr></then><else>:<expr><literal type="string">"file content"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>found_bcj2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>numPackedStreams</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>packIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>=</operator> <call><name>folder_uncompressed_size</name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>folder</name><operator>-&gt;</operator><name>numCoders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_7Z_CRYPTO_MAIN_ZIP</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_RAR_29</name></expr>:</case>
<case>case <expr><name>_7Z_CRYPTO_AES_256_SHA_256</name></expr>:</case> <block>{<block_content>


<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_entry_set_is_data_encrypted</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_is_metadata_encrypted</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"The %s is encrypted, "</literal>
<literal type="string">"but currently not supported"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block>
<case>case <expr><name>_7Z_X86_BCJ2</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>found_bcj2</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>==</operator> <name>ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>has_encrypted_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>numCoders</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>found_bcj2</name><operator>)</operator> <operator>||</operator> <name>found_bcj2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"The %s is encoded with many filters, "</literal>
<literal type="string">"but currently not supported"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>coder1</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>numCoders</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coder2</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>coder2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_bcj2</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><name><name>folder</name><operator>-&gt;</operator><name>coders</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name></type> <name>coder_copy</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name><name>scoder</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{<expr><operator>&amp;</operator><name>coder_copy</name></expr>, <expr><operator>&amp;</operator><name>coder_copy</name></expr>, <expr><operator>&amp;</operator><name>coder_copy</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sunpack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>numCoders</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>fc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_X86_BCJ2</name> <operator>&amp;&amp;</operator>
<name><name>folder</name><operator>-&gt;</operator><name>numInStreams</name></name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>folder</name><operator>-&gt;</operator><name>numOutStreams</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>folder</name><operator>-&gt;</operator><name>bindPairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>inIndex</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scoder</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scoder</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sunpack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sunpack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>coder1</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


















<if_stmt><if>if <condition>(<expr><name><name>fc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name> <operator>&amp;&amp;</operator>
<name><name>fc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coder1</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name> <operator>&amp;&amp;</operator>
<name><name>fc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coder1</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name> <operator>&amp;&amp;</operator>
<name><name>fc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>_7Z_COPY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coder1</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>folder</name><operator>-&gt;</operator><name>coders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported form of "</literal>
<literal type="string">"BCJ2 streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>coder2</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>coder2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>coder2</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>_7Z_X86_BCJ2</name> <operator>&amp;&amp;</operator>
<name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<name><name>folder</name><operator>-&gt;</operator><name>numInStreams</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>folder</name><operator>-&gt;</operator><name>numOutStreams</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>main_stream_bytes_remaining</name></name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>unPackSize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_MISC</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported form of BCJ2 streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>seek_pack</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_7z_coder</name></name> <modifier>*</modifier></type><name>coder</name> <init>= <expr><name><name>scoder</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>seek_pack</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sunpack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>=</operator>
<name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>=</operator> <name><name>sunpack</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>init_decompression</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>, <argument><expr><name>coder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for 7-Zip decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_inbytes_remaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>extract_pack_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>get_uncompressed_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>,
<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff_size</name></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>,
<argument><expr><literal type="string">"No memory for 7-Zip decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_outPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_remaining</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_index</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>folder</name><operator>-&gt;</operator><name>packIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>folder_outbytes_remaining</name></name> <operator>=</operator>
<call><name>folder_uncompressed_size</name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>uncompressed_buffer_bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>init_decompression</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>, <argument><expr><name>coder1</name></expr></argument>, <argument><expr><name>coder2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>skip_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive_read</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>skip_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name> <init>= <expr><operator>(</operator>struct <name>_7zip</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>skipped_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>skip_bytes</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>folder_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>si</name><operator>.</operator><name>ci</name><operator>.</operator><name>folders</name><index>[<expr><name><name>zip</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>folderIndex</name></name></expr>]</index></name><operator>.</operator><name>skipped_bytes</name>
<operator>+=</operator> <name>skip_bytes</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>skip_bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skipped_bytes</name> <operator>=</operator> <call><name>read_stream</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skipped_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>skipped_bytes</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skipped_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>archive</name></name></expr></argument>,
<argument><expr><name>ARCHIVE_ERRNO_FILE_FORMAT</name></expr></argument>,
<argument><expr><literal type="string">"Truncated 7-Zip file body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ARCHIVE_FATAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>skipped_bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>pack_stream_bytes_unconsumed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_consume</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>skip_bytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Test86MSByte</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b) == 0 || (b) == 0xFF)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>x86_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_prevPosT</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_prevMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_ip</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>x86_Convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>kMaskToAllowedStatus</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>kMaskToBitNumber</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufferPos</name></decl>, <decl><type ref="prev"/><name>prevPosT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ip</name></decl>, <decl><type ref="prev"/><name>prevMask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prevPosT</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj_prevPosT</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevMask</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj_prevMask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj_ip</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name> <operator>+</operator> <name>bufferPos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>limit</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE8</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prevPosT</name> <operator>=</operator> <name>bufferPos</name> <operator>-</operator> <name>prevPosT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prevPosT</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prevMask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>prevMask</name> <operator>=</operator> <operator>(</operator><name>prevMask</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>prevPosT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prevMask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>=
<expr><name><name>p</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name><name>kMaskToBitNumber</name><index>[<expr><name>prevMask</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kMaskToAllowedStatus</name><index>[<expr><name>prevMask</name></expr>]</index></name> <operator>||</operator>
<call><name>Test86MSByte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevPosT</name> <operator>=</operator> <name>bufferPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevMask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>prevMask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bufferPos</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prevPosT</name> <operator>=</operator> <name>bufferPos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Test86MSByte</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dest</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>src</name> <operator>-</operator> <operator>(</operator><name>ip</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>bufferPos</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prevMask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_index</name> <operator>=</operator> <name><name>kMaskToBitNumber</name><index>[<expr><name>prevMask</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>b_index</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Test86MSByte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dest</name> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>b_index</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prevMask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>prevMask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bufferPos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_prevPosT</name></name> <operator>=</operator> <name>prevPosT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_prevMask</name></name> <operator>=</operator> <name>prevMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_ip</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>bufferPos</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>bufferPos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_ERROR_DATA</name></cpp:macro> <cpp:value>ARCHIVE_FAILED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsJcc</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b0) == 0x0F &amp;&amp; ((b1) &amp; 0xF0) == 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsJ</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b1 &amp; 0xFE) == 0xE8 || IsJcc(b0, b1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNumTopBits</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kTopValue</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; kNumTopBits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNumBitModelTotalBits</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kBitModelTotal</name></cpp:macro> <cpp:value>(1 &lt;&lt; kNumBitModelTotalBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNumMoveBits</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_READ_BYTE</name></cpp:macro> <cpp:value>(*buffer++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_TEST</name></cpp:macro> <cpp:value>{ if (buffer == bufferLim) return SZ_ERROR_DATA; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_INIT2</name></cpp:macro> <cpp:value>zip-&gt;bcj2_code = 0; zip-&gt;bcj2_range = 0xFFFFFFFF; { int ii; for (ii = 0; ii &lt; 5; ii++) { RC_TEST; zip-&gt;bcj2_code = (zip-&gt;bcj2_code &lt;&lt; 8) | RC_READ_BYTE; }}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZE</name></cpp:macro> <cpp:value>if (zip-&gt;bcj2_range &lt; kTopValue) { RC_TEST; zip-&gt;bcj2_range &lt;&lt;= 8; zip-&gt;bcj2_code = (zip-&gt;bcj2_code &lt;&lt; 8) | RC_READ_BYTE; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_BIT_0</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ttt = *(p); bound = (zip-&gt;bcj2_range &gt;&gt; kNumBitModelTotalBits) * ttt; if (zip-&gt;bcj2_code &lt; bound)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_0</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zip-&gt;bcj2_range = bound; *(p) = (CProb)(ttt + ((kBitModelTotal - ttt) &gt;&gt; kNumMoveBits)); NORMALIZE;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_1</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>zip-&gt;bcj2_range -= bound; zip-&gt;bcj2_code -= bound; *(p) = (CProb)(ttt - (ttt &gt;&gt; kNumMoveBits)); NORMALIZE;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>Bcj2_Decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_7zip</name></name> <modifier>*</modifier></type><name>zip</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outBuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>inPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>outPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size0</name></decl>, <decl><type ref="prev"/><name>size1</name></decl>, <decl><type ref="prev"/><name>size2</name></decl>, <decl><type ref="prev"/><name>size3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufferLim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size0</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf0</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_buff</name></name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_avail</name></name> <operator>-</operator> <name>size0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size1</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>size1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>size2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size3</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf3</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>sub_stream_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>size3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>buf3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufferLim</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>size3</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>kBitModelTotal</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>RC_INIT2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>outPos</name> <operator>&lt;</operator> <name>outSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>outBuf</name><index>[<expr><name>outPos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>odd_bcj</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>outSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_outPos</name></name> <operator>+=</operator> <name>outPos</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>outPos</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CProb</name> <modifier>*</modifier></type><name>prob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ttt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name> <init>= <expr><name>size0</name> <operator>-</operator> <name>inPos</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>outSize</name> <operator>-</operator> <name>outPos</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>outSize</name> <operator>-</operator> <name>outPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bb</name> <init>= <expr><name><name>buf0</name><index>[<expr><name>inPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outBuf</name><index>[<expr><name>outPos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsJ</name><argument_list>(<argument><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inPos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name> <operator>=</operator> <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>outPos</name> <operator>==</operator> <name>outSize</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj_state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf0</name><index>[<expr><name>inPos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xE8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prob</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name></name> <operator>+</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xE9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prob</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name></name> <operator>+</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prob</name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj2_p</name></name> <operator>+</operator> <literal type="number">257</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<macro><name>IF_BIT_0</name><argument_list>(<argument>prob</argument>)</argument_list></macro> <block>{<block_content>
<macro><name>UPDATE_0</name><argument_list>(<argument>prob</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block> <if_stmt><else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<macro><name>UPDATE_1</name><argument_list>(<argument>prob</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0xE8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size1</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SZ_ERROR_DATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size1</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SZ_ERROR_DATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size2</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>-</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>bcj2_outPos</name></name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>outPos</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>zip</name><operator>-&gt;</operator><name>bcj2_prevByte</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>outPos</name> <operator>&lt;</operator> <name>outSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outBuf</name><index>[<expr><name>outPos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator><name>i</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>odd_bcj</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>tmp_stream_bytes_remaining</name></name> <operator>-=</operator> <name>inPos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>size1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>size2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>sub_stream_bytes_remaining</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bufferLim</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zip</name><operator>-&gt;</operator><name>bcj2_outPos</name></name> <operator>+=</operator> <name>outPos</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>outPos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
