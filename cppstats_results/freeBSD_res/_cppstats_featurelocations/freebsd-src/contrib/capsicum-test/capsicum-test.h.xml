<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/capsicum-test/capsicum-test.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAPSICUM_TEST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSICUM_TEST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ios&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtest/gtest.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>
<extern>extern std::string tmpdir;</extern>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>tmpdir_on_tmpfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>force_mt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>force_nofork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uid_t</name></type> <name>other_uid</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>WaitingThreadFn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>MaybeRunWithThread</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Function</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>subthread</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_mt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subthread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WaitingThreadFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>self</name><operator>-&gt;*</operator><name>fn</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>force_mt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name>subthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>subthread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Function</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>MaybeRunWithThread</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>subthread</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_mt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subthread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WaitingThreadFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>fn</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>force_mt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name>subthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>subthread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TmpFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RUN_FORKED</name><parameter_list>(<parameter><type><name>INNERCODE</name></type></parameter>, <parameter><type><name>TESTCASENAME</name></type></parameter>, <parameter><type><name>TESTNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pid_t pid = force_nofork ? 0 : fork(); if (pid == 0) { INNERCODE; if (!force_nofork) { exit(HasFailure()); } } else if (pid &gt; 0) { int rc, status; int remaining_us = 30000000; while (remaining_us &gt; 0) { status = 0; rc = waitpid(pid, &amp;status, WNOHANG); if (rc != 0) break; remaining_us -= 10000; usleep(10000); } if (remaining_us &lt;= 0) { fprintf(stderr, "Warning: killing unresponsive test " "%s.%s (pid %d)\n", TESTCASENAME, TESTNAME, pid); kill(pid, SIGKILL); ADD_FAILURE() &lt;&lt; "Test hung"; } else if (rc &lt; 0) { fprintf(stderr, "Warning: waitpid error %s (%d)\n", strerror(errno), errno); ADD_FAILURE() &lt;&lt; "Failed to wait for child"; } else { int rc = WIFEXITED(status) ? WEXITSTATUS(status) : -1; EXPECT_EQ(0, rc); } }</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RUN_FORKED_MEM</name><parameter_list>(<parameter><type><name>THIS</name></type></parameter>, <parameter><type><name>TESTFN</name></type></parameter>, <parameter><type><name>TESTCASENAME</name></type></parameter>, <parameter><type><name>TESTNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_RUN_FORKED(MaybeRunWithThread(THIS, &amp;TESTFN), TESTCASENAME, TESTNAME);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RUN_FORKED_FN</name><parameter_list>(<parameter><type><name>TESTFN</name></type></parameter>, <parameter><type><name>TESTCASENAME</name></type></parameter>, <parameter><type><name>TESTNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_RUN_FORKED(MaybeRunWithThread(&amp;TESTFN), TESTCASENAME, TESTNAME);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORK_TEST_ON</name><parameter_list>(<parameter><type><name>test_case_name</name></type></parameter>, <parameter><type><name>test_name</name></type></parameter>, <parameter><type><name>test_file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_case_name##_##test_name##_ForkTest(); TEST(test_case_name, test_name ##Forked) { _RUN_FORKED_FN(test_case_name##_##test_name##_ForkTest, #test_case_name, #test_name); const char *filename = test_file; if (filename) unlink(filename); } static void test_case_name##_##test_name##_ForkTest()</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORK_TEST</name><parameter_list>(<parameter><type><name>test_case_name</name></type></parameter>, <parameter><type><name>test_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FORK_TEST_ON(test_case_name, test_name, NULL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICLASS_NAME</name><parameter_list>(<parameter><type><name>test_case_name</name></type></parameter>, <parameter><type><name>test_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Forked##test_case_name##_##test_name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORK_TEST_F</name><parameter_list>(<parameter><type><name>test_case_name</name></type></parameter>, <parameter><type><name>test_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>class ICLASS_NAME(test_case_name, test_name) : public test_case_name { public: ICLASS_NAME(test_case_name, test_name)() {} void InnerTestBody(); }; TEST_F(ICLASS_NAME(test_case_name, test_name), _) { _RUN_FORKED_MEM(this, ICLASS_NAME(test_case_name, test_name)::InnerTestBody, #test_case_name, #test_name); } void ICLASS_NAME(test_case_name, test_name)::InnerTestBody()</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_OK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_LE(0, v) &lt;&lt; " errno " &lt;&lt; errno &lt;&lt; " " &lt;&lt; strerror(errno)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_SYSCALL_FAIL</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SCOPED_TRACE(#C); EXPECT_GT(0, C); EXPECT_EQ(E, errno) &lt;&lt; "expected '" &lt;&lt; strerror(E) &lt;&lt; "' but got '" &lt;&lt; strerror(errno) &lt;&lt; "'"; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_SYSCALL_FAIL_NOT</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EXPECT_GT(0, C); EXPECT_NE(E, errno) &lt;&lt; strerror(E); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_VOID_SYSCALL_FAIL_NOT</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { errno = 0; C; EXPECT_NE(E, errno) &lt;&lt; #C &lt;&lt; " failed with ECAPMODE"; } while (0)</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BENEATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_OPENAT_FAIL_TRAVERSAL</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SCOPED_TRACE(GTEST_STRINGIFY_(openat((fd), (path), (flags)))); const int result = openat((fd), (path), (flags)); if (((flags) &amp; O_BENEATH) == O_BENEATH) { EXPECT_SYSCALL_FAIL(E_NO_TRAVERSE_O_BENEATH, result); } else { EXPECT_SYSCALL_FAIL(E_NO_TRAVERSE_CAPABILITY, result); } if (result &gt;= 0) { close(result); } } while (0)</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_OPENAT_FAIL_TRAVERSAL</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SCOPED_TRACE(GTEST_STRINGIFY_(openat((fd), (path), (flags)))); const int result = openat((fd), (path), (flags)); EXPECT_SYSCALL_FAIL(E_NO_TRAVERSE_CAPABILITY, result); if (result &gt;= 0) { close(result); } } while (0)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_CAPMODE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_SYSCALL_FAIL(ECAPMODE, C)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_FAIL_NOT_CAPMODE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_SYSCALL_FAIL_NOT(ECAPMODE, C)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_FAIL_VOID_NOT_CAPMODE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_VOID_SYSCALL_FAIL_NOT(ECAPMODE, C)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_NOTCAPABLE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_SYSCALL_FAIL(ENOTCAPABLE, C)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_FAIL_NOT_NOTCAPABLE</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_SYSCALL_FAIL_NOT(ENOTCAPABLE, C)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_CAPFAIL</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int rc = C; EXPECT_GT(0, rc); EXPECT_TRUE(errno == ECAPMODE || errno == ENOTCAPABLE) &lt;&lt; #C &lt;&lt; " did not fail with ECAPMODE/ENOTCAPABLE but " &lt;&lt; errno &lt;&lt; "(" &lt;&lt; strerror(errno) &lt;&lt; ")"; } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_RIGHTS_IN</name><parameter_list>(<parameter><type><name>rights</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_TRUE(cap_rights_contains((max), (rights))) &lt;&lt; "rights " &lt;&lt; std::hex &lt;&lt; *(rights) &lt;&lt; " not a subset of " &lt;&lt; std::hex &lt;&lt; *(max)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_RIGHTS_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EXPECT_RIGHTS_IN((a), (b)); EXPECT_RIGHTS_IN((b), (a)); } while (0)</cpp:value></cpp:define>












<function_decl><type><name>char</name></type> <name>ProcessState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PID_REACHES_STATES</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>, <parameter><type><name>expected1</name></type></parameter>, <parameter><type><name>expected2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int counter = 5; char state; do { state = ProcessState(pid); if (state == expected1 || state == expected2) break; usleep(100000); } while (--counter &gt; 0); EXPECT_TRUE(state == expected1 || state == expected2) &lt;&lt; " pid " &lt;&lt; pid &lt;&lt; " in state " &lt;&lt; state; }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PID_ALIVE</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_PID_REACHES_STATES(pid, 'R', 'S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PID_DEAD</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_PID_REACHES_STATES(pid, 'Z', '\0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PID_ZOMBIE</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_PID_REACHES_STATES(pid, 'Z', 'Z');</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_PID_GONE</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXPECT_PID_REACHES_STATES(pid, '\0', '\0');</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>MSG_CHILD_STARTED</name> <init>= <expr><literal type="number">1234</literal></expr></init></decl>,
<decl><name>MSG_CHILD_FD_RECEIVED</name> <init>= <expr><literal type="number">4321</literal></expr></init></decl>,

<decl><name>MSG_PARENT_REQUEST_CHILD_EXIT</name> <init>= <expr><literal type="number">9999</literal></expr></init></decl>,
<decl><name>MSG_PARENT_CLOSED_FD</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>,
<decl><name>MSG_PARENT_CHILD_SHOULD_RUN</name> <init>= <expr><literal type="number">10001</literal></expr></init></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_INT_MESSAGE</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int _msg = message; EXPECT_EQ(sizeof(_msg), (size_t)write(fd, &amp;_msg, sizeof(_msg))); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWAIT_INT_MESSAGE</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int _msg = 0; EXPECT_EQ(sizeof(_msg), (size_t)read(fd, &amp;_msg, sizeof(_msg))); EXPECT_EQ(expected, _msg); } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTEST_SKIP_IF_NOT_ROOT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (getuid() != 0) { GTEST_SKIP() &lt;&lt; "requires root"; }</cpp:value></cpp:define>


<extern>extern std::string capsicum_test_bindir;</extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
