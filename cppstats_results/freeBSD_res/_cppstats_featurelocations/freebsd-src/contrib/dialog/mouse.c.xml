<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/mouse.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MOUSE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>basex</name></decl>, <decl><type ref="prev"/><name>basey</name></decl>, <decl><type ref="prev"/><name>basecode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>mseRegion</name> <modifier>*</modifier></type><name>regionList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>mseRegion</name> <modifier>*</modifier></type>
<name>find_region_by_code</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>butPtr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>butPtr</name> <operator>=</operator> <name>regionList</name></expr>;</init> <condition><expr><name>butPtr</name></expr>;</condition> <incr><expr><name>butPtr</name> <operator>=</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>butPtr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_mouse_setbase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>basex</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>basey</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_mouse_setcode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>basecode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#mouse_setcode %d\n"</literal><operator>,</operator> <name>code</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_mouse_mkbigregion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>step_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>butPtr</name> <init>= <expr><call><name>dlg_mouse_mkregion</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>-</operator><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>step_x</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>step_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>step_y</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>step_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_mouse_free_regions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>regionList</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>butPtr</name> <init>= <expr><name><name>regionList</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>regionList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regionList</name> <operator>=</operator> <name>butPtr</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>mseRegion</name> <modifier>*</modifier></type>
<name>dlg_mouse_mkregion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>butPtr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>butPtr</name> <operator>=</operator> <call><name>find_region_by_code</name><argument_list>(<argument><expr><name>basecode</name> <operator>+</operator> <name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>butPtr</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>mseRegion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>butPtr</name></expr></argument>, <argument><expr><literal type="string">"dlg_mouse_mkregion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>regionList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regionList</name> <operator>=</operator> <name>butPtr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>step_x</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>step_y</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>y</name></name> <operator>!=</operator> <operator>(</operator><name>basey</name> <operator>+</operator> <name>y</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <operator>(</operator><name>basey</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>height</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <operator>(</operator><name>basex</name> <operator>+</operator> <name>x</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>X</name></name> <operator>!=</operator> <operator>(</operator><name>basex</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>width</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>basecode</name> <operator>+</operator> <name>code</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#mouse_mkregion %d,%d %dx%d %d (%d)\n"</literal><operator>,</operator>
<name>y</name><operator>,</operator> <name>x</name><operator>,</operator> <name>height</name><operator>,</operator> <name>width</name><operator>,</operator>
<name><name>butPtr</name><operator>-&gt;</operator><name>code</name></name><operator>,</operator> <name>code</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>step_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>step_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>basey</name> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>basey</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>basex</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>X</name></name> <operator>=</operator> <name>basex</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>butPtr</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>basecode</name> <operator>+</operator> <name>code</name></expr>;</expr_stmt>

<return>return <expr><name>butPtr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>mseRegion</name> <modifier>*</modifier></type>
<name>any_mouse_region</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>small</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>butPtr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>butPtr</name> <operator>=</operator> <name>regionList</name></expr>;</init> <condition><expr><name>butPtr</name></expr>;</condition> <incr><expr><name>butPtr</name> <operator>=</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>small</name> <operator>^</operator> <operator>(</operator><name><name>butPtr</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>y</name></name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>Y</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>x</name></name> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>butPtr</name><operator>-&gt;</operator><name>X</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<return>return <expr><name>butPtr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>mseRegion</name> <modifier>*</modifier></type>
<name>dlg_mouse_region</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>any_mouse_region</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>mseRegion</name> <modifier>*</modifier></type>
<name>dlg_mouse_bigregion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>any_mouse_region</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>mouse_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>mouse_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
