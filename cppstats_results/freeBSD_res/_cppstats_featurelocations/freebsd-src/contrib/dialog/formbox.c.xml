<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/formbox.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLEN</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * FORMBOX_TAGS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemName</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemNameY</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemNameX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 2]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemText</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 3]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemTextY</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 4]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemTextX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 5]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemTextFLen</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 6]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemTextILen</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 7]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemHelp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dialog_vars.item_help ? items[LLEN(i) + 8] : dlg_strempty())</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_readonly</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>text_flen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_hidden</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>in_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollamt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>y</name> <operator>&gt;=</operator> <name>scrollamt</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>-</operator> <name>scrollamt</name> <operator>&lt;</operator> <call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ok_move</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollamt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>in_window</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>scrollamt</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>move_past</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_item</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollamt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>choice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ok_move</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_y</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_x</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>name_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_show_string</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>menubox_attr</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_x</name></name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>move_past</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name_x</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>text_len</name></name> <operator>&amp;&amp;</operator> <call><name>ok_move</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_y</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_x</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>this_item_attribute</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>text_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>text_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>this_item_attribute</name> <operator>=</operator> <ternary><condition><expr><name>choice</name></expr>
?</condition><then> <expr><name>form_active_text_attr</name></expr>
</then><else>: <expr><name>form_text_attr</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>this_item_attribute</name> <operator>=</operator> <name>form_item_readonly_attr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_show_string</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>this_item_attribute</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_x</name></name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>is_hidden</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>move_past</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>text_x</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_form</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollamt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>print_item</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>item</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>n</name> <operator>==</operator> <name>choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wbkgdset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>menubox_attr</name> <operator>|</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtobot</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_choice</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type> <name>noneditable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>noneditable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><index>[<expr><name>choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>choice</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>noneditable</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>form_limit</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>limit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_first_field</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>choice</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>choice</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>choice</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_last_field</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>choice</name> <operator>&lt;</operator> <name>item_no</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>choice</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>choice</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tab_next</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stepsize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>choice</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollamt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_choice</name> <init>= <expr><operator>*</operator><name>choice</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_scroll</name> <init>= <expr><operator>*</operator><name>scrollamt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wrapped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>choice</name> <operator>+=</operator> <name>stepsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>choice</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>choice</name> <operator>=</operator> <name>item_no</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wrapped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>choice</name> <operator>&gt;=</operator> <name>item_no</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>choice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wrapped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>*</operator><name>choice</name> <operator>!=</operator> <name>old_choice</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><operator>*</operator><name>choice</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_choice</name> <operator>==</operator> <operator>*</operator><name>choice</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>item</name> <operator>+</operator> <name>old_choice</name></expr></argument>, <argument><expr><operator>*</operator><name>scrollamt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scrollamt</name> <operator>&lt;</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>scrollamt</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scrollamt</name> <operator>&gt;</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>scrollamt</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scrollamt</name> <operator>!=</operator> <name>old_scroll</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wrapped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>scrollamt</name> <operator>=</operator> <name>old_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>choice</name> <operator>=</operator> <name>old_choice</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>scrollok</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wscrl</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>*</operator><name>scrollamt</name> <operator>-</operator> <name>old_scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scrollok</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>choice</name> <operator>!=</operator> <name>old_choice</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>old_choice</name> <operator>!=</operator> <operator>*</operator><name>choice</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>old_scroll</name> <operator>!=</operator> <operator>*</operator><name>scrollamt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type>
<name>scroll_next</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>DIALOG_FORMITEM</name></type> <name><name>item</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stepsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>choice</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollamt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_choice</name> <init>= <expr><operator>*</operator><name>choice</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_scroll</name> <init>= <expr><operator>*</operator><name>scrollamt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_row</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><name>old_choice</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>old_choice</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name>old_scroll</name> <operator>+</operator> <name>stepsize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stepsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_row</name> <operator>!=</operator> <name>old_scroll</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>old_scroll</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>old_scroll</name> <operator>+</operator> <name>stepsize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;</operator> <call><name>form_limit</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_row</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_y</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>new_row</name> <operator>-</operator> <name>target</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>old_row</name> <operator>-</operator> <name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_row</name> <operator>=</operator> <name>new_row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>choice</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>old_choice</name> <operator>!=</operator> <operator>*</operator><name>choice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>item</name> <operator>+</operator> <name>old_choice</name></expr></argument>, <argument><expr><operator>*</operator><name>scrollamt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>scrollamt</name> <operator>=</operator> <operator>*</operator><name>choice</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scrollamt</name> <operator>!=</operator> <name>old_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scrollok</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wscrl</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>*</operator><name>scrollamt</name> <operator>-</operator> <name>old_scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scrollok</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>old_choice</name> <operator>!=</operator> <operator>*</operator><name>choice</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>old_scroll</name> <operator>!=</operator> <operator>*</operator><name>scrollamt</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>real_length</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>text_flen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>text_flen</name></name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>text_flen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>-</operator><name><name>item</name><operator>-&gt;</operator><name>text_flen</name></name></expr>
</then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>text_len</name></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_FORM_ELTs</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_height</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>real_len</name> <init>= <expr><call><name>real_length</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_ilen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_ilen</name> <operator>=</operator> <name>real_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min_h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>min_h</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>min_h</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>min_w</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>min_w</name></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>real_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_len</name> <operator>=</operator> <call><name>real_length</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_len</name> <init>= <expr><call><name>dlg_max_input</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_ilen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_text</name> <init>= <expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>max_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><literal type="string">"make_FORM_ELTs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_ilen</name></expr></argument>, <argument><expr><name>old_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_free</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>min_height</name> <operator>=</operator> <name>min_h</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>min_width</name> <operator>=</operator> <name>min_w</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_default_formitem</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sTEXT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_valid_buttonindex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>non_editable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_next_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>non_editable</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_next_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prev_valid_buttonindex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>non_editable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_prev_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>non_editable</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_prev_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAVIGATE_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_FIELD_NEXT, TAB ), DLG_KEYS_DATA( DLGK_FIELD_PREV, KEY_BTAB ), DLG_KEYS_DATA( DLGK_ITEM_NEXT, CHR_NEXT ), DLG_KEYS_DATA( DLGK_ITEM_NEXT, KEY_DOWN ), DLG_KEYS_DATA( DLGK_ITEM_NEXT, KEY_RIGHT ), DLG_KEYS_DATA( DLGK_ITEM_NEXT, KEY_NEXT ), DLG_KEYS_DATA( DLGK_ITEM_PREV, CHR_PREVIOUS ), DLG_KEYS_DATA( DLGK_ITEM_PREV, KEY_PREVIOUS ), DLG_KEYS_DATA( DLGK_ITEM_PREV, KEY_LEFT ), DLG_KEYS_DATA( DLGK_ITEM_PREV, KEY_UP ), DLG_KEYS_DATA( DLGK_PAGE_NEXT, KEY_NPAGE ), DLG_KEYS_DATA( DLGK_PAGE_PREV, KEY_PPAGE )</cpp:value></cpp:define>















<function><type><name>int</name></type>
<name>dlg_form</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>form_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>current_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><name>NAVIGATE_BINDINGS</name></expr>,
<expr><name>TOGGLEKEY_BINDINGS</name></expr>,
<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding2</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>INPUTSTR_BINDINGS</name></expr>,
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><name>NAVIGATE_BINDINGS</name></expr>,

<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_height</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_width</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>form_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first_trace</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chr_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>default_button</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><call><name>dlg_default_button</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name>sTEXT</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cur_x</name></decl>, <decl><type ref="prev"/><name>cur_y</name></decl>, <decl><type ref="prev"/><name>box_x</name></decl>, <decl><type ref="prev"/><name>box_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>choice</name> <init>= <expr><call><name>dlg_default_formitem</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_choice</name></decl>, <decl><type ref="prev"/><name>new_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrollamt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>min_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>was_autosize</name> <init>= <expr><operator>(</operator><name>height</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>width</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_buttons</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>scroll_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>field_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>non_editable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>form</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name> <init>= <expr><call><name>dlg_ok_labels</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#%sform args:\n"</literal><operator>,</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>formitem_type</name></name></expr>
?</condition><then> <expr><literal type="string">"password"</literal></expr>
</then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"lheight"</literal></expr></argument>, <argument><expr><name>form_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"llength"</literal></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><operator>*</operator><name>current_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_FORM_ELTs</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_button_layout</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_does_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>retry</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_tab_correct_str</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>min_width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>form_height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>form_height</name> <operator>=</operator> <name>min_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_autosize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>form_height</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>SLINES</name> <operator>-</operator> <name>height</name></expr></argument>, <argument><expr><name>form_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <name>form_height</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>thigh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>twide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thigh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>twide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thigh</name> <operator>=</operator> <name>SLINES</name> <operator>-</operator> <operator>(</operator><name>height</name> <operator>-</operator> <operator>(</operator><name>thigh</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>form_height</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>thigh</name></expr></argument>, <argument><expr><name>form_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dlg_print_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>dlg_box_x_ordinate</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>dlg_box_y_ordinate</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>dlg_new_window</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"formbox"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"formbox"</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_mouse_setbase</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_bottom_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_title</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form_width</name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cur_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>box_y</name> <operator>=</operator> <name>cur_y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>box_x</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>form_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>dlg_sub_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>form_height</name></expr></argument>, <argument><expr><name>form_width</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>box_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>x</name> <operator>+</operator> <name>box_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="string">"formfield"</literal></expr></argument>, <argument><expr><name>binding2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_draw_box</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>box_y</name></expr></argument>, <argument><expr><name>box_x</name></expr></argument>, <argument><expr><name>form_height</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>form_width</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>, <argument><expr><name>menubox_border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_mouse_mkbigregion</name><argument_list>(<argument><expr><call><name>getbegy</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getbegx</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxy</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>KEY_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scroll_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <call><name>set_choice</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>&amp;</operator><name><name>items</name><index>[<expr><name>choice</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>non_editable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>next_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>edit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scroll_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_form</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_scrollbar</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name>scrollamt</name></expr></argument>,
<argument><expr><name>scrollamt</name></expr></argument>,
<argument><expr><name>scrollamt</name> <operator>+</operator> <name>form_height</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>min_height</name></expr></argument>,
<argument><expr><name>box_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>box_x</name> <operator>+</operator> <name>form_width</name></expr></argument>,
<argument><expr><name>box_y</name></expr></argument>,
<argument><expr><name>box_y</name> <operator>+</operator> <name>form_height</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>menubox_border2_attr</name></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scroll_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>show_buttons</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_item_help</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>state</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">1000</literal></expr>
</then><else>: <expr><name>state</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_trace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_trace</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field_changed</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>field_changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chr_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>&amp;</operator><name><name>items</name><index>[<expr><name>choice</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>text_ilen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_item_help</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_show_string</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>chr_offset</name></expr></argument>,
<argument><expr><name>form_active_text_attr</name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_x</name></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_len</name></name></expr></argument>,
<argument><expr><call><name>is_hidden</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsyncup</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcursyncup</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>field_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_mouse_wgetch</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>sTEXT</name><operator>)</operator></expr> ?</condition><then> <expr><name>form</name></expr> </then><else>: <expr><name>dialog</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_result_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fkey</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dlg_char_to_button</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_scroll</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_tab</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>move_by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_PPAGE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><name>DLGK_PAGE_PREV</name></expr>:</case>
<expr_stmt><expr><name>do_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <operator>-</operator><name>form_height</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_NPAGE</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><name>DLGK_PAGE_NEXT</name></expr>:</case>
<expr_stmt><expr><name>do_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <name>form_height</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DLGK_TOGGLE</name></expr>:</case>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>state</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>dlg_enter_buttoncode</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>DLG_EXIT_OK</name></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>DLGK_LEAVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>DLGK_GRID_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><name>DLGK_ITEM_PREV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_tab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>prev_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<case>case <expr><name>DLGK_FORM_PREV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_first_field</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_tab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_state</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>prev_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_state</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_choice</name> <operator>=</operator> <name>item_no</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>!=</operator> <name>new_choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name> <operator>+</operator> <name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>new_choice</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<case>case <expr><name>DLGK_FIELD_PREV</name></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>prev_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>DLGK_FIELD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>next_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>DLGK_GRID_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<case>case <expr><name>DLGK_ITEM_NEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_tab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>next_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<case>case <expr><name>DLGK_FORM_NEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_last_field</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_tab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>move_by</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>next_valid_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sTEXT</name></expr></argument>, <argument><expr><name>non_editable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_buttons</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name> <operator>&amp;&amp;</operator> <name>choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name> <operator>+</operator> <name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_will_resize</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>old_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>old_width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dlg_resize_cleanup</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_unregister_window</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MOUSE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cell</name> <init>= <expr><name>key</name> <operator>-</operator> <call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>(</operator><name>cell</name> <operator>/</operator> <call><name>getmaxx</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>scrollamt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>(</operator><name>cell</name> <operator>%</operator> <call><name>getmaxx</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_y</name> <operator>==</operator> <name>row</name>
<operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_x</name> <operator>&lt;=</operator> <name>col</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_x</name> <operator>+</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>&gt;</operator> <name>col</name>
<operator>||</operator> <operator>(</operator><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_y</name> <operator>==</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_y</name>
<operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_x</name> <operator>&gt;</operator> <name>col</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>field_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_y</name> <operator>==</operator> <name>row</name>
<operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_x</name> <operator>&lt;=</operator> <name>col</name>
<operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_x</name> <operator>+</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_ilen</name> <operator>&gt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>field_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>field_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name> <operator>+</operator> <name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>key</name> <operator>-</operator> <name>M_EVENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>new_scroll</name> <operator>=</operator> <name>scrollamt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_choice</name> <operator>=</operator> <name>choice</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_scroll</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>scroll_next</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>move_by</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_choice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_scroll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>!=</operator> <name>new_choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>new_choice</name></expr>;</expr_stmt>
<expr_stmt><expr><name>field_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollamt</name> <operator>!=</operator> <name>new_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrollamt</name> <operator>=</operator> <name>new_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scroll_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_tab</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tab_next</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>, <argument><expr><name>move_by</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_choice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_scroll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>!=</operator> <name>new_choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>new_choice</name></expr>;</expr_stmt>
<expr_stmt><expr><name>field_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollamt</name> <operator>!=</operator> <name>new_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrollamt</name> <operator>=</operator> <name>new_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scroll_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>sTEXT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_readonly</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <call><name>dlg_edit_string</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chr_offset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>fkey</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>edit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_show_string</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>chr_offset</name></expr></argument>,
<argument><expr><name>form_active_text_attr</name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_y</name></name> <operator>-</operator> <name>scrollamt</name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_x</name></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>text_len</name></name></expr></argument>,
<argument><expr><call><name>is_hidden</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>dlg_mouse_free_regions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_unregister_window</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>current_item</name> <operator>=</operator> <name>choice</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_free_formitems</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name_free</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text_free</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>help_free</name> <operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>help</name> <operator>!=</operator> <call><name>dlg_strempty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>dlg_ordinate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>result</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dialog_form</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>form_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>choice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type><name>listitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_VARS</name></type> <name>save_vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_save_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>listitems</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DIALOG_FORMITEM</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>item_no</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>, <argument><expr><literal type="string">"dialog_form"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>formitem_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>ItemName</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>ItemName</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_y</name> <operator>=</operator> <call><name>dlg_ordinate</name><argument_list>(<argument><expr><call><name>ItemNameY</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_x</name> <operator>=</operator> <call><name>dlg_ordinate</name><argument_list>(<argument><expr><call><name>ItemNameX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>ItemText</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>ItemText</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_y</name> <operator>=</operator> <call><name>dlg_ordinate</name><argument_list>(<argument><expr><call><name>ItemTextY</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_x</name> <operator>=</operator> <call><name>dlg_ordinate</name><argument_list>(<argument><expr><call><name>ItemTextX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>ItemTextFLen</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_ilen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>ItemTextILen</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>help</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>item_help</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>ItemHelp</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>dlg_strempty</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_form</name><argument_list>(<argument><expr><name>title</name></expr></argument>,
<argument><expr><name>cprompt</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>form_height</name></expr></argument>,
<argument><expr><name>item_no</name></expr></argument>,
<argument><expr><name>listitems</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLG_EXIT_OK</name></expr>:</case>
<case>case <expr><name>DLG_EXIT_EXTRA</name></expr>:</case>
<expr_stmt><expr><name>show_status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLG_EXIT_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_add_help_formitem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>help_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>listitems</name><index>[<expr><name>choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_status</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>help_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name>help_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_add_separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text_flen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_add_separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_add_last_key</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_free_formitems</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_restore_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
