<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/mixedgauge.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLEN</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * MIXEDGAUGE_TAGS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemData</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;items[LLEN(i)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemName</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemText</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>items[LLEN(i) + 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_HIGH</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_WIDE</name></cpp:macro> <cpp:value>(10 + 2 * (2 + MARGIN))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>caption</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>, <name>old_height</name>, <name>min_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>old_width</name>, <name>min_width</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_name</name></decl>, <name>len_text</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_MIXEDGAUGE</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>status_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>given</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>freeMe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>freeMe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>given</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>given</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Passed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Checked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"In Progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>given</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>need</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>++</operator><name>given</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>freeMe</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"%3s%%"</literal></expr></argument>, <argument><expr><name>given</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>given</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>given</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>myprint_status</name><parameter_list>(<parameter><decl><type><name>DIALOG_MIXEDGAUGE</name> <modifier>*</modifier></type> <name>dlg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_y</name> <init>= <expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_x</name> <init>= <expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><name><name>dlg</name><operator>-&gt;</operator><name>len_text</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lm</name> <init>= <expr><name>limit_x</name> <operator>-</operator> <name><name>dlg</name><operator>-&gt;</operator><name>len_text</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bm</name> <init>= <expr><name>limit_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>xxx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>freeMe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bm</name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>last_y</name></expr></argument>, <argument><expr><name>last_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>item</name> <operator>&lt;</operator> <name><name>dlg</name><operator>-&gt;</operator><name>item_no</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>item</name> <operator>+</operator> <name>MARGIN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>bm</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>status_string</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>item</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freeMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>freeMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>item</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name> <operator>+</operator> <operator>(</operator><name>cells</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>freeMe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>title_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cells</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name> <operator>+</operator> <operator>(</operator><name>cells</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>title_attr</name> <operator>&amp;</operator> <name>A_REVERSE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"%f%%"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>percent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xxx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>cells</name> <operator>*</operator> <operator>(</operator><name>percent</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">100.0</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>xxx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch1</name> <init>= <expr><call><name>winch</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title_attr</name> <operator>&amp;</operator> <name>A_REVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch1</name> <operator>&amp;=</operator> <operator>~</operator><name>A_REVERSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>freeMe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name> <operator>+</operator> <operator>(</operator><name>cells</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>limit_x</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>last_y</name></expr></argument>, <argument><expr><name>last_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mydraw_mixed_box</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>boxchar</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>borderchar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_draw_box</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>boxchar</name></expr></argument>, <argument><expr><name>borderchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Overall Progress"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>save2</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>title_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>clean_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>dlg_strclone</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_trim_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_tab_correct_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>dlg_update_mixedgauge</name><parameter_list>(<parameter><decl><type><name>DIALOG_MIXEDGAUGE</name> <modifier>*</modifier></type> <name>dlg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>percent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>gauge_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>MARGIN</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wprintw</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><literal type="string">"%3d%%"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>percent</name> <operator>*</operator> <operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>MARGIN</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>title_attr</name> <operator>&amp;</operator> <name>A_REVERSE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attroff</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name> <init>= <expr><call><name>winch</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title_attr</name> <operator>&amp;</operator> <name>A_REVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>&amp;=</operator> <operator>~</operator><name>A_REVERSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>myprint_status</name><argument_list>(<argument><expr><name>dlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>dlg_begin_mixedgauge</name><parameter_list>(<parameter><decl><type><name>DIALOG_MIXEDGAUGE</name> <modifier>*</modifier></type> <name>dlg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>began</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aTitle</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aPrompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>aHeight</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>aWidth</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>aItemNo</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>began</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dlg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>aTitle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>clean_copy</name><argument_list>(<argument><expr><name>aPrompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dlg</name><operator>-&gt;</operator><name>old_height</name></name> <operator>=</operator> <name>aHeight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dlg</name><operator>-&gt;</operator><name>old_width</name></name> <operator>=</operator> <name>aWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>item_no</name></name> <operator>=</operator> <name>aItemNo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DIALOG_LISTITEM</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>aItemNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><literal type="string">"dialog_mixedgauge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>len_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>len_text</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>aItemNo</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>thisWidth</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>ItemName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dlg</name><operator>-&gt;</operator><name>len_name</name></name> <operator>&lt;</operator> <name>thisWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>len_name</name></name> <operator>=</operator> <name>thisWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>ItemName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>ItemText</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <name>MIN_HIGH</name> <operator>+</operator> <name>aItemNo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <name>MIN_WIDE</name> <operator>+</operator> <name><name>dlg</name><operator>-&gt;</operator><name>len_name</name></name> <operator>+</operator> <name>GUTTER</name> <operator>+</operator> <name><name>dlg</name><operator>-&gt;</operator><name>len_text</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>min_height</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nodelay</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dlg</name><operator>-&gt;</operator><name>old_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dlg</name><operator>-&gt;</operator><name>old_width</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>min_height</name></name></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>min_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_size</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>dlg_box_x_ordinate</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>dlg_box_y_ordinate</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name> <operator>=</operator> <call><name>dlg_new_window</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>werase</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_title</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_helpline</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>wmove</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>item_no</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dlg</name><operator>-&gt;</operator><name>caption</name></name> <operator>=</operator> <call><name>dlg_sub_window</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>dlg</name><operator>-&gt;</operator><name>item_no</name></name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name><name>dlg</name><operator>-&gt;</operator><name>item_no</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>,
<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mydraw_mixed_box</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>+</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>+</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>MARGIN</name><operator>)</operator></expr></argument>,
<argument><expr><name>dialog_attr</name></expr></argument>,
<argument><expr><name>border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>began</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>dlg_finish_mixedgauge</name><parameter_list>(<parameter><decl><type><name>DIALOG_MIXEDGAUGE</name> <modifier>*</modifier></type> <name>dlg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wrefresh</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nodelay</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dlg</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>dialog_mixedgauge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>percent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_MIXEDGAUGE</name></type> <name>dlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>began</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#mixedgauge args:\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"percent"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"llength"</literal></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_begin_mixedgauge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>began</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cprompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_update_mixedgauge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dlg</name></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dlg_finish_mixedgauge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dlg</name></expr></argument>, <argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
