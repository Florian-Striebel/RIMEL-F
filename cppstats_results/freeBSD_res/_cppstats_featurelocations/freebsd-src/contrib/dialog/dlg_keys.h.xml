<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/dlg_keys.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DLG_KEYS_H_included</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_KEYS_H_included</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_toupper</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>towupper((wint_t)ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_isupper</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>iswupper((wint_t)ch)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_toupper</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch) &gt; 0 &amp;&amp; (ch) &lt;= 255) ? toupper(ch) : (ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_isupper</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isalpha(ch) &amp;&amp; isupper(ch))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_function_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curses_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dialog_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>DLG_KEYS_BINDING</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_KEYS_DATA</name><parameter_list>(<parameter><type><name>dialog</name></type></parameter>, <parameter><type><name>curses</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (curses) &gt;= KEY_MIN, curses, dialog }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_KEYS_BINDING</name></cpp:macro> <cpp:value>{ -1, 0, 0 }</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum <block>{
<decl><name>DLGK_MIN</name> <init>= <expr><name>KEY_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>DLGK_OK</name></decl>,
<decl><name>DLGK_CANCEL</name></decl>,
<decl><name>DLGK_EXTRA</name></decl>,
<decl><name>DLGK_HELP</name></decl>,
<decl><name>DLGK_ESC</name></decl>,

<decl><name>DLGK_PAGE_FIRST</name></decl>,
<decl><name>DLGK_PAGE_LAST</name></decl>,
<decl><name>DLGK_PAGE_NEXT</name></decl>,
<decl><name>DLGK_PAGE_PREV</name></decl>,

<decl><name>DLGK_ITEM_FIRST</name></decl>,
<decl><name>DLGK_ITEM_LAST</name></decl>,
<decl><name>DLGK_ITEM_NEXT</name></decl>,
<decl><name>DLGK_ITEM_PREV</name></decl>,

<decl><name>DLGK_FIELD_FIRST</name></decl>,
<decl><name>DLGK_FIELD_LAST</name></decl>,
<decl><name>DLGK_FIELD_NEXT</name></decl>,
<decl><name>DLGK_FIELD_PREV</name></decl>,

<decl><name>DLGK_FORM_FIRST</name></decl>,
<decl><name>DLGK_FORM_LAST</name></decl>,
<decl><name>DLGK_FORM_NEXT</name></decl>,
<decl><name>DLGK_FORM_PREV</name></decl>,

<decl><name>DLGK_GRID_UP</name></decl>,
<decl><name>DLGK_GRID_DOWN</name></decl>,
<decl><name>DLGK_GRID_LEFT</name></decl>,
<decl><name>DLGK_GRID_RIGHT</name></decl>,

<decl><name>DLGK_DELETE_LEFT</name></decl>,
<decl><name>DLGK_DELETE_RIGHT</name></decl>,
<decl><name>DLGK_DELETE_ALL</name></decl>,

<decl><name>DLGK_ENTER</name></decl>,
<decl><name>DLGK_BEGIN</name></decl>,
<decl><name>DLGK_FINAL</name></decl>,
<decl><name>DLGK_SELECT</name></decl>,
<decl><name>DLGK_HELPFILE</name></decl>,
<decl><name>DLGK_TRACE</name></decl>,
<decl><name>DLGK_TOGGLE</name></decl>,
<decl><name>DLGK_LEAVE</name></decl>
}</block></enum></type> <name>DLG_KEYS_ENUM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_DLGK_MOUSE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code) &gt;= M_EVENT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLGK_MOUSE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code) + M_EVENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELPKEY_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_HELPFILE, CHR_HELP ), DLG_KEYS_DATA( DLGK_HELPFILE, KEY_F(1) ), DLG_KEYS_DATA( DLGK_HELPFILE, KEY_HELP )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTERKEY_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_ENTER, '\n' ), DLG_KEYS_DATA( DLGK_ENTER, '\r' ), DLG_KEYS_DATA( DLGK_ENTER, KEY_ENTER ), DLG_KEYS_DATA( DLGK_LEAVE, CHR_LEAVE )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUTSTR_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_BEGIN, KEY_HOME ), DLG_KEYS_DATA( DLGK_DELETE_ALL, CHR_KILL ), DLG_KEYS_DATA( DLGK_DELETE_LEFT, CHR_BACKSPACE ), DLG_KEYS_DATA( DLGK_DELETE_LEFT, KEY_BACKSPACE ), DLG_KEYS_DATA( DLGK_DELETE_RIGHT, CHR_DELETE ), DLG_KEYS_DATA( DLGK_DELETE_RIGHT, KEY_DC ), DLG_KEYS_DATA( DLGK_FINAL, KEY_END ), DLG_KEYS_DATA( DLGK_GRID_LEFT, KEY_LEFT ), DLG_KEYS_DATA( DLGK_GRID_RIGHT, KEY_RIGHT )</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLL_FKEY_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_GRID_DOWN, KEY_DOWN ), DLG_KEYS_DATA( DLGK_GRID_UP, KEY_UP ), DLG_KEYS_DATA( DLGK_PAGE_FIRST, KEY_HOME ), DLG_KEYS_DATA( DLGK_PAGE_LAST, KEY_END ), DLG_KEYS_DATA( DLGK_PAGE_NEXT, KEY_NPAGE ), DLG_KEYS_DATA( DLGK_PAGE_PREV, KEY_PPAGE )</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLLKEY_BINDINGS</name></cpp:macro> <cpp:value>SCROLL_FKEY_BINDINGS, DLG_KEYS_DATA( DLGK_GRID_DOWN, 'J' ), DLG_KEYS_DATA( DLGK_GRID_DOWN, 'j' ), DLG_KEYS_DATA( DLGK_GRID_UP, 'K' ), DLG_KEYS_DATA( DLGK_GRID_UP, 'k' ), DLG_KEYS_DATA( DLGK_PAGE_FIRST, 'g' ), DLG_KEYS_DATA( DLGK_PAGE_LAST, 'G' ), DLG_KEYS_DATA( DLGK_PAGE_NEXT, 'F' ), DLG_KEYS_DATA( DLGK_PAGE_NEXT, 'f' ), DLG_KEYS_DATA( DLGK_PAGE_PREV, 'B' ), DLG_KEYS_DATA( DLGK_PAGE_PREV, 'b' )</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAVERSE_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_ENTER, CHR_SPACE ), DLG_KEYS_DATA( DLGK_FIELD_NEXT, KEY_DOWN ), DLG_KEYS_DATA( DLGK_FIELD_NEXT, KEY_RIGHT ), DLG_KEYS_DATA( DLGK_FIELD_NEXT, TAB ), DLG_KEYS_DATA( DLGK_FIELD_PREV, KEY_UP ), DLG_KEYS_DATA( DLGK_FIELD_PREV, KEY_BTAB ), DLG_KEYS_DATA( DLGK_FIELD_PREV, KEY_LEFT )</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOGGLEKEY_BINDINGS</name></cpp:macro> <cpp:value>DLG_KEYS_DATA( DLGK_TOGGLE, CHR_SPACE )</cpp:value></cpp:define>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_button_key</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_lookup_key</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_ok_button_key</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_result_key</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_register_buttons</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_register_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_unregister_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_parse_bindkey</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_dump_keys</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_dump_window_keys</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
