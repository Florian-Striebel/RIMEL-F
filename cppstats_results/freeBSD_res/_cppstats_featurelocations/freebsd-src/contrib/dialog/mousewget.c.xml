<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/mousewget.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mouse_wgetch</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_errs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_getc</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MOUSE</name></expr></cpp:if>

<expr_stmt><expr><name>mouse_err</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>KEY_MOUSE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MEVENT</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getmouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mseRegion</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#mouse-click abs %d,%d (rel %d,%d)\n"</literal><operator>,</operator>
<name><name>event</name><operator>.</operator><name>y</name></name><operator>,</operator> <name><name>event</name><operator>.</operator><name>x</name></name><operator>,</operator>
<name><name>event</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>,</operator>
<name><name>event</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dlg_mouse_region</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dlg_mouse_bigregion</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>event</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>event</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>X</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>step_x</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>code</name></name><operator>)</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>step_x</name></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>step_x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>row</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_err</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_err</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block> while <condition>(<expr><name>ignore_errs</name> <operator>&amp;&amp;</operator> <name>mouse_err</name></expr>)</condition>;</do>

<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_mouse_wgetch</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mouse_wgetch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_mouse_wgetch_nowait</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mouse_wgetch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
