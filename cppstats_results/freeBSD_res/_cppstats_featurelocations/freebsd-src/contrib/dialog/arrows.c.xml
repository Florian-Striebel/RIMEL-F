<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/arrows.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSES_WACS_ARRAY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURSES_WACS_SYMBOLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WACS_DARROW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WACS_UARROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WACS_DARROW</name></cpp:macro> <cpp:value>&amp;(CURSES_WACS_ARRAY['.'])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WACS_UARROW</name></cpp:macro> <cpp:value>&amp;(CURSES_WACS_ARRAY['-'])</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_acs</name><parameter_list>(<parameter><type><name>win</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wadd_wch(win, W ##code)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_acs</name><parameter_list>(<parameter><type><name>win</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>waddch(win, dlg_boxchar(code))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_LEFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_RIGHT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>chtype</name></type>
<name>merge_colors</name><parameter_list>(<parameter><decl><type><name>chtype</name></type> <name>foreground</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>background</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>result</name> <init>= <expr><name>foreground</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>foreground</name> <operator>&amp;</operator> <name>A_COLOR</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>background</name> <operator>&amp;</operator> <name>A_COLOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>fg_f</name></decl>, <decl><type ref="prev"/><name>bg_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fg_b</name></decl>, <decl><type ref="prev"/><name>bg_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fg_pair</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator> <call><name>PAIR_NUMBER</name><argument_list>(<argument><expr><name>foreground</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bg_pair</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator> <call><name>PAIR_NUMBER</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pair_content</name><argument_list>(<argument><expr><name>fg_pair</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg_f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg_f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name>
<operator>&amp;&amp;</operator> <call><name>pair_content</name><argument_list>(<argument><expr><name>bg_pair</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg_b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>&amp;=</operator> <operator>~</operator><name>A_COLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>dlg_color_pair</name><argument_list>(<argument><expr><name>fg_f</name></expr></argument>, <argument><expr><name>bg_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>merge_colors</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>dlg_draw_helpline</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>decorations</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bottom</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>help_line</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>dialog_vars</name><operator>.</operator><name>help_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>bottom</name> <operator>=</operator> <call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>help_line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other</name> <init>= <expr><ternary><condition><expr><name>decorations</name></expr> ?</condition><then> <expr><operator>(</operator><name>ON_LEFT</name> <operator>+</operator> <name>ON_RIGHT</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>avail</name> <init>= <expr><operator>(</operator><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>other</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_real_columns</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>help_line</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name>avail</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_x</name></decl>, <decl><type ref="prev"/><name>cur_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <ternary><condition><expr><name>decorations</name></expr> ?</condition><then> <expr><name>ON_LEFT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>other</name> <operator>+</operator> <operator>(</operator><name>avail</name> <operator>-</operator> <name>limit</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>dialog_vars</name><operator>.</operator><name>help_line</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_arrows2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>top_arrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bottom_arrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>borderattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_x</name></decl>, <decl><type ref="prev"/><name>cur_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_x</name> <init>= <expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>draw_top</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_toplevel</name> <init>= <expr><operator>(</operator><call><name>wgetparent</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>stdscr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>title</name></name> <operator>&amp;&amp;</operator> <name>is_toplevel</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>top</name> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>MARGIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>have</name> <init>= <expr><operator>(</operator><name>limit_x</name> <operator>-</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name>x</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <name>have</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_top</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top_arrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>merge_colors</name><argument_list>(<argument><expr><name>uarrow_attr</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>add_acs</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ACS_UARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="string">"(-)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>whline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ON_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mouse_mkbutton</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>KEY_PPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom_arrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>merge_colors</name><argument_list>(<argument><expr><name>darrow_attr</name></expr></argument>, <argument><expr><name>borderattr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>add_acs</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ACS_DARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="string">"(+)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>whline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ON_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>mouse_mkbutton</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>KEY_NPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_scrollbar</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>first_data</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>this_data</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>next_data</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>total_data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>borderattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oldy</name></decl>, <decl><type ref="prev"/><name>oldx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_arrow</name> <init>= <expr><operator>(</operator><name>first_data</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_arrow</name> <init>= <expr><operator>(</operator><name>next_data</name> <operator>&lt;</operator> <name>total_data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>oldy</name></expr></argument>, <argument><expr><name>oldx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_helpline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom_arrow</name> <operator>||</operator> <name>top_arrow</name> <operator>||</operator> <name><name>dialog_state</name><operator>.</operator><name>use_scrollbar</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>percent</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><name>total_data</name></expr>
?</condition><then> <expr><literal type="number">100</literal></expr>
</then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>next_data</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator>
<operator>/</operator> <name>total_data</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>percent</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>position_indicator_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d%%"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>right</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>whline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARSIZE</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) (0.5 + (double) ((all_high * (int) (num)) / (double) total_data))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDSIZE</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) ((double) ((all_high * (int) (num)) / (double) all_diff))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>use_scrollbar</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>all_high</name> <init>= <expr><operator>(</operator><name>bottom</name> <operator>-</operator> <name>top</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>this_data</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>this_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_data</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>all_high</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>all_diff</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>total_data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bar_diff</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>next_data</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>this_data</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bar_high</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bar_high</name> <operator>=</operator> <call><name>ORDSIZE</name><argument_list>(<argument><expr><name>bar_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bar_high</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bar_high</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bar_high</name> <operator>&lt;</operator> <name>all_high</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bar_last</name> <init>= <expr><call><name>BARSIZE</name><argument_list>(<argument><expr><name>next_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bar_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wvline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ACS_VLINE</name> <operator>|</operator> <name>A_REVERSE</name></expr></argument>, <argument><expr><name>all_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bar_y</name> <operator>=</operator> <call><name>ORDSIZE</name><argument_list>(<argument><expr><name>this_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bar_y</name> <operator>&gt;=</operator> <name>bar_last</name> <operator>&amp;&amp;</operator> <name>bar_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bar_y</name> <operator>=</operator> <name>bar_last</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bar_last</name> <operator>-</operator> <name>bar_y</name> <operator>&gt;</operator> <name>bar_high</name> <operator>&amp;&amp;</operator> <name>bar_high</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>bar_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bar_last</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>bar_last</name></expr></argument>, <argument><expr><name>all_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>bar_y</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>position_indicator_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WACS_BLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>wvline_set</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>WACS_BLOCK</name></expr></argument>, <argument><expr><name>bar_last</name> <operator>-</operator> <name>bar_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>wvline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ACS_BLOCK</name></expr></argument>, <argument><expr><name>bar_last</name> <operator>-</operator> <name>bar_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_draw_arrows2</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>top_arrow</name></expr></argument>,
<argument><expr><name>bottom_arrow</name></expr></argument>,
<argument><expr><name>left</name> <operator>+</operator> <name>ARROWS_COL</name></expr></argument>,
<argument><expr><name>top</name></expr></argument>,
<argument><expr><name>bottom</name></expr></argument>,
<argument><expr><name>attr</name></expr></argument>,
<argument><expr><name>borderattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>oldy</name></expr></argument>, <argument><expr><name>oldx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_arrows</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>top_arrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bottom_arrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_draw_helpline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_arrows2</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>top_arrow</name></expr></argument>,
<argument><expr><name>bottom_arrow</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>,
<argument><expr><name>top</name></expr></argument>,
<argument><expr><name>bottom</name></expr></argument>,
<argument><expr><name>menubox_border2_attr</name></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
