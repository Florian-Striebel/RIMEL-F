<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/util.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_internals.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_KEEP_TITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD_Version__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__NetBSD_Version__</name> <operator>&gt;=</operator> <literal type="number">800000000</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_KEEP_TITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_KEEP_TITE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAN_KEEP_TITE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSESW_TERM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncursesw/term.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_TERM_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/term.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;term.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHGAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NCURSES_VERSION_PATCH</name> <operator>&gt;=</operator> <literal type="number">20060715</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WCHGAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WCHGAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WCHGAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WCHGAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>DIALOG_STATE</name></type> <name>dialog_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_VARS</name></type> <name>dialog_vars</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WGETPARENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINDOW__PARENT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_WGETPARENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEED_WGETPARENT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>concat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_DATA</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>comment</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, #name "_color", comment " color"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_DATA</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>comment</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_colors.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_DATA</name><parameter_list>(<parameter><type><name>upr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, concat(DLGC_FG_,upr), concat(DLGC_BG_,upr), concat(DLGC_HL_,upr), concat(DLGC_UL_,upr), concat(DLGC_RV_,upr)</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_DATA</name><parameter_list>(<parameter><type><name>upr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, concat(DLGC_FG_,upr), concat(DLGC_BG_,upr), concat(DLGC_HL_,upr)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_DATA</name><parameter_list>(<parameter><type><name>upr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UseShadow</name><parameter_list>(<parameter><type><name>dw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dw) != 0 &amp;&amp; (dw)-&gt;normal != 0 &amp;&amp; (dw)-&gt;shadow != 0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA</name><parameter_list>(<parameter><type><name>atr</name></type></parameter>,<parameter><type><name>upr</name></type></parameter>,<parameter><type><name>lwr</name></type></parameter>,<parameter><type><name>cmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ atr COLOR_DATA(upr) RC_DATA(lwr,cmt) }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>DIALOG_COLORS</name></type> <name><name>dlg_color_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>SCREEN</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="string">"Screen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>SHADOW</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><literal type="string">"Shadow"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>DIALOG</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"Dialog box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"Dialog box title"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>BORDER</name></expr></argument>, <argument><expr><name>border</name></expr></argument>, <argument><expr><literal type="string">"Dialog box border"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_BOLD</name></expr></argument>, <argument><expr><name>BUTTON_ACTIVE</name></expr></argument>, <argument><expr><name>button_active</name></expr></argument>, <argument><expr><literal type="string">"Active button"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_DIM</name></expr></argument>, <argument><expr><name>BUTTON_INACTIVE</name></expr></argument>, <argument><expr><name>button_inactive</name></expr></argument>, <argument><expr><literal type="string">"Inactive button"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_UNDERLINE</name></expr></argument>, <argument><expr><name>BUTTON_KEY_ACTIVE</name></expr></argument>, <argument><expr><name>button_key_active</name></expr></argument>, <argument><expr><literal type="string">"Active button key"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_UNDERLINE</name></expr></argument>, <argument><expr><name>BUTTON_KEY_INACTIVE</name></expr></argument>, <argument><expr><name>button_key_inactive</name></expr></argument>, <argument><expr><literal type="string">"Inactive button key"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>BUTTON_LABEL_ACTIVE</name></expr></argument>, <argument><expr><name>button_label_active</name></expr></argument>, <argument><expr><literal type="string">"Active button label"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>BUTTON_LABEL_INACTIVE</name></expr></argument>, <argument><expr><name>button_label_inactive</name></expr></argument>, <argument><expr><literal type="string">"Inactive button label"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>INPUTBOX</name></expr></argument>, <argument><expr><name>inputbox</name></expr></argument>, <argument><expr><literal type="string">"Input box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>INPUTBOX_BORDER</name></expr></argument>, <argument><expr><name>inputbox_border</name></expr></argument>, <argument><expr><literal type="string">"Input box border"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>SEARCHBOX</name></expr></argument>, <argument><expr><name>searchbox</name></expr></argument>, <argument><expr><literal type="string">"Search box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>SEARCHBOX_TITLE</name></expr></argument>, <argument><expr><name>searchbox_title</name></expr></argument>, <argument><expr><literal type="string">"Search box title"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>SEARCHBOX_BORDER</name></expr></argument>, <argument><expr><name>searchbox_border</name></expr></argument>, <argument><expr><literal type="string">"Search box border"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>POSITION_INDICATOR</name></expr></argument>, <argument><expr><name>position_indicator</name></expr></argument>, <argument><expr><literal type="string">"File position indicator"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>MENUBOX</name></expr></argument>, <argument><expr><name>menubox</name></expr></argument>, <argument><expr><literal type="string">"Menu box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>MENUBOX_BORDER</name></expr></argument>, <argument><expr><name>menubox_border</name></expr></argument>, <argument><expr><literal type="string">"Menu box border"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>ITEM</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"Item"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>ITEM_SELECTED</name></expr></argument>, <argument><expr><name>item_selected</name></expr></argument>, <argument><expr><literal type="string">"Selected item"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Tag"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>TAG_SELECTED</name></expr></argument>, <argument><expr><name>tag_selected</name></expr></argument>, <argument><expr><literal type="string">"Selected tag"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>TAG_KEY</name></expr></argument>, <argument><expr><name>tag_key</name></expr></argument>, <argument><expr><literal type="string">"Tag key"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_BOLD</name></expr></argument>, <argument><expr><name>TAG_KEY_SELECTED</name></expr></argument>, <argument><expr><name>tag_key_selected</name></expr></argument>, <argument><expr><literal type="string">"Selected tag key"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>CHECK</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><literal type="string">"Check box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>CHECK_SELECTED</name></expr></argument>, <argument><expr><name>check_selected</name></expr></argument>, <argument><expr><literal type="string">"Selected check box"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>UARROW</name></expr></argument>, <argument><expr><name>uarrow</name></expr></argument>, <argument><expr><literal type="string">"Up arrow"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>DARROW</name></expr></argument>, <argument><expr><name>darrow</name></expr></argument>, <argument><expr><literal type="string">"Down arrow"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>ITEMHELP</name></expr></argument>, <argument><expr><name>itemhelp</name></expr></argument>, <argument><expr><literal type="string">"Item help-text"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_BOLD</name></expr></argument>, <argument><expr><name>FORM_ACTIVE_TEXT</name></expr></argument>, <argument><expr><name>form_active_text</name></expr></argument>, <argument><expr><literal type="string">"Active form text"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>FORM_TEXT</name></expr></argument>, <argument><expr><name>form_text</name></expr></argument>, <argument><expr><literal type="string">"Form text"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_NORMAL</name></expr></argument>, <argument><expr><name>FORM_ITEM_READONLY</name></expr></argument>, <argument><expr><name>form_item_readonly</name></expr></argument>, <argument><expr><literal type="string">"Readonly form item"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>GAUGE</name></expr></argument>, <argument><expr><name>gauge</name></expr></argument>, <argument><expr><literal type="string">"Dialog box gauge"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>BORDER2</name></expr></argument>, <argument><expr><name>border2</name></expr></argument>, <argument><expr><literal type="string">"Dialog box border2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>INPUTBOX_BORDER2</name></expr></argument>, <argument><expr><name>inputbox_border2</name></expr></argument>, <argument><expr><literal type="string">"Input box border2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>, <argument><expr><name>SEARCHBOX_BORDER2</name></expr></argument>, <argument><expr><name>searchbox_border2</name></expr></argument>, <argument><expr><literal type="string">"Search box border2"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>DATA</name><argument_list>(<argument>A_REVERSE</argument>, <argument>MENUBOX_BORDER2</argument>, <argument>menubox_border2</argument>, <argument><literal type="string">"Menu box border2"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DATA</name></cpp:undef>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_subwindow</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DIALOG_WINDOWS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getc_timeout</name></name> <operator>=</operator> <name>WTIMEOUT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_subwindows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>all_subwindows</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>del_subwindows</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>dialog_state</name><operator>.</operator><name>all_subwindows</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name> <operator>==</operator> <name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>all_subwindows</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_put_backtitle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>backtitle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backwidth</name> <init>= <expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>backtitle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>screen_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name><name>dialog_vars</name><operator>.</operator><name>backtitle</name></name></expr></argument>, <argument><expr><name>COLS</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLS</name> <operator>-</operator> <name>backwidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_attr_clear</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>touchwin</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_attr_clear</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><name>screen_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>_dlg_resize_cleanup</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_put_backtitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_mouse_free_regions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isprivate</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) != 0 &amp;&amp; strstr(s, "\033[?") != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTY_DEVICE</name></cpp:macro> <cpp:value>"/dev/tty"</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dialog_tty</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(dlg_getenv_num("DIALOG_TTY", (int *)0) &gt; 0)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_terminal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>TTY_DEVICE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>device</name> <operator>=</operator> <call><name>ttyname</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>device</name> <operator>=</operator> <call><name>ttyname</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>device</name> <operator>=</operator> <call><name>ttyname</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name>TTY_DEVICE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAN_KEEP_TITE</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>my_putc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><name>void</name></type>
<name>init_dialog</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd1</name></decl>, <decl><type ref="prev"/><name>fd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name> <operator>=</operator> <name>TAB_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name> <operator>=</operator> <name>DEFAULT_ASPECT_RATIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>use_colors</name></name> <operator>=</operator> <name>USE_COLORS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name> <operator>=</operator> <name>USE_SHADOW</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>dlg_parse_rc</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"init_dialog: dlg_parse_rc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd1</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>fd2</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"cannot open tty-input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd1</name> <operator>=</operator> <call><name>open_terminal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd2</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"cannot open tty-input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



















<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dialog_tty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd1</name> <operator>=</operator> <call><name>open_terminal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>newterm</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"cannot initialize curses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"cannot open tty-output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dlg_keep_tite</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLUSHINP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>flushinp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keypad</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cbreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>noecho</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_state</name><operator>.</operator><name>no_mouse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mouse_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>screen_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>use_colors</name></name> <operator>||</operator> <name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_color_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>dlg_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_keep_tite</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>keep_tite</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAN_KEEP_TITE</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>fileno</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <name>key_mouse</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>isprivate</name><argument_list>(<argument><expr><name>enter_ca_mode</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>isprivate</name><argument_list>(<argument><expr><name>exit_ca_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name></expr></init></decl>;</decl_stmt>








<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tputs</name><argument_list>(<argument><expr><name>exit_ca_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>my_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tputs</name><argument_list>(<argument><expr><name>clear_screen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>my_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>screen_output</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>












<expr_stmt><expr><name>enter_ca_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_ca_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>output</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>defined_colors</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<function><type><name>void</name></type>
<name>dlg_color_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>has_colors</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>start_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_USE_DEFAULT_COLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>use_default_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_CURSES_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ATTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) != 0 ? A_BOLD : 0) | COLOR_PAIR((y)))</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dlg_color_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>dlg_color_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>init_pair</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fg</name></expr></argument>,
<argument><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atr</name> <operator>=</operator> <call><name>C_ATTR</name><argument_list>(<argument><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hilite</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>defined_colors</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dlg_color_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>dlg_color_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>chtype</name></type> <name>atr</name> <init>= <expr><call><name>dlg_color_pair</name><argument_list>(<argument><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fg</name></expr></argument>,
<argument><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>atr</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hilite</name></expr> ?</condition><then> <expr><name>A_BOLD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>atr</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ul</name></expr> ?</condition><then> <expr><name>A_UNDERLINE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>atr</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rv</name></expr> ?</condition><then> <expr><name>A_REVERSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>dlg_color_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atr</name> <operator>=</operator> <name>atr</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>use_colors</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_color_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>TableSize</name><argument_list>(<argument><expr><name>dlg_color_table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>chtype</name></type>
<name>dlg_get_attrs</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETATTRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>chtype</name><operator>)</operator> <call><name>getattrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>attr_t</name></type> <name>my_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>my_pair</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wattr_get</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_pair</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>my_result</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>chtype</name></type>
<name>dlg_color_pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>foreground</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>background</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pair</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pair</name> <operator>&lt;</operator> <name>defined_colors</name></expr>;</condition> <incr><expr><operator>++</operator><name>pair</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pair_content</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>pair</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name>
<operator>&amp;&amp;</operator> <name>fg</name> <operator>==</operator> <name>foreground</name>
<operator>&amp;&amp;</operator> <name>bg</name> <operator>==</operator> <name>background</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>chtype</name><operator>)</operator> <call><name>COLOR_PAIR</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined_colors</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>COLOR_PAIRS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pair</name> <operator>=</operator> <name>defined_colors</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>init_pair</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>pair</name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>foreground</name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>chtype</name><operator>)</operator> <call><name>COLOR_PAIR</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>chtype</name></type>
<name>define_color</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>foreground</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>, <decl><type ref="prev"/><name>background</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>background</name> <operator>=</operator> <name>COLOR_BLACK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attrs</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pair</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pair</name> <operator>=</operator> <call><name>PAIR_NUMBER</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>pair_content</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>pair</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>background</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>background</name> <operator>=</operator> <name>COLOR_BLACK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>dlg_color_pair</name><argument_list>(<argument><expr><name>foreground</name></expr></argument>, <argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>end_dialog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>screen_initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>screen_initialized</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>erase_on_exit</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mouse_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESCAPE_LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isOurEscape</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)[0] == '\\') &amp;&amp; ((p)[1] == 'Z') &amp;&amp; ((p)[2] != 0))</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>dlg_count_real_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name><name>dialog_vars</name><operator>.</operator><name>colors</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hidden</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>text</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>colors</name></name> <operator>&amp;&amp;</operator> <call><name>isOurEscape</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hidden</name> <operator>+=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>+=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>text</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>result</name> <operator>-=</operator> <name>hidden</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>centered</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><call><name>dlg_count_real_columns</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>need</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>left</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_combining</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>combined</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>combined</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>given</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wch</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>given</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name>wch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>combined</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>combined</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>dlg_print_listitem</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>climit</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name><name>attrs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>no_hot_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tag_key_selected_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tag_key_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tag_selected_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tag_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><name><name>attrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>attrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>text</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddnstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>indx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>indx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>dlg_limit_columns</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>climit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><name><name>attrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddnstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>text</name> <operator>+</operator> <name><name>indx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>indx</name><index>[<expr><name>limit</name></expr>]</index></name> <operator>-</operator> <name><name>indx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>item_selected_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>item_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>dlg_limit_columns</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>climit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><name><name>attrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>limit</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_print_text</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>chtype</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_origin</name></decl>, <decl><type ref="prev"/><name>x_origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_before</name></decl>, <decl><type ref="prev"/><name>x_before</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_after</name></decl>, <decl><type ref="prev"/><name>x_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabbed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ended</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>combined</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y_origin</name> <operator>=</operator> <name>y_after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x_origin</name> <operator>=</operator> <name>x_after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y_after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x_after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_origin</name></expr></argument>, <argument><expr><name>x_origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>txt</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>thisTab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>useattr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>colors</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>isOurEscape</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>txt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>code</name> <operator>=</operator> <call><name>CharOf</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>A_COLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>|=</operator> <call><name>define_color</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>code</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>A_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>|=</operator> <name>A_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>A_REVERSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>|=</operator> <name>A_REVERSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>A_UNDERLINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>|=</operator> <name>A_UNDERLINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <name>A_NORMAL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>txt</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ended</name> <operator>||</operator> <operator>*</operator><name>txt</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>txt</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>useattr</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>attr</name><operator>)</operator> <operator>&amp;</operator> <name>A_ATTRIBUTES</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>useattr</name> <operator>&amp;</operator> <name>A_COLOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>useattr</name> <operator>&amp;</operator> <name>A_BOLD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>pair</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator> <call><name>PAIR_NUMBER</name><argument_list>(<argument><expr><name>useattr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pair_content</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name>
<operator>&amp;&amp;</operator> <name>fg</name> <operator>==</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>useattr</name> <operator>&amp;=</operator> <operator>~</operator><name>A_COLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>useattr</name> <operator>|=</operator> <call><name>dlg_color_pair</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>bg</name> <operator>==</operator> <name>COLOR_BLACK</name><operator>)</operator></expr>
?</condition><then> <expr><name>COLOR_WHITE</name></expr>
</then><else>: <expr><name>COLOR_BLACK</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><name>thisTab</name> <operator>=</operator> <operator>(</operator><call><name>CharOf</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TAB</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x_before</name> <operator>=</operator> <name>x_after</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thisTab</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_before</name></expr></argument>, <argument><expr><name>x_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>y_before</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>CharOf</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>thisTab</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>x_after</name><operator>++</operator><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x_after</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>CharOf</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>|</operator> <name>useattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_after</name></expr></argument>, <argument><expr><name>x_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>thisTab</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y_after</name> <operator>==</operator> <name>y_origin</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tabbed</name> <operator>+=</operator> <operator>(</operator><name>x_after</name> <operator>-</operator> <name>x_before</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y_after</name> <operator>!=</operator> <name>y_origin</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>x_after</name> <operator>&gt;=</operator> <operator>(</operator><name>cols</name> <operator>+</operator> <name>tabbed</name> <operator>+</operator> <name>x_origin</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_combining</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combined</name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ended</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dlg_print_line</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>chtype</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wrap_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hide_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrap_inx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_inx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_x</name> <init>= <expr><name>lm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hidden</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabbed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><operator>(</operator><name>test_ptr</name> <operator>=</operator> <name>prompt</name> <operator>+</operator> <name><name>indx</name><index>[<expr><name>test_inx</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>cur_x</name> <operator>&gt;=</operator> <operator>(</operator><name>rm</name> <operator>+</operator> <name>hidden</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tabbed</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>prompt</name><index>[<expr><name><name>indx</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wrap_inx</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>cur_x</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>colors</name></name> <operator>&amp;&amp;</operator> <call><name>isOurEscape</name><argument_list>(<argument><expr><name>test_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hide_ptr</name> <operator>=</operator> <name>test_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hidden</name> <operator>+=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>ESCAPE_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_x</name> <operator>=</operator> <name>lm</name> <operator>+</operator> <name>tabbed</name> <operator>+</operator> <name><name>cols</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_x</name> <operator>&gt;</operator> <operator>(</operator><name>rm</name> <operator>+</operator> <name>hidden</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>test_inx</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>test_ptr</name> <operator>=</operator> <name>prompt</name> <operator>+</operator> <name><name>indx</name><index>[<expr><name>test_inx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>test_ptr</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>test_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>test_ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wrap_inx</name> <operator>=</operator> <name>test_inx</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>wrap_inx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>prompt</name><index>[<expr><name><name>indx</name><index>[<expr><name>wrap_inx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wrap_inx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>lm</name> <operator>+</operator> <name><name>indx</name><index>[<expr><name>wrap_inx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cur_x</name> <operator>&gt;=</operator> <name>rm</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>rm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap_inx</name> <operator>=</operator> <name>test_inx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wrap_ptr</name> <operator>=</operator> <name>prompt</name> <operator>+</operator> <name><name>indx</name><index>[<expr><name>wrap_inx</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>wrap_ptr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>combined</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>is_combining</name><argument_list>(<argument><expr><name>wrap_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combined</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>wrap_ptr</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hide_ptr</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hide_ptr</name> <operator>&gt;=</operator> <name>wrap_ptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hidden</name> <operator>-=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ptr</name> <operator>=</operator> <name>wrap_ptr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>test_ptr</name> <operator>&lt;</operator> <name>wrap_ptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>colors</name></name> <operator>&amp;&amp;</operator> <call><name>isOurEscape</name><argument_list>(<argument><expr><name>test_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hidden</name> <operator>-=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_ptr</name> <operator>+=</operator> <name>ESCAPE_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>test_ptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name> <operator>||</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>(</operator><name><name>cols</name><index>[<expr><name>wrap_inx</name></expr>]</index></name> <operator>-</operator> <name>hidden</name><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>rm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>-=</operator> <name>hidden</name></expr>;</expr_stmt>


<expr_stmt><expr><name>test_ptr</name> <operator>=</operator> <name>wrap_ptr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>test_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>test_ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>test_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_finish_string</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>test_ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>justify_text</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>limit_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>limit_x</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>high</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wide</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>MARGIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lm</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><name>limit_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bm</name> <init>= <expr><name>limit_y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name> <operator>||</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rm</name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bm</name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>last_y</name></expr></argument>, <argument><expr><name>last_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>bm</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prompt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>lm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prompt</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>prompt</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>bm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>prompt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prompt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prompt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>dlg_print_line</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>last_y</name></expr></argument>, <argument><expr><name>last_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prompt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>max_x</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>max_x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>last_y</name></expr></argument>, <argument><expr><name>last_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>high</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>high</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wide</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wide</name> <operator>=</operator> <name>max_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dlg_print_autowrap</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>dlg_print_scrolled</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pauseopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oldy</name></decl>, <decl><type ref="prev"/><name>oldx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pauseopt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>oldy</name></expr></argument>, <argument><expr><name>oldx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pauseopt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wide</name> <init>= <expr><name>width</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><name>LINES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION_PATCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NCURSES_VERSION_PATCH</name> <operator>&gt;=</operator> <literal type="number">20040417</literal></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dummy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wbkgdset</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>dialog_attr</name> <operator>|</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copywin</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>offset</name> <operator>+</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><name>MARGIN</name></expr></argument>,
<argument><expr><name>MARGIN</name></expr></argument>,
<argument><expr><name>MARGIN</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>,
<argument><expr><name>wide</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wide</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>percent</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>percent</name> <operator>!=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>position_indicator_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>MARGIN</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>wide</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d%%"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddstr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>whline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>oldy</name></expr></argument>, <argument><expr><name>oldx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_check_scrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type> <name>show</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLGK_PAGE_FIRST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_LAST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_PREV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>-=</operator> <name>page</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_NEXT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <name>page</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>&gt;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>auto_size_preformatted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>car</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_y</name> <init>= <expr><name>SLINES</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_x</name> <init>= <expr><name>SCOLS</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name> <init>= <expr><name>max_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ar</name> <init>= <expr><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>max_y</name></expr></argument>, <argument><expr><name>max_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>car</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>wide</name> <operator>/</operator> <name>high</name><operator>)</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>car</name> <operator>&gt;</operator> <name>ar</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>diff</name> <init>= <expr><name>car</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>ar</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max_x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>wide</name> <operator>/</operator> <name>diff</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>max_y</name></expr></argument>, <argument><expr><name>max_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>car</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>wide</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>high</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<while>while <condition>(<expr><name>car</name> <operator>&lt;</operator> <name>ar</name> <operator>&amp;&amp;</operator> <name>max_x</name> <operator>&lt;</operator> <name>max_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_x</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>max_y</name></expr></argument>, <argument><expr><name>max_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>car</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>wide</name> <operator>/</operator> <name>high</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>wide</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>longest_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>real_auto_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>boxlines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mincols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>title_length</name> <init>= <expr><ternary><condition><expr><name>title</name></expr> ?</condition><then> <expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_high</name> <init>= <expr><operator>*</operator><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_wide</name> <init>= <expr><operator>*</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_wide</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_high</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>max_wide</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>*</operator><name>height</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>SLINES</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wide</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wide</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>title_length</name></expr></argument>, <argument><expr><name>mincols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name> <operator>*</operator>
<call><name>dlg_count_real_columns</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xxx</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>xxx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>wide</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wide</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><call><name>longest_word</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>auto_size_preformatted</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wide</name> <operator>=</operator> <name>SCOLS</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&lt;</operator> <name>title_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>justify_text</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>title_length</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>title_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_height</name></name> <operator>=</operator> <operator>*</operator><name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_width</name></name> <operator>=</operator> <operator>*</operator><name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&lt;</operator> <name>mincols</name> <operator>&amp;&amp;</operator> <name>save_wide</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>mincols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator> <operator>+</operator> <name>SHADOW_COLS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>+=</operator> <name>boxlines</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_high</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>save_high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>save_wide</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>save_wide</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_high</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>SLINES</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_wide</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>SCOLS</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>dlg_auto_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>boxlines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mincols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#dlg_auto_size(%d,%d) limits %d,%d\n"</literal><operator>,</operator>
<operator>*</operator><name>height</name><operator>,</operator> <operator>*</operator><name>width</name><operator>,</operator>
<name>boxlines</name><operator>,</operator> <name>mincols</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>real_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>boxlines</name></expr></argument>, <argument><expr><name>mincols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&gt;</operator> <name>SCOLS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>height</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>SCOLS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>&gt;</operator> <name>SLINES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>SLINES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#...dlg_auto_size(%d,%d) also %d,%d\n"</literal><operator>,</operator>
<operator>*</operator><name>height</name><operator>,</operator> <operator>*</operator><name>width</name><operator>,</operator>
<name><name>dialog_state</name><operator>.</operator><name>text_height</name></name><operator>,</operator> <name><name>dialog_state</name><operator>.</operator><name>text_width</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>dlg_auto_sizefile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>boxlines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mincols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>title</name></expr> ?</condition><then> <expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numlines</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"dlg_auto_sizefile: Cannot open input file %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>height</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>width</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>SLINES</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>SCOLS</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>height</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>width</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&gt;</operator> <name>SCOLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name>SCOLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>&gt;</operator> <name>SLINES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name>SLINES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>==</operator> <name>TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>SLINES</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>numlines</name> <operator>+</operator> <name>boxlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>SCOLS</name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <name>nc</name><operator>)</operator></expr></argument>, <argument><expr><name>mincols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

















<function><type><name>void</name></type>
<name>dlg_draw_box2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>boxchar</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>borderchar</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>borderchar2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_ULCORNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_LLCORNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar2</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_URCORNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar2</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_LRCORNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar2</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_VLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>borderchar2</name> <operator>|</operator> <call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_VLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>boxchar</name> <operator>|</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_box</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>boxchar</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>borderchar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>boxchar</name></expr></argument>, <argument><expr><name>borderchar</name></expr></argument>, <argument><expr><name>boxchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>DIALOG_WINDOWS</name> <modifier>*</modifier></type>
<name>find_window</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><ternary><condition><expr><name>normal</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>check</name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SearchTopWindows</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>find_window(dialog_state.all_windows, win, TRUE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SearchSubWindows</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>find_window(dialog_state.all_subwindows, win, FALSE)</cpp:value></cpp:define>







<function><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type>
<name>_dlg_find_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>SearchTopWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SearchSubWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><specifier>static</specifier> <name>WINDOW</name> <modifier>*</modifier></type>
<name>in_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_base</name> <init>= <expr><call><name>getbegy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_base</name> <init>= <expr><call><name>getbegx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_last</name> <init>= <expr><call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>y_base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_last</name> <init>= <expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>x_base</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>y_base</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>y_last</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name>x_base</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>x_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WINDOW</name> <modifier>*</modifier></type>
<name>window_at_cell</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_want</name> <init>= <expr><name>y</name> <operator>+</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_want</name> <init>= <expr><name>x</name> <operator>+</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>normal</name></name>
<operator>&amp;&amp;</operator> <name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>normal</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>in_window</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>, <argument><expr><name>y_want</name></expr></argument>, <argument><expr><name>x_want</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>stdscr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>in_shadow</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>normal</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ybase</name> <init>= <expr><call><name>getbegy</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ylast</name> <init>= <expr><call><name>getmaxy</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ybase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xbase</name> <init>= <expr><call><name>getbegx</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xlast</name> <init>= <expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xbase</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>ybase</name> <operator>+</operator> <name>SHADOW_ROWS</name>
<operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>ylast</name> <operator>+</operator> <name>SHADOW_ROWS</name>
<operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name>xlast</name>
<operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>xlast</name> <operator>+</operator> <name>SHADOW_COLS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>ylast</name>
<operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>ylast</name> <operator>+</operator> <name>SHADOW_ROWS</name>
<operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name>ybase</name> <operator>+</operator> <name>SHADOW_COLS</name>
<operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>ylast</name> <operator>+</operator> <name>SHADOW_COLS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type>
<name>last_shadow</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name> <operator>!=</operator> <name><name>dw</name><operator>-&gt;</operator><name>normal</name></name>
<operator>&amp;&amp;</operator> <call><name>in_shadow</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>, <argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>repaint_cell</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>draw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>cellwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y2</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cellwin</name> <operator>=</operator> <call><name>window_at_cell</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>draw</name> <operator>||</operator> <call><name>last_shadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>y2</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>x2</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>the_cell</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>the_attr</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>draw</name></expr> ?</condition><then> <expr><name>shadow_attr</name></expr> </then><else>: <expr><name>the_cell</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>winch</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>A_ALTCHARSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>the_attr</name> <operator>|=</operator> <name>A_ALTCHARSET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_WCHGAT</name></expr></cpp:if>
<expr_stmt><expr><call><name>wchgat</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>the_attr</name> <operator>&amp;</operator> <operator>(</operator><name>chtype</name><operator>)</operator> <operator>(</operator><operator>~</operator><name>A_COLOR</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <call><name>PAIR_NUMBER</name><argument_list>(<argument><expr><name>the_attr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>the_char</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>winch</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>A_CHARTEXT</name><operator>)</operator> <operator>|</operator> <name>the_attr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>, <argument><expr><name>the_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>cellwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RepaintCell</name><parameter_list>(<parameter><type><name>dw</name></type></parameter>, <parameter><type><name>draw</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repaint_cell(dw, draw, y, x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>repaint_shadow</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>draw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UseShadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_WCHGAT</name></expr></cpp:if>
<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>draw</name></expr> ?</condition><then> <expr><name>shadow_attr</name></expr> </then><else>: <expr><name>screen_attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHADOW_ROWS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RepaintCell</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>draw</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>SHADOW_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SHADOW_COLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RepaintCell</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>draw</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>SHADOW_ROWS</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_WCHGAT</name></expr></cpp:if>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_childs_shadow</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UseShadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>repaint_shadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><call><name>getbegy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getbegx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>erase_childs_shadow</name><parameter_list>(<parameter><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UseShadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>repaint_shadow</name><argument_list>(<argument><expr><name>dw</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><call><name>getbegy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getbegx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getbegx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxy</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_draw_shadow</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>repaint_shadow</name><argument_list>(<argument><expr><call><name>SearchTopWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>dlg_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DLG_EXIT_CANCEL</name></expr>, <expr><literal type="string">"DIALOG_CANCEL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_ERROR</name></expr>, <expr><literal type="string">"DIALOG_ERROR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_ESC</name></expr>, <expr><literal type="string">"DIALOG_ESC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_EXTRA</name></expr>, <expr><literal type="string">"DIALOG_EXTRA"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_HELP</name></expr>, <expr><literal type="string">"DIALOG_HELP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_OK</name></expr>, <expr><literal type="string">"DIALOG_OK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_ITEM_HELP</name></expr>, <expr><literal type="string">"DIALOG_ITEM_HELP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DLG_EXIT_TIMEOUT</name></expr>, <expr><literal type="string">"DIALOG_TIMEOUT"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>overridden</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dlg_getenv_num</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>overridden</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>DLG_EXIT_ITEM_HELP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>overridden</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>DLG_EXIT_HELP</name></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dlg_trace</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_dlg_inputstr_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_EXIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NC_FREE_AND_EXIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>curses_exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name> <operator>==</operator> <name>stdin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>!=</operator> <name>stdin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DLG_EXIT_ ##name, #name }</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>exit_codenames</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>UNKNOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>CANCEL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>HELP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>EXTRA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DATA</name><argument_list>(<argument><expr><name>ITEM_HELP</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DATA</name></cpp:undef>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dlg_exitcode2s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>exit_codenames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>exit_codenames</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>exit_codenames</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_exitname2n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>exit_codenames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>exit_codenames</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>exit_codenames</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>dlg_exiterr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>end_dialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_msg</name><argument_list>(<argument><expr><literal type="string">"##Error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_va_msg</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dlg_killall_bg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>DLG_EXIT_TIMEOUT</name></expr> </then><else>: <expr><name>DLG_EXIT_ERROR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>dlg_getenv_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>result</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>result</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>dlg_getenv_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>check</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>temp</name> <operator>!=</operator> <name>data</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>check</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_beeping</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>beep_signal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>beep_signal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_print_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>print_siz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"Size: %d, %d\n"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#print size: %dx%d\n"</literal><operator>,</operator> <name>height</name><operator>,</operator> <name>width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_ctl_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>size_err</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&gt;</operator> <name>COLS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>height</name> <operator>&gt;</operator> <name>LINES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Window too big. (height, width) = (%d, %d). Max allowed (%d, %d)."</literal></expr></argument>,
<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>&gt;</operator> <name>SCOLS</name> <operator>||</operator> <name>height</name> <operator>&gt;</operator> <name>SLINES</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&lt;=</operator> <name>COLS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&lt;=</operator> <name>LINES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Window+Shadow too big. (height, width) = (%d, %d). Max allowed (%d, %d)."</literal></expr></argument>,
<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>SLINES</name></expr></argument>, <argument><expr><name>SCOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_tab_correct_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_calc_listh</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>list_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><name>SLINES</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name></expr> ?</condition><then> <expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>height</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>height</name><operator>)</operator> <operator>&gt;</operator> <name>item_no</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>list_height</name> <operator>=</operator> <name>item_no</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>list_height</name> <operator>=</operator> <name>rows</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>height</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>height</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>list_height</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dlg_calc_listw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>item_no</name> <operator>*</operator> <name>group</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>group</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>len1</name> <operator>+</operator> <name>len2</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_calc_list_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>, <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_tags</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>len1</name> <operator>+</operator> <name>len2</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dlg_strempty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>empty</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>empty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dlg_strclone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cprompt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cprompt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><literal type="string">"dlg_strclone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>prompt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>chtype</name></type>
<name>dlg_asciibox</name><parameter_list>(<parameter><decl><type><name>chtype</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_ULCORNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_LLCORNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_URCORNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_LRCORNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_HLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_VLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_LTEE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_RTEE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_UARROW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACS_DARROW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>chtype</name></type>
<name>dlg_boxchar</name><parameter_list>(<parameter><decl><type><name>chtype</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>result</name> <init>= <expr><call><name>dlg_asciibox</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>ascii_lines</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>no_lines</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_box_x_ordinate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>SCOLS</name> <operator>-</operator> <name>width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_box_y_ordinate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>begin_set</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>SLINES</name> <operator>-</operator> <name>height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_title</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>centered</name><argument_list>(<argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>title_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_finish_string</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_bottom_box2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>on_left</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>on_right</name></decl></parameter>, <parameter><decl><type><name>chtype</name></type> <name>on_inside</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>getmaxy</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>on_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_LTEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>on_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>dlg_boxchar</name><argument_list>(<argument><expr><name>ACS_RTEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>on_inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_draw_bottom_box</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_draw_bottom_box2</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_del_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>keep_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>getc_callbacks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>touchwin</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>touchwin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>touchwin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>erase_childs_shadow</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>del_subwindows</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_unregister_window</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>doupdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>dlg_new_window</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dlg_new_modal_window</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>dlg_new_modal_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DIALOG_WINDOWS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>parent</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Can't make new window at (%d,%d), size (%d,%d).\n"</literal></expr></argument>,
<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>normal</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getc_timeout</name></name> <operator>=</operator> <name>WTIMEOUT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>all_windows</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_childs_shadow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keypad</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>dlg_set_timeout</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>will_getc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>SearchTopWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>timeout_secs</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>will_getc</name> <operator>||</operator> <name><name>dialog_vars</name><operator>.</operator><name>pause_secs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>WTIMEOUT_VAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>WTIMEOUT_OFF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>wtimeout</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getc_timeout</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_reset_timeout</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>SearchTopWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wtimeout</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>getc_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>wtimeout</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>WTIMEOUT_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>dlg_move_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>SearchTopWindows</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wresize</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mvwin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>use_shadow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mvwin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>SHADOW_ROWS</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>SHADOW_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>draw_childs_shadow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_will_resize</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>caught</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>had_resize</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wtimeout</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>WTIMEOUT_VAL</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>base</name> <operator>+</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>KEY_RESIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>caught</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ungetch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_reset_timeout</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#caught %d KEY_RESIZE key%s\n"</literal><operator>,</operator>
<literal type="number">1</literal> <operator>+</operator> <name>caught</name><operator>,</operator>
<ternary><condition><expr><name>caught</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>dlg_der_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>win</name> <operator>=</operator> <call><name>derwin</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_subwindow</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keypad</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>dlg_sub_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>win</name> <operator>=</operator> <call><name>subwin</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Can't make sub-window at (%d,%d), size (%d,%d).\n"</literal></expr></argument>,
<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_subwindow</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keypad</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dlg_default_item</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>llen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>items</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name></expr></argument>, <argument><expr><operator>*</operator><name>items</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>items</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_default_listitem</name><parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>default_item</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_item_help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>USE_ITEM_HELP</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>itemhelp_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>LINES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wclrtoeol</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>addch</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_text</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>COLS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itemhelp_attr</name> <operator>&amp;</operator> <name>A_COLOR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>COLS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>addch</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRCASECMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>dlg_strcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ac</name></decl>, <decl><type ref="prev"/><name>bc</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>a</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bc</name> <operator>=</operator> <call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>islower</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>_toupper</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>islower</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bc</name> <operator>=</operator> <call><name>_toupper</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>ac</name> <operator>-</operator> <name>bc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>trim_blank</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>dst</name><operator>--</operator> <operator>!=</operator> <name>base</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>dlg_trim_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_newlines</name> <init>= <expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>no_nl_expand</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nocollapse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_newlines</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>





<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>cr_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trim_blank</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>trim_whitespace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>cr_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nocollapse</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trim_blank</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_set_focus</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,
<argument><expr><call><name>getpary</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getcury</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getparx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getcurx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>doupdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>dlg_max_input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name> <operator>&lt;</operator> <name>MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>max_len</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_clr_result</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>dlg_set_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>need</name> <init>= <expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&lt;</operator> <name>MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need</name> <operator>=</operator> <name>MAX_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name>need</name> <operator>&gt;</operator> <name>MAX_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dlg_clr_result</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><literal type="string">"dlg_set_result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>string</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_add_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>have</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr>
?</condition><then> <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>want</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>have</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>want</name> <operator>&gt;=</operator> <name>MAX_LEN</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save_result</name> <init>= <expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>want</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><literal type="string">"dlg_add_result malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><name>save_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>want</name> <operator>&gt;=</operator> <name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>want</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <call><name>dlg_realloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name></expr></argument>,
<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><literal type="string">"dlg_add_result realloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_SINGLE</name></cpp:macro> <cpp:value>"\n\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_DOUBLE</name></cpp:macro> <cpp:value>FIX_SINGLE "[]{}?*;`~#$^&amp;()|&lt;&gt;"</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>quote_delimiter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>single_quoted</name></name></expr> ?</condition><then> <expr><literal type="string">"'"</literal></expr> </then><else>: <expr><literal type="string">"\""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>must_quote</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>code</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>quote_delimiter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"\n\t "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><call><name>strcspn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>FIX_DOUBLE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_add_quoted</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>my_quote</name> <init>= <expr><call><name>quote_delimiter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>must_fix</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>single_quoted</name></name></expr>
?</condition><then> <expr><name>FIX_SINGLE</name></expr>
</then><else>: <expr><name>FIX_DOUBLE</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>must_quote</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>my_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>string</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strchr</name><operator>)</operator> <operator>(</operator><name>my_quote</name><operator>,</operator> <operator>*</operator><name>temp</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>strchr</name><operator>)</operator> <operator>(</operator><name>must_fix</name><operator>,</operator> <operator>*</operator><name>temp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>my_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_add_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>quoted</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_quoted</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>dlg_need_separator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>output_separator</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_add_separator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separator</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>output_separator</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>output_separator</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_PREFIX</name></cpp:macro> <cpp:value>"HELP "</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>dlg_add_help_listitem</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>HELP_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>USE_ITEM_HELP</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>help_tags</name></name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>help</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>DLG_EXIT_ITEM_HELP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dlg_add_help_formitem</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>HELP_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>USE_ITEM_HELP</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>help_tags</name></name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>help</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>DLG_EXIT_ITEM_HELP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_save_vars</name><parameter_list>(<parameter><decl><type><name>DIALOG_VARS</name> <modifier>*</modifier></type> <name>vars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vars</name> <operator>=</operator> <name>dialog_vars</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dlg_restore_vars</name><parameter_list>(<parameter><decl><type><name>DIALOG_VARS</name> <modifier>*</modifier></type> <name>vars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save_result</name> <init>= <expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>save_length</name> <init>= <expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dialog_vars</name> <operator>=</operator> <operator>*</operator><name>vars</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <name>save_result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>save_length</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_does_output</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output_count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETBEGX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETBEGY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>int</name></type>
<name>dlg_getbegx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getbegyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dlg_getbegy</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getbegyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETCURX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETCURY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>int</name></type>
<name>dlg_getcurx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dlg_getcury</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMAXX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMAXY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>int</name></type>
<name>dlg_getmaxx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getmaxyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dlg_getmaxy</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getmaxyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPARX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPARY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>int</name></type>
<name>dlg_getparx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getparyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dlg_getpary</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getparyx</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_WGETPARENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>dlg_wgetparent</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wgetparent</name></cpp:undef>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dialog_state</name><operator>.</operator><name>all_subwindows</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>shadow</name></name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>normal</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
