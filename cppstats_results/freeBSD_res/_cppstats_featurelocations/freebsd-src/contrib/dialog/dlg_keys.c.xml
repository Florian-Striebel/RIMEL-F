<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/dlg_keys.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_internals.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_BINDINGS</name></cpp:macro> <cpp:value>struct _list_bindings</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_BACKSLASH</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsOctal</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &gt;= '0' &amp;&amp; (ch) &lt;= '7')</cpp:value></cpp:define>

<macro><name>LIST_BINDINGS</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>binding</name></decl>;</decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDNAME</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>all_bindings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DLG_KEYS_BINDING</name></type> <name>end_keys_binding</name> <init>= <expr><name>END_KEYS_BINDING</name></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type>
<name>dlg_register_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type> <name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>binding</name></name> <operator>=</operator> <name>binding</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>LIST_BINDINGS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>binding</name></name> <operator>=</operator> <name>binding</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>all_bindings</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>







<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#dlg_register_window %s\n"</literal><operator>,</operator> <name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_dump_keys</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>trace_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_dump_window_keys</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>trace_output</name></name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#...done dlg_register_window %s\n"</literal><operator>,</operator> <name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>key_is_bound</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curses_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>function_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>is_function_key</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>curses_key</name> <operator>==</operator> <name>curses_key</name>
<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>binding</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>is_function_key</name> <operator>==</operator> <name>function_key</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type>
<name>dlg_register_buttons</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buttons</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curses_key</name> <init>= <expr><call><name>dlg_button_to_char</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>curses_key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>curses_key</name> <operator>&gt;=</operator> <name>KEY_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>key_is_bound</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>key_is_bound</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>LIST_BINDINGS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DLG_KEYS_BINDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_function_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>curses_key</name> <operator>=</operator> <name>curses_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dialog_key</name> <operator>=</operator> <name>curses_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end_keys_binding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buttons</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>binding</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>all_bindings</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_bindings</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_unregister_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>all_bindings</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>binding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_function_key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>binding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_unregister_window</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>dlg_lookup_key</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curses_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_MOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fkey</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curses_key</name> <operator>==</operator> <name>KEY_MOUSE</name></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><operator>*</operator><name>fkey</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curses_key</name> <operator>==</operator> <name>KEY_RESIZE</name></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><operator>*</operator><name>fkey</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>curses_key</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>WILDNAME</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name> <operator>||</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>WILDNAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>function_key</name> <init>= <expr><operator>(</operator><operator>*</operator><name>fkey</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>binding</name></name></expr>;</init> <condition><expr><name><name>q</name><operator>-&gt;</operator><name>is_function_key</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>q</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buttons</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>function_key</name>
<operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>curses_key</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>dlg_toupper</name><argument_list>(<argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fkey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>q</name><operator>-&gt;</operator><name>dialog_key</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>curses_key</name></name> <operator>==</operator> <name>curses_key</name>
<operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>is_function_key</name></name> <operator>==</operator> <name>function_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fkey</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>dialog_key</name></name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>fkey</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>curses_key</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>dlg_result_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dialog_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>fkey</name></type> <name>GCC_UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resultp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#dlg_result_key(dialog_key=%d, fkey=%d)\n"</literal><operator>,</operator> <name>dialog_key</name><operator>,</operator> <name>fkey</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>had_resize</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dialog_key</name> <operator>==</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialog_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>had_resize</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fkey</name> <operator>&amp;&amp;</operator> <name>dialog_key</name> <operator>==</operator> <name>KEY_RESIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>had_resize</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>DLG_KEYS_ENUM</name><operator>)</operator> <name>dialog_key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLGK_OK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nook</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_CANCEL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nocancel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_CANCEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_EXTRA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>extra_button</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_EXTRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_HELP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>help_button</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_HELP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ESC</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>dialog_key</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dialog_key</name> <operator>==</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>resultp</name> <operator>=</operator> <name>DLG_EXIT_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>done</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>dlg_button_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>button</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dialog_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>exit_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLG_EXIT_OK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nook</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>button</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLG_EXIT_EXTRA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>extra_button</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>button</name> <operator>=</operator> <ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>nook</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLG_EXIT_CANCEL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>nocancel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>button</name> <operator>=</operator> <ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>nook</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLG_EXIT_HELP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>help_button</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cancel</name> <init>= <expr><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>nocancel</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>extra_button</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>okay</name> <init>= <expr><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>nook</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>button</name> <operator>=</operator> <name>okay</name> <operator>+</operator> <name>extra</name> <operator>+</operator> <name>cancel</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#dlg_button_key(%d:%s) button %d\n"</literal><operator>,</operator>
<name>exit_code</name><operator>,</operator> <call><name>dlg_exitcode2s</name><argument_list>(<argument><expr><name>exit_code</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>*</operator><name>button</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dialog_key</name> <operator>=</operator> <operator>*</operator><name>fkey</name> <operator>=</operator> <name>DLGK_ENTER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dlg_ok_button_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>button</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dialog_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_VARS</name></type> <name>save</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlg_save_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>nocancel</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_button_key</name><argument_list>(<argument><expr><name>exit_code</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>dialog_key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_restore_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
}</block></struct></type> <name>CODENAME</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, code }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSES_NAME</name><parameter_list>(<parameter><type><name>upper</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #upper, KEY_ ##upper }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_CURSES</name></cpp:macro> <cpp:value>TableSize(curses_names)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CODENAME</name></type> <name><name>curses_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>, <argument><expr><literal type="char">'\033'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>CR</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>LF</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>FF</name></expr></argument>, <argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>TAB</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ASCII_NAME</name><argument_list>(<argument><expr><name>DEL</name></expr></argument>, <argument><expr><literal type="char">'\177'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>DOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>UP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>RIGHT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>HOME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>BACKSPACE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>F0</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>DL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>IL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>IC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>EIC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>EOS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>EOL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SF</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>NPAGE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>PPAGE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>STAB</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CTAB</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CATAB</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>ENTER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>PRINT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>LL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>A3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>B2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>C1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>C3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>BTAB</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>BEG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CANCEL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CLOSE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>COMMAND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>COPY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>CREATE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>END</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>EXIT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>HELP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>MARK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>MESSAGE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>MOVE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>OPTIONS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>PREVIOUS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>REDO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>REFERENCE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>REFRESH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>REPLACE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>RESTART</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>RESUME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SAVE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SBEG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SCANCEL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SCOMMAND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SCOPY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SCREATE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SDC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SDL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SEND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SEOL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SEXIT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SFIND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SHELP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SHOME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SIC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SLEFT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SMESSAGE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SMOVE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SNEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SOPTIONS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SPREVIOUS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SPRINT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SREDO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SREPLACE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SRIGHT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SRSUME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SSAVE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SSUSPEND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SUNDO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>SUSPEND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CURSES_NAME</name><argument_list>(<argument><expr><name>UNDO</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIALOG_NAME</name><parameter_list>(<parameter><type><name>upper</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #upper, DLGK_ ##upper }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_DIALOG</name></cpp:macro> <cpp:value>TableSize(dialog_names)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CODENAME</name></type> <name><name>dialog_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>CANCEL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>EXTRA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>HELP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>PAGE_FIRST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>PAGE_LAST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>PAGE_NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>PAGE_PREV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ITEM_FIRST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ITEM_LAST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ITEM_NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ITEM_PREV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FIELD_FIRST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FIELD_LAST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FIELD_NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FIELD_PREV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FORM_FIRST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FORM_LAST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FORM_NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FORM_PREV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>GRID_UP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>GRID_DOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>GRID_LEFT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>GRID_RIGHT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>DELETE_LEFT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>DELETE_RIGHT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>DELETE_ALL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>ENTER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>BEGIN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>FINAL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>HELPFILE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DIALOG_NAME</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>,
<macro><name>DIALOG_NAME</name><argument_list>(<argument>LEAVE</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP2</name><parameter_list>(<parameter><type><name>letter</name></type></parameter>,<parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ letter, actual }</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>actual</name></decl>;</decl_stmt>
}</block> <decl><name><name>escaped_letters</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>CHR_SPACE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><call><name>DLG_CTRL</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP2</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP2</name></cpp:undef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skip_white</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skip_black</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type>
<name>find_binding</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curses_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>binding</name><operator>-&gt;</operator><name>curses_key</name></name> <operator>==</operator> <name>curses_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>binding</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_bindings</name><parameter_list>(<parameter><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>win</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>binding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>curses_key</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>binding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>curses_key</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>WILDNAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>WILDNAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>win</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type>
<name>make_binding</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curses_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_function</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dialog_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>find_binding</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>entry</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>LIST_BINDINGS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>data</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DLG_KEYS_BINDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>name</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>binding</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_function_key</name> <operator>=</operator> <name>is_function</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>curses_key</name> <operator>=</operator> <name>curses_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dialog_key</name> <operator>=</operator> <name>dialog_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end_keys_binding</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>compare_bindings</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>all_bindings</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decode_escaped</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsOctal</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>limit</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IsOctal</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>*</operator><name>string</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>string</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>escaped_letters</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>string</name> <operator>==</operator> <name><name>escaped_letters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>letter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>string</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>escaped_letters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>actual</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>encode_escaped</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>result</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>escaped_letters</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>escaped_letters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>actual</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>escaped_letters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%03o"</literal></expr></argument>, <argument><expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>dlg_parse_bindkey</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skip_white</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>widget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curses_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dialog_key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dialog_key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>widget</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_black</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>widget</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>escaped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modified</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_function</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_white</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>curses_key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>escaped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <call><name>decode_escaped</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>CHR_BACKSLASH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>modified</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>modified</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">127</literal></expr>
</then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>modified</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curses_key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fprefix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>check</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keynumber</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"%1[Ff]%d%c"</literal></expr></argument>, <argument><expr><name>fprefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keynumber</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><name>keynumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_function</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>xx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xx</name> <operator>&lt;</operator> <name>COUNT_CURSES</name></expr>;</condition> <incr><expr><operator>++</operator><name>xx</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>curses_names</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curses_key</name> <operator>=</operator> <name><name>curses_names</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_function</name> <operator>=</operator> <operator>(</operator><name>curses_key</name> <operator>&gt;=</operator> <name>KEY_MIN</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>skip_white</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_black</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>xx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xx</name> <operator>&lt;</operator> <name>COUNT_DIALOG</name></expr>;</condition> <incr><expr><operator>++</operator><name>xx</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>dialog_names</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dialog_key</name> <operator>=</operator> <name><name>dialog_names</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>widget</name> <operator>!=</operator> <literal type="char">'\0'</literal>
<operator>&amp;&amp;</operator> <name>curses_key</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>dialog_key</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>make_binding</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>, <argument><expr><name>is_function</name></expr></argument>, <argument><expr><name>dialog_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_curses_key</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curses_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curses_key</name> <operator>&gt;</operator> <name>KEY_MIN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>COUNT_CURSES</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curses_names</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>curses_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>curses_names</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_MOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MOUSE-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_curses_key</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>curses_key</name> <operator>-</operator> <name>M_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>curses_key</name> <operator>&gt;=</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"F%d"</literal></expr></argument>, <argument><expr><name>curses_key</name> <operator>-</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"curses%d"</literal></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curses_key</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curses_key</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"^%c"</literal></expr></argument>, <argument><expr><name>curses_key</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curses_key</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"^?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curses_key</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>curses_key</name> <operator>&lt;</operator> <literal type="number">160</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"~%c"</literal></expr></argument>, <argument><expr><name>curses_key</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curses_key</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"~?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curses_key</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator>
<name>curses_key</name> <operator>&lt;</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator>
<name>curses_key</name> <operator>!=</operator> <name>CHR_BACKSLASH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c%s"</literal></expr></argument>, <argument><expr><name>CHR_BACKSLASH</name></expr></argument>, <argument><expr><call><name>encode_escaped</name><argument_list>(<argument><expr><name>curses_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_dialog_key</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dialog_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>COUNT_DIALOG</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_names</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>dialog_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>dialog_names</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"dialog%d"</literal></expr></argument>, <argument><expr><name>dialog_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_one_binding</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type> <name>binding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>actual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fkey</name> <init>= <expr><operator>(</operator><name><name>binding</name><operator>-&gt;</operator><name>curses_key</name></name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"bindkey %s "</literal></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_curses_key</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>curses_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_dialog_key</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>dialog_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>actual</name> <operator>=</operator> <call><name>dlg_lookup_key</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>binding</name><operator>-&gt;</operator><name>curses_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_MOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name><name>binding</name><operator>-&gt;</operator><name>curses_key</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>actual</name> <operator>!=</operator> <name><name>binding</name><operator>-&gt;</operator><name>dialog_key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t#overridden by "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_dialog_key</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dlg_dump_window_keys</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLG_KEYS_BINDING</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>win</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#key bindings for %s widgets%s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>WILDNAME</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"all"</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>win</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">" (user-defined)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>binding</name></name></expr>;</init> <condition><expr><name><name>q</name><operator>-&gt;</operator><name>is_function_key</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>q</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dump_one_binding</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_dump_keys</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LIST_BINDINGS</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>all_bindings</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_dump_window_keys</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
