<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/checklist.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_HIGH</name></cpp:macro> <cpp:value>(1 + (5 * MARGIN))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>box_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>box_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>check_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checkflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>states</name></decl>;</decl_stmt>
}</block></struct></type> <name>ALL_DATA</name>;</typedef>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_item</name><parameter_list>(<parameter><decl><type><name>ALL_DATA</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>states</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>save</name> <init>= <expr><call><name>dlg_get_attrs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>both</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>no_tags</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>climit</name> <init>= <expr><operator>(</operator><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>check_x</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name></expr>
?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>
</then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>text</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>menubox_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>use_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>check_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><name>check_selected_attr</name></expr> </then><else>: <expr><name>check_attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wprintw</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>checkflag</name></name> <operator>==</operator> <name>FLAG_CHECK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"[%c]"</literal></expr> </then><else>: <expr><literal type="string">"(%c)"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>states</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>menubox_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_print_listitem</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>climit</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>item_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_listitem</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>show</name></expr></argument>, <argument><expr><name>climit</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_item_help</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_list</name><parameter_list>(<parameter><decl><type><name>ALL_DATA</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollamt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_choice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_y</name></decl>, <decl><type ref="prev"/><name>cur_x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_choice</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <name>scrollamt</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <name>choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_scrollbar</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>scrollamt</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>scrollamt</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>scrollamt</name> <operator>+</operator> <name>max_choice</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>item_no</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>box_x</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>check_x</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>box_x</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>use_width</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>box_y</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>box_y</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>use_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>menubox_border2_attr</name></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_hotkey</name><parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>choice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dlg_match_char</name><argument_list>(<argument><expr><call><name>dlg_last_getc</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_tags</name></name></expr>
?</condition><then> <expr><name><name>items</name><index>[<expr><name>choice</name></expr>]</index></name><operator>.</operator><name>text</name></expr>
</then><else>: <expr><name><name>items</name><index>[<expr><name>choice</name></expr>]</index></name><operator>.</operator><name>name</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>dlg_checklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type> <name>items</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>states</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>current_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>KEY_RIGHT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>KEY_BTAB</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>KEY_LEFT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_FIRST</name></expr></argument>, <argument><expr><name>KEY_HOME</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_LAST</name></expr></argument>, <argument><expr><name>KEY_END</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_LAST</name></expr></argument>, <argument><expr><name>KEY_LL</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><name>KEY_DOWN</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><name>CHR_NEXT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><name>KEY_UP</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><name>CHR_PREVIOUS</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_NEXT</name></expr></argument>, <argument><expr><name>KEY_NPAGE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_NEXT</name></expr></argument>, <argument><expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_NPAGE</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_PREV</name></expr></argument>, <argument><expr><name>KEY_PPAGE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_PREV</name></expr></argument>, <argument><expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_PPAGE</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
<expr><name>TOGGLEKEY_BINDINGS</name></expr>,
<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_height</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_width</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ALL_DATA</name></type> <name>all</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>, <decl><type ref="prev"/><name>found</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cur_x</name></decl>, <decl><type ref="prev"/><name>cur_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>fkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><ternary><condition><expr><name><name>dialog_state</name><operator>.</operator><name>visit_items</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>dlg_default_button</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>choice</name> <init>= <expr><call><name>dlg_default_listitem</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrollamt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_choice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_width</name></decl>, <decl><type ref="prev"/><name>list_width</name></decl>, <decl><type ref="prev"/><name>name_width</name></decl>, <decl><type ref="prev"/><name>text_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_states</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name> <init>= <expr><call><name>dlg_ok_labels</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>widget_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#%s args:\n"</literal><operator>,</operator> <ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><literal type="string">"checklist"</literal></expr> </then><else>: <expr><literal type="string">"radiolist"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"lheight"</literal></expr></argument>, <argument><expr><name>list_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"llength"</literal></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"states"</literal></expr></argument>, <argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"flag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><operator>*</operator><name>current_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>plain_buttons</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>item_no</name></name> <operator>=</operator> <name>item_no</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_does_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>FLAG_RADIO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>widget_name</name> <operator>=</operator> <literal type="string">"radiolist"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>widget_name</name> <operator>=</operator> <literal type="string">"checklist"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>retry</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>cprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_tab_correct_str</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>=</operator> <name>list_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_width</name> <operator>=</operator> <call><name>dlg_calc_list_width</name><argument_list>(<argument><expr><name>item_no</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><name>use_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>MIN_HIGH</name></expr></argument>, <argument><expr><name>use_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_calc_listh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>all</name><operator>.</operator><name>use_height</name></name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>,
<argument><expr><name>MIN_HIGH</name> <operator>+</operator> <name><name>all</name><operator>.</operator><name>use_height</name></name></expr></argument>, <argument><expr><name>use_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dlg_button_layout</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>states</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>states</name> <operator>=</operator> <literal type="string">" *"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num_states</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>states</name></name> <operator>=</operator> <name>states</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>all</name><operator>.</operator><name>checkflag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>dlg_box_x_ordinate</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>dlg_box_y_ordinate</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>dlg_new_window</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>widget_name</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>widget_name</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_mouse_setbase</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_bottom_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_title</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>all</name><operator>.</operator><name>use_width</name></name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>box_y</name></name> <operator>=</operator> <name>cur_y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>box_x</name></name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name><name>all</name><operator>.</operator><name>use_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>=</operator> <name>height</name> <operator>-</operator> <name>MIN_HIGH</name> <operator>-</operator> <name>cur_y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_choice</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>use_height</name></name></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_choice</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>max_choice</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>all</name><operator>.</operator><name>list</name></name> <operator>=</operator> <call><name>dlg_sub_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>use_height</name></name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>use_width</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name><name>all</name><operator>.</operator><name>box_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>all</name><operator>.</operator><name>box_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_draw_box</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>box_y</name></name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>box_x</name></name></expr></argument>,
<argument><expr><name><name>all</name><operator>.</operator><name>use_height</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><name><name>all</name><operator>.</operator><name>use_width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>, <argument><expr><name>menubox_border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>text_width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>text_width</name></expr></argument>, <argument><expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>name_width</name></expr></argument>, <argument><expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>use_width</name> <operator>=</operator> <operator>(</operator><name><name>all</name><operator>.</operator><name>use_width</name></name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>no_tags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list_width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>use_width</name></name></expr></argument>, <argument><expr><name>text_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list_width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>use_width</name></name></expr></argument>, <argument><expr><name>name_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text_width</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>name_width</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>use_width</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>text_width</name> <operator>+</operator> <name>name_width</name> <operator>&gt;</operator> <name>use_width</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">0.25</literal> <operator>*</operator> <name>use_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_width</name> <operator>&gt;</operator> <name>need</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>want</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>use_width</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>name_width</name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>text_width</name> <operator>+</operator> <name>name_width</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name_width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>want</name> <operator>&gt;</operator> <name>need</name><operator>)</operator></expr> ?</condition><then> <expr><name>want</name></expr> </then><else>: <expr><name>need</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text_width</name> <operator>=</operator> <name>use_width</name> <operator>-</operator> <name>name_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list_width</name> <operator>=</operator> <operator>(</operator><name>text_width</name> <operator>+</operator> <name>name_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>all</name><operator>.</operator><name>check_x</name></name> <operator>=</operator> <operator>(</operator><name>use_width</name> <operator>-</operator> <name>list_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>all</name><operator>.</operator><name>item_x</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_tags</name></name></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>name_width</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>+</operator> <name><name>all</name><operator>.</operator><name>check_x</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>scrollamt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name> <operator>+</operator> <name>item_no</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>&gt;=</operator> <operator>(</operator><name>max_choice</name> <operator>+</operator> <name>scrollamt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrollamt</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>choice</name> <operator>-</operator> <name>max_choice</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>max_choice</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_mouse_mkbigregion</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>box_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>box_x</name></name></expr></argument>,
<argument><expr><name><name>all</name><operator>.</operator><name>use_height</name></name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>use_width</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>KEY_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>was_mouse</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>box_y</name></name> <operator>+</operator> <name>choice</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>box_x</name></name> <operator>+</operator> <name><name>all</name><operator>.</operator><name>check_x</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_mouse_wgetch</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_result_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_button_key</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>was_mouse</name> <operator>=</operator> <operator>(</operator><name>fkey</name> <operator>&amp;&amp;</operator> <call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>was_mouse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name> <operator>-=</operator> <name>M_EVENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_mouse</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&gt;=</operator> <name>KEY_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>-</operator> <name>KEY_MAX</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max_choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>-</operator> <name>KEY_MAX</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>DLGK_TOGGLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fkey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>was_mouse</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&gt;=</operator> <name>KEY_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_lookup_key</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>DLGK_TOGGLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><name>scrollamt</name> <operator>+</operator> <name>choice</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;=</operator> <name>num_states</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>FLAG_CHECK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>list</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>scrollamt</name> <operator>+</operator> <name>choice</name></expr>]</index></name></expr></argument>,
<argument><expr><name>states</name></expr></argument>,
<argument><expr><name>choice</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>current</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><name>next</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name><name>all</name><operator>.</operator><name>list</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name></expr></argument>,
<argument><expr><name>states</name></expr></argument>,
<argument><expr><name>choice</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>all</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fkey</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>dialog_state</name><operator>.</operator><name>visit_items</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>scrollamt</name> <operator>+</operator> <name>choice</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_hotkey</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>scrollamt</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>scrollamt</name> <operator>+</operator> <name>choice</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_hotkey</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>scrollamt</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_flush_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>dlg_char_to_button</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetch</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&gt;</operator> <literal type="char">'0'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>-</operator> <literal type="char">'1'</literal> <operator>&lt;</operator> <name>max_choice</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>key</name> <operator>-</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLGK_ITEM_FIRST</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><name>scrollamt</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ITEM_LAST</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>item_no</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>scrollamt</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_PREV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>choice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>scrollamt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><call><name>MIN</name><argument_list>(<argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_NEXT</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>choice</name> <operator>+</operator> <name>max_choice</name></expr></argument>, <argument><expr><name>item_no</name> <operator>-</operator> <name>scrollamt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ITEM_PREV</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>choice</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scrollamt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ITEM_NEXT</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>choice</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scrollamt</name> <operator>+</operator> <name>choice</name> <operator>&gt;=</operator> <name>item_no</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>max_choice</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrollamt</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>max_choice</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scrollamt</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>max_choice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>print_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>scrollamt</name></expr></argument>, <argument><expr><name>max_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_enter_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_LEAVE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_PREV</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>dlg_prev_button</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>dlg_next_button</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_will_resize</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>old_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>old_width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dlg_resize_cleanup</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>was_mouse</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key2</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>key2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_mouse_free_regions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>current_item</name> <operator>=</operator> <operator>(</operator><name>scrollamt</name> <operator>+</operator> <name>choice</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dialog_checklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cprompt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>item_no</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type><name>listitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>separate_output</name> <init>= <expr><operator>(</operator><operator>(</operator><name>flag</name> <operator>==</operator> <name>FLAG_CHECK</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_status</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help_result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>listitems</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>DIALOG_LISTITEM</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>item_no</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>, <argument><expr><literal type="string">"dialog_checklist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>dialog_vars</name><operator>.</operator><name>no_items</name></name></expr>
?</condition><then> <expr><call><name>dlg_strempty</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name><name>items</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>help</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>item_help</name></name><operator>)</operator></expr>
?</condition><then> <expr><name><name>items</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>
</then><else>: <expr><call><name>dlg_strempty</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_align_columns</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listitems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DIALOG_LISTITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_checklist</name><argument_list>(<argument><expr><name>title</name></expr></argument>,
<argument><expr><name>cprompt</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>list_height</name></expr></argument>,
<argument><expr><name>item_no</name></expr></argument>,
<argument><expr><name>listitems</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLG_EXIT_OK</name></expr>:</case>
<case>case <expr><name>DLG_EXIT_EXTRA</name></expr>:</case>
<expr_stmt><expr><name>show_status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLG_EXIT_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_add_help_listitem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>help_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>listitems</name><index>[<expr><name>current</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>show_status</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>help_status</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>separate_output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name>help_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_add_separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_quoted</name><argument_list>(<argument><expr><name>help_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name>help_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_no</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>separate_output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_add_separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dlg_need_separator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_add_separator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>FLAG_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_add_quoted</name><argument_list>(<argument><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_add_string</name><argument_list>(<argument><expr><name><name>listitems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_add_last_key</name><argument_list>(<argument><expr><name>separate_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_free_columns</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listitems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DIALOG_LISTITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>item_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
