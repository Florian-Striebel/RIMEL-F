<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/inputstr.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_TSEARCH</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CACHING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CACHING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CACHING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_cache</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_cache</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_CACHING</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cache_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string_at</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
}</block></struct></type> <name>CACHE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_CACHING</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAME_CACHE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-&gt;string != 0 &amp;&amp; memcmp(c-&gt;string,s,l) == 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>CACHE</name> <modifier>*</modifier></type><name>cache_list</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{
<decl><name>cInxCols</name></decl>
,<decl><name>cCntWideBytes</name></decl>
,<decl><name>cCntWideChars</name></decl>
,<decl><name>cInxWideChars</name></decl>
,<decl><name>cMAX</name></decl>
}</block></enum></type> <name>CACHE_USED</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sorted_cache</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>have_locale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>test</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>test</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="string">"POSIX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
show_tsearch(const void *nodep, const VISIT which, const int depth)
{
const CACHE *p = *(CACHE * const *) nodep;
(void) depth;
if (which == postorder || which == leaf) {
DLG_TRACE(("#cache %p %p:%s\n", p, p-&gt;string, p-&gt;string));
}
}

static void
trace_cache(const char *fn, int ln)
{
DLG_TRACE(("#trace_cache %s@%d\n", fn, ln));
twalk(sorted_cache, show_tsearch);
}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_cache</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>ln</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? 1 : (((a) &lt; (b)) ? -1 : 0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CACHE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>CACHE</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CACHE</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>CACHE</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cache_num</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>cache_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CMP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>string_at</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>string_at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CACHE</name> <modifier>*</modifier></type>
<name>find_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cache_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name></type> <name>find</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>find</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>cache_num</name></name> <operator>=</operator> <name>cache_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>string_at</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pp</name> <operator>=</operator> <call><name>tfind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>find</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sorted_cache</name></expr></argument>, <argument><expr><name>compare_cache</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>CACHE</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>pp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cache_list</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>string_at</name></name> <operator>==</operator> <name>string</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CACHE</name> <modifier>*</modifier></type>
<name>make_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cache_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>CACHE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"load_cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cache_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cache_num</name></name> <operator>=</operator> <name>cache_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>string_at</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tsearch</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sorted_cache</name></expr></argument>, <argument><expr><name>compare_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CACHE</name> <modifier>*</modifier></type>
<name>load_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cache_num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_cache</name><argument_list>(<argument><expr><name>cache_num</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>make_cache</name><argument_list>(<argument><expr><name>cache_num</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>CACHE</name></type> <name>my_cache</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAME_CACHE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-&gt;string != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_cache</name><parameter_list>(<parameter><type><name>cache</name></type></parameter>, <parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;my_cache</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>same_cache2</name><parameter_list>(<parameter><decl><type><name>CACHE</name> <modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>&lt;</operator> <name>s_len</name>
<operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>!</operator><call><name>SAME_CACHE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>s_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>need</name> <init>= <expr><operator>(</operator><name>i_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>dlg_malloc</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>&lt;</operator> <name>i_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>dlg_realloc</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>need</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><literal type="string">"load_cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>&gt;=</operator> <name>s_len</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>=</operator> <name>s_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>same_cache1</name><parameter_list>(<parameter><decl><type><name>CACHE</name> <modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>!=</operator> <name>s_len</name>
<operator>||</operator> <operator>!</operator><call><name>SAME_CACHE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>s_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>&gt;=</operator> <name>s_len</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>s_len</name></name> <operator>=</operator> <name>s_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dlg_count_wcbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_locale</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>load_cache</name><argument_list>(<argument><expr><name>cCntWideBytes</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_cache1</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>save</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mbsrtowcs</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>dlg_count_wchars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>have_locale</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>load_cache</name><argument_list>(<argument><expr><name>cCntWideChars</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_cache1</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part</name> <init>= <expr><call><name>dlg_count_wcbytes</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>save</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>dlg_calloc</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mbsrtowcs</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>string</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>i_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type>
<name>dlg_index_wchars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>load_cache</name><argument_list>(<argument><expr><name>cInxWideChars</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_cache2</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>inx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>inx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>inx</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>inx</name></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>have_locale</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mbrlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>inx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dlg_find_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_find</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>result</name> <operator>&lt;=</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>result</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>to_find</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>result</name></expr>]</index></name>
<operator>||</operator> <name>result</name> <operator>==</operator> <name>limit</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>result</name> <operator>&lt;</operator> <name>limit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_find</name> <operator>&lt;</operator> <name><name>list</name><index>[<expr><name>result</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type>
<name>dlg_index_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>load_cache</name><argument_list>(<argument><expr><name>cInxCols</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_cache2</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIDE_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>have_locale</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>inx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_bytes</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>inx_wchars</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>inx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>inx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>inx</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name><name>inx_wchars</name><index>[<expr><name>inx</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name> <operator>|</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>check</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,
<argument><expr><name>string</name> <operator>+</operator> <name><name>inx_wchars</name><index>[<expr><name>inx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>num_bytes</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>inx_wchars</name><index>[<expr><name>inx</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>check</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>printable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cchar_t</name></type> <name>temp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp2p</name> <init>= <expr><operator>&amp;</operator><name>temp2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setcchar</name><argument_list>(<argument><expr><name>temp2p</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printable</name> <operator>=</operator> <call><name>wunctrl</name><argument_list>(<argument><expr><name>temp2p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name>printable</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>printable</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>inx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>inx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>inx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>inx</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name> <init>= <expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><name>inx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name> <operator>|</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>printable</name></decl>;</decl_stmt>
<expr_stmt><expr><name>printable</name> <operator>=</operator> <call><name>unctrl</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>printable</name></expr>
?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>printable</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>inx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>cache</name><operator>-&gt;</operator><name>list</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dlg_count_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>cols</name><index>[<expr><name>limit</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dlg_finish_string</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>dlg_limit_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cols</name><index>[<expr><name>result</name></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>result</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type>
<name>dlg_edit_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>chr_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fkey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>dlg_find_index</name><argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>*</operator><name>chr_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_len</name> <init>= <expr><call><name>dlg_max_input</name><argument_list>(<argument><expr><name>MAX_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>edit</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fkey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fkey</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><name>ESC</name></expr>:</case>
<case>case <expr><name>TAB</name></expr>:</case>
<expr_stmt><expr><name>fkey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>fkey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <name>force</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chr_offset</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_BEGIN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chr_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FINAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>limit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_DELETE_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gap</name> <init>= <expr><name><name>indx</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>-</operator> <name><name>indx</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>chr_offset</name></expr>;</init>
<condition><expr><operator>(</operator><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>string</name><index>[<expr><name>i</name> <operator>+</operator> <name>gap</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_DELETE_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gap</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&lt;=</operator> <name>limit</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name><name>indx</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>indx</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</init>
<condition><expr><operator>(</operator><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>string</name><index>[<expr><name>i</name> <operator>+</operator> <name>gap</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><name><name>indx</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chr_offset</name> <operator>&gt;</operator> <name><name>indx</name><index>[<expr><name>limit</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>limit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_DELETE_ALL</name></expr>:</case>
<expr_stmt><expr><name><name>string</name><index>[<expr><operator>*</operator><name>chr_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>DLGK_GRID_UP</name></expr>:</case>
<case>case <expr><name>DLGK_GRID_DOWN</name></expr>:</case>
<case>case <expr><name>DLGK_FIELD_NEXT</name></expr>:</case>
<case>case <expr><name>DLGK_FIELD_PREV</name></expr>:</case>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ERR</name></expr>:</case>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>max_len</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>++</operator><name>len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>*</operator><name>chr_offset</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>string</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>string</name><index>[<expr><operator>*</operator><name>chr_offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>chr_offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>edit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compute_edit_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chr_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_last</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_dpy_column</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_scroll_amt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>dlg_find_index</name><argument_list>(<argument><expr><name>indx</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>chr_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpy_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>offset2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cols</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>x_last</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>==</operator> <name>limit</name> <operator>||</operator> <operator>(</operator><name><name>cols</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>x_last</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset2</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dpy_column</name> <operator>=</operator> <name><name>cols</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>offset2</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_dpy_column</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dpy_column</name> <operator>=</operator> <name>dpy_column</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_scroll_amt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_scroll_amt</name> <operator>=</operator> <name>offset2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dlg_edit_offset</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chr_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_edit_offset</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>chr_offset</name></expr></argument>, <argument><expr><name>x_last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dlg_show_string</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chr_offset</name></decl></parameter>,
<parameter><decl><type><name>chtype</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>y_base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_base</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x_last</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hidden</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x_last</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>x_last</name> <operator>+</operator> <name>x_base</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>x_base</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hidden</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>insecure</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_base</name></expr></argument>, <argument><expr><name>x_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrollamt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_edit_offset</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>chr_offset</name></expr></argument>, <argument><expr><name>x_last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrollamt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_base</name></expr></argument>, <argument><expr><name>x_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scrollamt</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>x_last</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><name><name>cols</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>scrollamt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>check</name> <operator>&lt;=</operator> <name>x_last</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>indx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>indx</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name> <init>= <expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hidden</name> <operator>&amp;&amp;</operator> <name><name>dialog_vars</name><operator>.</operator><name>insecure</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>cols</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>k</name><operator>++</operator> <operator>&lt;</operator> <name>x_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y_base</name></expr></argument>, <argument><expr><name>x_base</name> <operator>+</operator> <name>input_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_finish_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_CACHING</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>dialog_state</name><operator>.</operator><name>finish_string</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cache_list</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>string_at</name></name> <operator>==</operator> <name>string</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TSEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>tdelete</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sorted_cache</name></expr></argument>, <argument><expr><name>compare_cache</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>trace_cache</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>cache_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cache_list</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>cache_list</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>string</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>_dlg_inputstr_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_CACHING</name></expr></cpp:if>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>finish_string</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_cache</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cache_list</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_finish_string</name><argument_list>(<argument><expr><name><name>cache_list</name><operator>-&gt;</operator><name>string_at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
