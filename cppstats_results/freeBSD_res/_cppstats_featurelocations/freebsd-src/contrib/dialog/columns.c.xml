<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/columns.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>each</name><parameter_list>(<parameter><type><name>row</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>row = 0, data = target; row &lt; num_rows; ++row, data = next_row(data, per_row)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>column_separator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>column_separator</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>next_row</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>per_row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>target</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>per_row</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>next_col</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mark</name> <init>= <expr><call><name>column_separator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>source</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>split_row</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offsets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>widths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>column_separator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>mark</name> <operator>+</operator> <name>next</name> <operator>-</operator> <name>source</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>widths</name><index>[<expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>mark</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>result</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>result</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>next_col</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>widths</name><index>[<expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dlg_align_columns</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>per_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>column_separator</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numcols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxcols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>widths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>maxwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>realwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><call><name>each</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>maxcols</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxcols</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>++</operator><name>maxcols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>widths</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>maxcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offsets</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>maxcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>maxcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>widths</name></expr></argument>, <argument><expr><literal type="string">"dlg_align_columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>, <argument><expr><literal type="string">"dlg_align_columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><literal type="string">"dlg_align_columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><call><name>each</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cols</name> <init>= <expr><call><name>split_row</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>widths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numcols</name> <operator>&lt;</operator> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numcols</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>maxwidth</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;</operator> <name><name>widths</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>maxwidth</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>widths</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <name>numcols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>numcols</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>realwidth</name> <operator>+=</operator> <name><name>maxwidth</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><call><name>each</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cols</name> <init>= <expr><call><name>split_row</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><name>widths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>realwidth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"dlg_align_columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>realwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>widths</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>maxwidth</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>text</name><index>[<expr><name>realwidth</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>widths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>maxwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dlg_free_columns</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>per_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>column_separator</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><call><name>each</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
