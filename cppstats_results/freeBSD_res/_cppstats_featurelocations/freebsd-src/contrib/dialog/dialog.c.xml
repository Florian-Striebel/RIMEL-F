<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/dialog.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_internals.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASSARGS</name></cpp:macro> <cpp:value>t, av, offset_add</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLARGS</name></cpp:macro> <cpp:value>const char *t, char *av[], int *offset_add</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>callerFn</name>) <parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>o_unknown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
,<decl><name>o_allow_close</name></decl>
,<decl><name>o_and_widget</name></decl>
,<decl><name>o_ascii_lines</name></decl>
,<decl><name>o_aspect_ratio</name></decl>
,<decl><name>o_auto_placement</name></decl>
,<decl><name>o_backtitle</name></decl>
,<decl><name>o_beep_signal</name></decl>
,<decl><name>o_beep_after_signal</name></decl>
,<decl><name>o_begin_set</name></decl>
,<decl><name>o_cancel_label</name></decl>
,<decl><name>o_checklist</name></decl>
,<decl><name>o_dlg_clear_screen</name></decl>
,<decl><name>o_colors</name></decl>
,<decl><name>o_column_separator</name></decl>
,<decl><name>o_cr_wrap</name></decl>
,<decl><name>o_create_rc</name></decl>
,<decl><name>o_cursor_off_label</name></decl>
,<decl><name>o_date_format</name></decl>
,<decl><name>o_default_button</name></decl>
,<decl><name>o_default_item</name></decl>
,<decl><name>o_defaultno</name></decl>
,<decl><name>o_erase_on_exit</name></decl>
,<decl><name>o_exit_label</name></decl>
,<decl><name>o_extra_button</name></decl>
,<decl><name>o_extra_label</name></decl>
,<decl><name>o_fixed_font</name></decl>
,<decl><name>o_form</name></decl>
,<decl><name>o_gauge</name></decl>
,<decl><name>o_help</name></decl>
,<decl><name>o_help_button</name></decl>
,<decl><name>o_help_file</name></decl>
,<decl><name>o_help_label</name></decl>
,<decl><name>o_help_line</name></decl>
,<decl><name>o_help_status</name></decl>
,<decl><name>o_help_tags</name></decl>
,<decl><name>o_icon</name></decl>
,<decl><name>o_ignore</name></decl>
,<decl><name>o_infobox</name></decl>
,<decl><name>o_input_fd</name></decl>
,<decl><name>o_inputbox</name></decl>
,<decl><name>o_inputmenu</name></decl>
,<decl><name>o_insecure</name></decl>
,<decl><name>o_item_help</name></decl>
,<decl><name>o_keep_colors</name></decl>
,<decl><name>o_keep_tite</name></decl>
,<decl><name>o_keep_window</name></decl>
,<decl><name>o_last_key</name></decl>
,<decl><name>o_max_input</name></decl>
,<decl><name>o_menu</name></decl>
,<decl><name>o_mixedform</name></decl>
,<decl><name>o_mixedgauge</name></decl>
,<decl><name>o_msgbox</name></decl>
,<decl><name>o_no_close</name></decl>
,<decl><name>o_nocollapse</name></decl>
,<decl><name>o_no_cr_wrap</name></decl>
,<decl><name>o_cant_kill</name></decl>
,<decl><name>o_no_hot_list</name></decl>
,<decl><name>o_no_label</name></decl>
,<decl><name>o_no_lines</name></decl>
,<decl><name>o_no_mouse</name></decl>
,<decl><name>o_no_nl_expand</name></decl>
,<decl><name>o_use_shadow</name></decl>
,<decl><name>o_nocancel</name></decl>
,<decl><name>o_nook</name></decl>
,<decl><name>o_ok_label</name></decl>
,<decl><name>o_output_fd</name></decl>
,<decl><name>o_output_separator</name></decl>
,<decl><name>o_passwordbox</name></decl>
,<decl><name>o_passwordform</name></decl>
,<decl><name>o_pause</name></decl>
,<decl><name>o_prgbox</name></decl>
,<decl><name>o_print_maxsize</name></decl>
,<decl><name>o_print_siz</name></decl>
,<decl><name>o_text_only</name></decl>
,<decl><name>o_print_text_size</name></decl>
,<decl><name>o_print_version</name></decl>
,<decl><name>o_programbox</name></decl>
,<decl><name>o_progressbox</name></decl>
,<decl><name>o_quoted</name></decl>
,<decl><name>o_radiolist</name></decl>
,<decl><name>o_screen_center</name></decl>
,<decl><name>o_use_scrollbar</name></decl>
,<decl><name>o_separate_output</name></decl>
,<decl><name>o_separate_str</name></decl>
,<decl><name>o_single_quoted</name></decl>
,<decl><name>o_size_err</name></decl>
,<decl><name>o_sleep_secs</name></decl>
,<decl><name>o_smooth</name></decl>
,<decl><name>o_output_stderr</name></decl>
,<decl><name>o_output_stdout</name></decl>
,<decl><name>o_tab_correct</name></decl>
,<decl><name>o_tab_len</name></decl>
,<decl><name>o_tailbox</name></decl>
,<decl><name>o_tailboxbg</name></decl>
,<decl><name>o_textbox</name></decl>
,<decl><name>o_time_format</name></decl>
,<decl><name>o_timeout_secs</name></decl>
,<decl><name>o_title</name></decl>
,<decl><name>o_trim_whitespace</name></decl>
,<decl><name>o_under_mouse</name></decl>
,<decl><name>o_version</name></decl>
,<decl><name>o_visit_items</name></decl>
,<decl><name>o_wmclass</name></decl>
,<decl><name>o_yes_label</name></decl>
,<decl><name>o_yesno</name></decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WHIPTAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<decl><name>o_fullbutton</name></decl>
,<decl><name>o_topleft</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<decl><name>o_calendar</name></decl>
,<decl><name>o_dselect</name></decl>
,<decl><name>o_editbox</name></decl>
,<decl><name>o_fselect</name></decl>
,<decl><name>o_timebox</name></decl>
,<decl><name>o_week_start</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<decl><name>o_buildlist</name></decl>
,<decl><name>o_rangebox</name></decl>
,<decl><name>o_reorder</name></decl>
,<decl><name>o_treeview</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WHIPTAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<decl><name>o_no_items</name></decl>
,<decl><name>o_no_tags</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<decl><name>o_trace</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,<decl><name>o_iso_week</name></decl>
}</block></enum></type> <name>eOptions</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>tUnknown</name></decl>
,<decl><name>tFalse</name></decl>
,<decl><name>tTrue</name></decl>
,<decl><name>tNumber</name></decl>
,<decl><name>tString</name></decl>
}</block></enum></type> <name>tOptions</name>;</typedef>








<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eOptions</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tOptions</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>
}</block></struct></type> <name>Options</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>eOptions</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argmin</name></decl>, <name>argmax</name>;</decl_stmt>
<decl_stmt><decl><type><name>callerFn</name> <modifier>*</modifier></type><name>jumper</name></decl>;</decl_stmt>
}</block></struct></type> <name>Mode</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 1, tFalse, offsetof(DIALOG_STATE,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 1, tTrue, offsetof(DIALOG_STATE,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 1, tNumber, offsetof(DIALOG_STATE,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 1, tString, offsetof(DIALOG_STATE,name)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 2, tFalse, offsetof(DIALOG_VARS,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 2, tTrue, offsetof(DIALOG_VARS,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 2, tNumber, offsetof(DIALOG_VARS,name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 2, tString, offsetof(DIALOG_VARS,name)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xxF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, tFalse, 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xxT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, tTrue, 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xxN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, tNumber, 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xxS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, tString, 0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opW</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, 0, 0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opO</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o_##name, 0, 0, 0</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>known_opts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dialog_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dialog_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>special_argv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>special_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ignore_unknown</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><literal type="string">"dialog"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_all_blobs</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_all_blobs</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>
}</block></struct></type> <name>AllBlobs</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AllBlobs</name> <modifier>*</modifier></type><name>all_blobs</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Options</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"allow-close"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>allow_close</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"and-widget"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>and_widget</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ascii-lines"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>ascii_lines</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aspect"</literal></expr>, <expr><call><name>ssN</name><argument_list>(<argument><expr><name>aspect_ratio</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;ratio&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto-placement"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>auto_placement</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"backtitle"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>backtitle</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;backtitle&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"beep"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>beep_signal</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"beep-after"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>beep_after_signal</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"begin"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>begin_set</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;y&gt; &lt;x&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cancel-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"checklist"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;list height&gt; &lt;tag1&gt; &lt;item1&gt; &lt;status1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>dlg_clear_screen</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"colors"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"column-separator"</literal></expr>,<expr><call><name>svS</name><argument_list>(<argument><expr><name>column_separator</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cr-wrap"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>cr_wrap</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"create-rc"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>create_rc</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cursor-off-label"</literal></expr>,<expr><call><name>svT</name><argument_list>(<argument><expr><name>cursor_off_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"date-format"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>date_format</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default-button"</literal></expr>, <expr><call><name>xxS</name><argument_list>(<argument><expr><name>default_button</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default-item"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>default_item</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"defaultno"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>defaultno</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"erase-on-exit"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>erase_on_exit</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exit-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>exit_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extra-button"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>extra_button</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extra-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fixed-font"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>fixed_font</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"form"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;form height&gt; &lt;label1&gt; &lt;l_y1&gt; &lt;l_x1&gt; &lt;item1&gt; &lt;i_y1&gt; &lt;i_x1&gt; &lt;flen1&gt; &lt;ilen1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gauge"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; [&lt;percent&gt;]"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"guage"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help-button"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>help_button</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help-status"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>help_status</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help-tags"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>help_tags</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hfile"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>help_file</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hline"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>help_line</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icon"</literal></expr>, <expr><call><name>xxS</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ignore"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"infobox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>infobox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input-fd"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>input_fd</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;fd&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inputbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>inputbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; [&lt;init&gt;]"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inputmenu"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>inputmenu</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;menu height&gt; &lt;tag1&gt; &lt;item1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insecure"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>insecure</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"item-help"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>item_help</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keep-colors"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>keep_colors</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keep-tite"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>keep_tite</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keep-window"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>keep_window</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"last-key"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>last_key</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"max-input"</literal></expr>, <expr><call><name>svN</name><argument_list>(<argument><expr><name>max_input</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;n&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"menu"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;menu height&gt; &lt;tag1&gt; &lt;item1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mixedform"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>mixedform</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;form height&gt; &lt;label1&gt; &lt;l_y1&gt; &lt;l_x1&gt; &lt;item1&gt; &lt;i_y1&gt; &lt;i_x1&gt; &lt;flen1&gt; &lt;ilen1&gt; &lt;itype&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mixedgauge"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>mixedgauge</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;percent&gt; &lt;tag1&gt; &lt;item1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"msgbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>msgbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-cancel"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>nocancel</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-close"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>no_close</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-collapse"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>nocollapse</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-hot-list"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_hot_list</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-kill"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>cant_kill</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>no_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-lines"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_lines</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-mouse"</literal></expr>, <expr><call><name>ssT</name><argument_list>(<argument><expr><name>no_mouse</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-nl-expand"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_nl_expand</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-ok"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>nook</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-shadow"</literal></expr>, <expr><call><name>ssF</name><argument_list>(<argument><expr><name>use_shadow</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ok-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"output-fd"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>output_fd</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;fd&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"output-separator"</literal></expr>,<expr><call><name>svS</name><argument_list>(<argument><expr><name>output_separator</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"passwordbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>passwordbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; [&lt;init&gt;]"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"passwordform"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>passwordform</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;form height&gt; &lt;label1&gt; &lt;l_y1&gt; &lt;l_x1&gt; &lt;item1&gt; &lt;i_y1&gt; &lt;i_x1&gt; &lt;flen1&gt; &lt;ilen1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pause"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;seconds&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prgbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>prgbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;command&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print-maxsize"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>print_maxsize</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print-size"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>print_siz</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print-text-only"</literal></expr>,<expr><call><name>ssT</name><argument_list>(<argument><expr><name>text_only</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print-text-size"</literal></expr>,<expr><call><name>opO</name><argument_list>(<argument><expr><name>print_text_size</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print-version"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>print_version</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"programbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>programbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"progressbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>progressbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quoted"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"radiolist"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>radiolist</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;list height&gt; &lt;tag1&gt; &lt;item1&gt; &lt;status1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"screen-center"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>screen_center</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scrollbar"</literal></expr>, <expr><call><name>ssT</name><argument_list>(<argument><expr><name>use_scrollbar</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"separate-output"</literal></expr>,<expr><call><name>svT</name><argument_list>(<argument><expr><name>separate_output</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"separate-widget"</literal></expr>,<expr><call><name>ssS</name><argument_list>(<argument><expr><name>separate_str</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"separator"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>output_separator</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"single-quoted"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>single_quoted</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size-err"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>size_err</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sleep"</literal></expr>, <expr><call><name>svN</name><argument_list>(<argument><expr><name>sleep_secs</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;secs&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smooth"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>smooth</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stderr"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>output_stderr</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stdout"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>output_stdout</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tab-correct"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>tab_correct</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tab-len"</literal></expr>, <expr><call><name>ssN</name><argument_list>(<argument><expr><name>tab_len</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;n&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tailbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>tailbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;file&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tailboxbg"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>tailboxbg</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;file&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"textbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>textbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;file&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"time-format"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>time_format</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timeout"</literal></expr>, <expr><call><name>svN</name><argument_list>(<argument><expr><name>timeout_secs</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;secs&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;title&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"trim"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>trim_whitespace</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"under-mouse"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>under_mouse</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"visit-items"</literal></expr>, <expr><call><name>ssT</name><argument_list>(<argument><expr><name>visit_items</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wmclass"</literal></expr>, <expr><call><name>xxS</name><argument_list>(<argument><expr><name>wmclass</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yes-label"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>yes_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yesno"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>yesno</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WHIPTAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"cancel-button"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fb"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>fullbutton</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fullbutton"</literal></expr>, <expr><call><name>xxT</name><argument_list>(<argument><expr><name>fullbutton</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-button"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>no_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ok-button"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scrolltext"</literal></expr>, <expr><call><name>ssT</name><argument_list>(<argument><expr><name>use_scrollbar</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"topleft"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>begin_set</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yes-button"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>yes_label</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"calendar"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;day&gt; &lt;month&gt; &lt;year&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dselect"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>dselect</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;directory&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"editbox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>editbox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;file&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fselect"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>fselect</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;filepath&gt; &lt;height&gt; &lt;width&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timebox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>timebox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;hour&gt; &lt;minute&gt; &lt;second&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"week-start"</literal></expr>, <expr><call><name>svS</name><argument_list>(<argument><expr><name>week_start</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;str&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iso-week"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>iso_week</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"buildlist"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>buildlist</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;list-height&gt; &lt;tag1&gt; &lt;item1&gt; &lt;status1&gt;..."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-items"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_items</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-tags"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_tags</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rangebox"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>rangebox</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;min-value&gt; &lt;max-value&gt; &lt;default-value&gt;"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reorder"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>reorder</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"treeview"</literal></expr>, <expr><call><name>opW</name><argument_list>(<argument><expr><name>treeview</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"&lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;list-height&gt; &lt;tag1&gt; &lt;item1&gt; &lt;status1&gt; &lt;depth1&gt;..."</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WHIPTAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"noitem"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_items</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"notags"</literal></expr>, <expr><call><name>svT</name><argument_list>(<argument><expr><name>no_tags</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"trace"</literal></expr>, <expr><call><name>opO</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"&lt;file&gt;"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_leak</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AllBlobs</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>dlg_calloc</name><argument_list>(<argument><expr><name>AllBlobs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>blob</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>all_blobs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_blobs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>all_blobs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>blob</name> <init>= <expr><name><name>all_blobs</name><operator>-&gt;</operator><name>blob</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllBlobs</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>all_blobs</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>all_blobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_blobs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dialog_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>special_argv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>special_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>special_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>special_argv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>special_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>handle_leaks</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ignore_leak</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OptionChars</name></cpp:macro> <cpp:value>"0123456789-abcdefghijklmnopqrstuvwxyz"</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>bool</name></type>
<name>isOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dialog_opts</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>dialog_opts</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dialog_opts</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>strspn</name><operator>)</operator> <operator>(</operator><name>arg</name><operator>,</operator> <name>OptionChars</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Invalid option \"%s\""</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type>
<name>unescape_argv</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_includes</name> <init>= <expr><literal type="number">20</literal> <operator>+</operator> <operator>*</operator><name>argcp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_includes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>doalloc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>my_argv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my_argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#unescape_argv\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>my_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>special_argv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>special_argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isOption</name><argument_list>(<argument><expr><name><name>special_argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>my_argv</name><index>[<expr><name>my_argc</name></expr>]</index></name> <operator>=</operator> <name><name>special_argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>my_argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_argc</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>argcp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my_argv</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>my_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>my_argv</name></expr></argument>, <argument><expr><literal type="string">"unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>escaped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_eat_argv</name><argument_list>(<argument><expr><name>argcp</name></expr></argument>, <argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"--args"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Showing arguments at arg%d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" arg%d:%s\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dlg_eat_argv</name><argument_list>(<argument><expr><name>argcp</name></expr></argument>, <argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"--file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>count_includes</name> <operator>&gt;</operator> <name>limit_includes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Too many --file options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>filename</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#opened --file %s ..\n"</literal><operator>,</operator> <name>filename</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>blob</name> <operator>=</operator> <call><name>dlg_realloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <name>BUFSIZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><literal type="string">"unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>blob</name> <operator>+</operator> <name>length</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>BUFSIZ</name></expr></argument>,
<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"error on filehandle in unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>bytes_read</name> <operator>==</operator> <name>BUFSIZ</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blob</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ignore_leak</name><argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>dlg_string_to_argv</name><argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name> <operator>=</operator> <call><name>dlg_count_argv</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>added</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>size_t</name></type> <name>need</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>argcp</name> <operator>+</operator> <name>added</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>doalloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>argvp</name> <operator>=</operator> <call><name>dlg_realloc</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>need</name></expr></argument>, <argument><expr><operator>*</operator><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><operator>*</operator><name>argvp</name></expr></argument>, <argument><expr><literal type="string">"unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newp</name> <init>= <expr><call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ignore_leak</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><literal type="string">"unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>newp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>argvp</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>doalloc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>my_argv</name> <operator>=</operator> <call><name>dlg_realloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>need</name></expr></argument>, <argument><expr><name>my_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>my_argv</name></expr></argument>, <argument><expr><literal type="string">"unescape_argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>argcp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name> <operator>+</operator> <name>added</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>added</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>added</name></expr>;</init> <condition><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>added</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>added</name></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>added</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>n</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <name><name>list</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>argcp</name> <operator>+=</operator> <name>added</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><operator>*</operator><name>argcp</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#finished --file\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot open --file %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"No value given for --file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>my_argv</name><index>[<expr><name>my_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#\toption argv[%d]=%s\n"</literal><operator>,</operator> <name>j</name><operator>,</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>my_argv</name><index>[<expr><name>my_argc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>known_opts</name> <operator>=</operator> <name>my_argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dialog_opts</name> <operator>=</operator> <name>my_argv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#\t%d options vs %d arguments\n"</literal><operator>,</operator> <name>known_opts</name><operator>,</operator> <operator>*</operator><name>argcp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dialog_argv</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argvp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Options</name> <modifier>*</modifier></type>
<name>findOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pass</name> <operator>&amp;</operator> <name><name>options</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pass</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recur</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"--no-%s"</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>findOption</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>findOption</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"--no-%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>findOption</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>eOptions</name></type>
<name>lookupOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eOptions</name></type> <name>result</name> <init>= <expr><name>o_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>findOption</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"%s.\nUse --help to list options.\n\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>arg_rest</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>isOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>o_unknown</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>howmany_tags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>have</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>have</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>group</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected %d arguments, found only %d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>have</name> <operator>%</operator> <name>group</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected %d arguments, found extra %d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>(</operator><name>have</name> <operator>%</operator> <name>group</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>have</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>have</name> <operator>/</operator> <name>group</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>numeric_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <call><name>dlg_count_argv</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>last</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"Expected a number for token %d of %.20s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>optional_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>dft</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>av</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>optional_num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>dft</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>show_result</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>either</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLG_EXIT_OK</name></expr>:</case>
<case>case <expr><name>DLG_EXIT_EXTRA</name></expr>:</case>
<case>case <expr><name>DLG_EXIT_HELP</name></expr>:</case>
<case>case <expr><name>DLG_EXIT_ITEM_HELP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>output_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dialog_state</name><operator>.</operator><name>separate_str</name></name></expr>
?</condition><then> <expr><name><name>dialog_state</name><operator>.</operator><name>separate_str</name></name></expr>
</then><else>: <expr><name>DEFAULT_SEPARATE_STR</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>either</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>dialog_vars</name><operator>.</operator><name>input_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#input_result:\n%s\n"</literal><operator>,</operator> <name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>either</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>either</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_yesno</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_yesno</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_msgbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_msgbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_infobox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_msgbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_textbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_textbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_menu</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>MENUBOX_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>MENUBOX_TAGS</name></expr>;</expr_stmt>

<return>return <expr><call><name>dialog_menu</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_inputmenu</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>MENUBOX_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>free_extra_label</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_menu</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>max_input</name></name> <operator>=</operator> <name>MAX_LEN</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>extra_label</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>free_extra_label</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>extra_label</name></name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Rename"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>extra_button</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>MENUBOX_TAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dialog_menu</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>free_extra_label</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>extra_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>extra_label</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_checklist</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>CHECKBOX_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>CHECKBOX_TAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dialog_checklist</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>FLAG_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_radiolist</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>CHECKBOX_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>CHECKBOX_TAGS</name></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_checklist</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>FLAG_RADIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_inputbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_inputbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_str</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_passwordbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_inputbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_str</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_calendar</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_calendar</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_dselect</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_dselect</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_editbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_editbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_fselect</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_fselect</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_timebox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_timebox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DisableNoTags</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>bool save_no_tags = dialog_vars.no_tags; bool save_no_items = dialog_vars.no_items; dialog_vars.no_tags = TRUE; dialog_vars.no_items = FALSE</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RestoreNoTags</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dialog_vars.no_tags = save_no_tags; dialog_vars.no_items = save_no_items</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_buildlist</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>CHECKBOX_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DisableNoTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>CHECKBOX_TAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dialog_buildlist</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>reorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RestoreNoTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_rangebox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_value</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_value</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_rangebox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>min_value</name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>offset_add</name> <operator>&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>min_value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_treeview</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>TREEVIEW_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DisableNoTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dialog_treeview</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>FLAG_RADIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RestoreNoTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_FORMBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_form</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><name>FORMBOX_TAGS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>group</name></expr>;</expr_stmt>

<return>return <expr><call><name>dialog_form</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_password_form</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>save</name> <init>= <expr><name><name>dialog_vars</name><operator>.</operator><name>formitem_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>formitem_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>call_form</name><argument_list>(<argument><expr><name>PASSARGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>formitem_type</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_MIXEDFORM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_mixed_form</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><name>MIXEDFORM_TAGS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>group</name></expr>;</expr_stmt>

<return>return <expr><call><name>dialog_mixedform</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_gauge</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_gauge</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optional_num</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_pause</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_pause</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MIXEDGAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_mixed_gauge</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXEDGAUGE_BASE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><call><name>howmany_tags</name><argument_list>(<argument><expr><name>av</name> <operator>+</operator> <name>MIXEDGAUGE_BASE</name></expr></argument>, <argument><expr><name>MIXEDGAUGE_TAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <name>MIXEDGAUGE_BASE</name> <operator>+</operator> <name>tags</name> <operator>*</operator> <name>MIXEDGAUGE_TAGS</name></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_mixedgauge</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>av</name> <operator>+</operator> <name>MIXEDGAUGE_BASE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_prgbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>offset_add</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>
?</condition><then> <expr><call><name>dialog_prgbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>dialog_prgbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_programbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>offset_add</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>
?</condition><then> <expr><call><name>dlg_progressbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>dlg_progressbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>pipe_input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_progressbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>offset_add</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>
?</condition><then> <expr><call><name>dialog_progressbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>dialog_progressbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TAILBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_tailbox</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_tailbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_tailboxbg</name><parameter_list>(<parameter><decl><type><name>CALLARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset_add</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><call><name>dialog_tailbox</name><argument_list>(<argument><expr><name>t</name></expr></argument>,
<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>numeric_arg</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Mode</name></type> <name><name>modes</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><name>o_yesno</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_yesno</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_msgbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_msgbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_infobox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_infobox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_textbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_textbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_menu</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_menu</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_inputmenu</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_inputmenu</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_checklist</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_checklist</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_radiolist</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_radiolist</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_inputbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_inputbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_passwordbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_passwordbox</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_GAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_gauge</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_gauge</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_pause</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_pause</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_prgbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_prgbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_programbox</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_programbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_progressbox</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_progressbox</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_FORMBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_passwordform</name></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_password_form</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_form</name></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_form</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MIXEDGAUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_mixedgauge</name></expr>, <expr><name>MIXEDGAUGE_BASE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_mixed_gauge</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_MIXEDFORM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_mixedform</name></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_mixed_form</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TAILBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_tailbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_tailbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_tailboxbg</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_tailboxbg</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_calendar</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>call_calendar</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_dselect</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_dselect</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_editbox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>call_editbox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_fselect</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>call_fselect</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_timebox</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>call_timebox</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>o_buildlist</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_buildlist</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_rangebox</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>call_rangebox</name></expr>}</block></expr>,
<expr><block>{<expr><name>o_treeview</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>call_treeview</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>optionString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><operator>*</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>argv</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Expected a string-parameter for %.20s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>optionValue</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><operator>*</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>argv</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Expected a numeric-parameter for %.20s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>optionBool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Options</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>normal</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>tTrue</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>actual</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>normal</name></expr> </then><else>: <expr><operator>!</operator><name>normal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>normal</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>want_no</name> <init>= <expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>actual</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_no</name> <init>= <expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>have_no</name> <operator>==</operator> <name>want_no</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>normal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>button_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
}</block> <decl><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ok"</literal></expr>, <expr><name>DLG_EXIT_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yes"</literal></expr>, <expr><name>DLG_EXIT_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cancel"</literal></expr>, <expr><name>DLG_EXIT_CANCEL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no"</literal></expr>, <expr><name>DLG_EXIT_CANCEL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>DLG_EXIT_HELP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extra"</literal></expr>, <expr><name>DLG_EXIT_EXTRA</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>DLG_EXIT_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>DLG_EXIT_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Button name \"%.20s\" unknown"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>IgnoreNonScreen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ignore_unknown</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_dialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintTextOnly</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>eOptions</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><call><name>arg_rest</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>LINES</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>COLS</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_ttysize</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dialog_state</name><operator>.</operator><name>screen_height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dialog_state</name><operator>.</operator><name>screen_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>optionString</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IgnoreNonScreen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>numeric_arg</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <name>next</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_trim_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width2</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_text_only</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>height2</name></expr></argument>, <argument><expr><name>width2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>text_only</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_print_text_size</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,
<argument><expr><name><name>dialog_state</name><operator>.</operator><name>text_height</name></name></expr></argument>,
<argument><expr><name><name>dialog_state</name><operator>.</operator><name>text_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leaf</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leaf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>leaf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>program</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><name>leaf</name></expr> </then><else>: <expr><call><name>dialog_version</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Mode</name> <modifier>*</modifier></type>
<name>lookupMode</name><parameter_list>(<parameter><decl><type><name>eOptions</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Mode</name> <modifier>*</modifier></type><name>modePtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>TableSize</name><argument_list>(<argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>modes</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modePtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>modes</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>modePtr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_opts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Options</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Options</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Options</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>Options</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>q</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintVersion</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Version: %s\n"</literal></expr></argument>, <argument><expr><call><name>dialog_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>Help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tbl_1</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"cdialog (ComeOn Dialog!) version %s"</literal></expr>,
<expr><literal type="string">"Copyright 2000-2020,2021 Thomas E. Dickey"</literal></expr>,
<expr><literal type="string">"This is free software; see the source for copying conditions. There is NO"</literal></expr>,
<expr><literal type="string">"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"* Display dialog boxes from shell scripts *"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Usage: %s &lt;options&gt; { --and-widget &lt;options&gt; }"</literal></expr>,
<expr><literal type="string">"where options are \"common\" options, followed by \"box\" options"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"Special options:"</literal></expr>,
<expr><literal type="string">" [--create-rc \"file\"]"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <name><name>tbl_3</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"Auto-size with height and width = 0. Maximize with height and width = -1."</literal></expr>,
<expr><literal type="string">"Global-auto-size if also menu_height/list_height = 0."</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name> <init>= <expr><call><name>TableSize</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>end_dialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>dlg_calloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Options</name> <operator>*</operator></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Options</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrintList</name><argument_list>(<argument><expr><name>tbl_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"Common options:\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pass</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">6</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">75</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" [--%s%s%s]"</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"\nBox options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pass</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>lookupMode</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" --%-12s %s\n"</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PrintList</name><argument_list>(<argument><expr><name>tbl_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_trace_option</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>trace_output</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_trace</name><argument_list>(<argument><expr><call><name>optionString</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#ignore extra --trace option\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#Parameters:\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#\targv[%d] = %s\n"</literal><operator>,</operator> <name>j</name><operator>,</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_common_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#process_common_options, offset %d:%d\n"</literal><operator>,</operator> <name>offset</name><operator>,</operator> <name>argc</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>empty</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eOptions</name></type> <name>code</name> <init>= <expr><name>o_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sval</name> <init>= <expr><name>empty</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#\targv[%d] = %s\n"</literal><operator>,</operator> <name>offset</name><operator>,</operator> <name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>findOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>vars</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dialog_state</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dialog_vars</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TraceTarget</name></cpp:macro> <cpp:value>((target == (char *) &amp;dialog_state) ? "dialog_state" : "dialog_vars")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TraceBVal</name></cpp:macro> <cpp:value>(bval ? "TRUE" : "FALSE")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TraceDone</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DLG_TRACE(("#\t.. set %s.%s = %"fmt"\n", TraceTarget, data-&gt;name, value))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TraceLate</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DLG_TRACE(("#\t.. defer setting %s = %"fmt"\n", data-&gt;name, value))</cpp:value></cpp:define>


<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><name>tFalse</name></expr>:</case>
<case>case <expr><name>tTrue</name></expr>:</case>
<expr_stmt><expr><name>bval</name> <operator>=</operator> <call><name>optionBool</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>target</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>bval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TraceDone</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>TraceBVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TraceLate</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>TraceBVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>tNumber</name></expr>:</case>
<expr_stmt><expr><name>nval</name> <operator>=</operator> <call><name>optionValue</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>target</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>nval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TraceDone</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TraceLate</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>tString</name></expr>:</case>
<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>optionString</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>target</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>sval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TraceDone</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TraceLate</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_defaultno</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>default_button</name></name> <operator>=</operator> <name>DLG_EXIT_CANCEL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_default_button</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>default_button</name></name> <operator>=</operator> <call><name>button_code</name><argument_list>(<argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>defaultno</name></name> <operator>=</operator> <name><name>dialog_vars</name><operator>.</operator><name>default_button</name></name> <operator>==</operator> <name>DLG_EXIT_CANCEL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_text_only</name></expr>:</case>
<case>case <expr><name>o_print_text_size</name></expr>:</case>
<expr_stmt><expr><call><name>PrintTextOnly</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_print_maxsize</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IgnoreNonScreen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"MaxSize: %d, %d\n"</literal></expr></argument>, <argument><expr><name>SLINES</name></expr></argument>, <argument><expr><name>SCOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>o_print_version</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintVersion</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>o_visit_items</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>visit_cols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_begin_set</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WHIPTAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--topleft"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_y</name></name> <operator>=</operator> <call><name>optionValue</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>begin_x</name></name> <operator>=</operator> <call><name>optionValue</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>o_ascii_lines</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>no_lines</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_no_lines</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>ascii_lines</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_no_mouse</name></expr>:</case>
<expr_stmt><expr><call><name>mouse_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_unknown</name></expr>:</case>
<expr_stmt><expr><name>done</name> <operator>=</operator> <operator>!</operator><name>ignore_unknown</name></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>o_trace</name></expr>:</case>
<expr_stmt><expr><call><name>process_trace_option</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>o_iso_week</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>week_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>default_1st</name><index>[]</index></name> <init>= <expr><literal type="string">"1"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>week_start</name></name> <operator>=</operator> <name>default_1st</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>aspect_ratio</name></name> <operator>=</operator> <name>DEFAULT_ASPECT_RATIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_result</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#init_result\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog_vars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialog_vars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>default_button</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>dlg_getenv_str</name><argument_list>(<argument><expr><literal type="string">"DIALOGOPTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>special_argv</name> <operator>=</operator> <call><name>dlg_string_to_argv</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>special_argc</name> <operator>=</operator> <call><name>dlg_count_argv</name><argument_list>(<argument><expr><name>special_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>special_argv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_common_options</name><argument_list>(<argument><expr><name>special_argc</name></expr></argument>, <argument><expr><name>special_argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>esc_pressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_tite</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>DLG_EXIT_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eOptions</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>my_buffer</name><index>[<expr><name>MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialog_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog_vars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialog_vars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><name>NLS_TEXTDOMAIN</name></expr></argument>, <argument><expr><name>LOCALEDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textdomain</name><argument_list>(<argument><expr><name>NLS_TEXTDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_result</name><argument_list>(<argument><expr><name>my_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unescape_argv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>program</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>










<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_output_stdout</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_output_stderr</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_input_fd</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>optionValue</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>input</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot open input-fd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>o_output_fd</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>optionValue</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot open output-fd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>o_keep_tite</name></expr>:</case>
<expr_stmt><expr><name>keep_tite</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_version</name></expr>:</case>
<expr_stmt><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintVersion</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_help</name></expr>:</case>
<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>o_trace</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_trace_option</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><operator>++</operator><name>offset</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#discarding %d parameters starting with argv[%d] (%s)\n"</literal><operator>,</operator>
<literal type="number">1</literal> <operator>+</operator> <name>offset</name> <operator>-</operator> <name>base</name><operator>,</operator> <name>base</name><operator>,</operator>
<name><name>argv</name><index>[<expr><name>base</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>base</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dialog_argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dialog_argv</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>offset</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_result</name><argument_list>(<argument><expr><name>my_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>keep_tite</name></name> <operator>|=</operator> <name>keep_tite</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>code</name> <operator>=</operator> <call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_print_maxsize</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"MaxSize: %d, %d\n"</literal></expr></argument>, <argument><expr><name>SLINES</name></expr></argument>, <argument><expr><name>SCOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_print_version</name></expr>:</case>
<expr_stmt><expr><call><name>PrintVersion</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_dlg_clear_screen</name></expr>:</case>
<expr_stmt><expr><call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_keep_tite</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>output</name></name> <operator>==</operator> <name>stdout</name><operator>)</operator></expr> ?</condition><then> <expr><name>stderr</name></expr> </then><else>: <expr><name>stdout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_ignore</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>o_create_rc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Expected a filename for %.50s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_parse_rc</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"dialog: dlg_parse_rc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_create_rc</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>





<expr_stmt><expr><name>initial</name> <operator>=</operator> <call><name>process_common_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initial</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>DLG_EXIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_dialog</name><argument_list>(<argument><expr><name><name>dialog_state</name><operator>.</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>dialog_state</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>esc_pressed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>have</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Mode</name> <modifier>*</modifier></type><name>modePtr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_result</name><argument_list>(<argument><expr><name>my_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>process_common_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> <operator>&gt;</operator> <name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ignore_unknown</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><literal type="string">"Expected a box option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XDIALOG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>o_buildlist</name></expr>:</case>
<case>case <expr><name>o_treeview</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>o_checklist</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,
<argument><expr><literal type="string">"Unexpected widget with --separate-output %.20s"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_put_backtitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>modePtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>o_unknown</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modePtr</name> <operator>=</operator> <call><name>lookupMode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modePtr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"%s option %.20s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>o_unknown</name></expr>
?</condition><then> <expr><literal type="string">"Unexpected"</literal></expr>
</then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>have</name> <operator>=</operator> <call><name>arg_rest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>have</name> <operator>&lt;</operator> <name><name>modePtr</name><operator>-&gt;</operator><name>argmin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Expected at least %d tokens for %.20s, have %d"</literal></expr></argument>,
<argument><expr><name><name>modePtr</name><operator>-&gt;</operator><name>argmin</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>,
<argument><expr><name>have</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>modePtr</name><operator>-&gt;</operator><name>argmax</name></name> <operator>&amp;&amp;</operator> <name>have</name> <operator>&gt;</operator> <name><name>modePtr</name><operator>-&gt;</operator><name>argmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,
<argument><expr><literal type="string">"Expected no more than %d tokens for %.20s, have %d"</literal></expr></argument>,
<argument><expr><name><name>modePtr</name><operator>-&gt;</operator><name>argmax</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>,
<argument><expr><name>have</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>offset</name> <operator>+</operator> <name>have</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_unknown</name></expr>:</case>
<case>case <expr><name>o_title</name></expr>:</case>
<case>case <expr><name>o_backtitle</name></expr>:</case>
<case>case <expr><name>o_help_line</name></expr>:</case>
<case>case <expr><name>o_help_file</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argv_j</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argv_j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_trim_string</name><argument_list>(<argument><expr><name>argv_j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>argv_j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ignore_leak</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#execute %s\n"</literal><operator>,</operator> <name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>show_result</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>modePtr</name><operator>-&gt;</operator><name>jumper</name></name><operator>)</operator><operator>)</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>title</name></name><operator>,</operator>
<name>argv</name> <operator>+</operator> <name>offset</name><operator>,</operator>
<operator>&amp;</operator><name>offset_add</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#widget returns %d\n"</literal><operator>,</operator> <name>retval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>offset_add</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>!=</operator> <name>my_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>input_result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>DLG_EXIT_ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>esc_pressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>beep_after_signal</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>sleep_secs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>napms</name><argument_list>(<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>sleep_secs</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>lookupOption</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>o_and_widget</name></expr>:</case>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>o_unknown</name></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"Expected --and-widget, not %.20s"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Usage</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>DLG_EXIT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>esc_pressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>dlg_clear_screen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>dlg_clear_screen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dlg_killall_bg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_state</name><operator>.</operator><name>screen_initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_dialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>handle_leaks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_exit</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
