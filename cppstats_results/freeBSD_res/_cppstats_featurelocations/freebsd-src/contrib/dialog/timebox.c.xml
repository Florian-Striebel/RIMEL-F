<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/timebox.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_internals.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_HIGH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_WIDE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTN_HIGH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_HIGH</name></cpp:macro> <cpp:value>(ONE_HIGH + BTN_HIGH + (4 * MARGIN))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_WIDE</name></cpp:macro> <cpp:value>((3 * (ONE_WIDE + 2 * MARGIN)) + 2 + (2 * MARGIN))</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>sHR</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>
,<decl><name>sMN</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>
,<decl><name>sSC</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>STATES</name>;</typedef>

<struct_decl>struct <name>_box</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>_box</name> <block>{
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>BOX</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_or_previous</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DLGK_ITEM_PREV</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ITEM_NEXT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>draw_cell</name><parameter_list>(<parameter><decl><type><name>BOX</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_box</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name>MARGIN</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr></argument>,
<argument><expr><name>menubox_border_attr</name></expr></argument>, <argument><expr><name>menubox_border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>item_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_object</name><parameter_list>(<parameter><decl><type><name>BOX</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name> <operator>%</operator> <name>period</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>dlg_der_window</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_mouse_setbase</name><argument_list>(<argument><expr><call><name>getbegx</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getbegy</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_mouse_mkregion</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>CleanupResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>DIALOG_VARS</name> <modifier>*</modifier></type> <name>save_vars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_mouse_free_regions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_restore_vars</name><argument_list>(<argument><expr><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DrawObject</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>draw_cell(data)</cpp:value></cpp:define>




<function><type><name>int</name></type>
<name>dialog_timebox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtitle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_DELETE_RIGHT</name></expr></argument>,<argument><expr><name>KEY_DC</name></expr></argument> )</argument_list></call></expr>,
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><name>TOGGLEKEY_BINDINGS</name></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_FIRST</name></expr></argument>,<argument><expr><name>KEY_HOME</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_LAST</name></expr></argument>, <argument><expr><name>KEY_END</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_LAST</name></expr></argument>, <argument><expr><name>KEY_LL</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>CHR_NEXT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>KEY_RIGHT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>CHR_BACKSPACE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>CHR_PREVIOUS</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>KEY_BTAB</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>KEY_LEFT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><name>KEY_NEXT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_NEXT</name></expr></argument>, <argument><expr><name>KEY_NPAGE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><name>KEY_PPAGE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><name>KEY_PREVIOUS</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_ITEM_PREV</name></expr></argument>, <argument><expr><name>KEY_UP</name></expr></argument> )</argument_list></call></expr>,
<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_height</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_width</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>BOX</name></type> <name>hr_box</name></decl>, <decl><type ref="prev"/><name>mn_box</name></decl>, <decl><type ref="prev"/><name>sc_box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>fkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name>dlg_default_button</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name> <init>= <expr><call><name>dlg_ok_labels</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_VARS</name></type> <name>save_vars</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#timebox args:\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"minute"</literal></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"second"</literal></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>now_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>*</operator><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_save_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialog_vars</name><operator>.</operator><name>separate_output</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_does_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>retry</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>dlg_strclone</name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_auto_size</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>MIN_HIGH</name></expr></argument>, <argument><expr><name>MIN_WIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_button_layout</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>dlg_new_window</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
<argument><expr><call><name>dlg_box_y_ordinate</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dlg_box_x_ordinate</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hour</name> <operator>&gt;=</operator> <literal type="number">24</literal> <operator>||</operator> <name>minute</name> <operator>&gt;=</operator> <literal type="number">60</literal> <operator>||</operator> <name>second</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CleanupResult</name><argument_list>(<argument><expr><name>DLG_EXIT_ERROR</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"timebox"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"timebox"</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_bottom_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_title</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_helpline</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_autowrap</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hr_box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hr_box</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mn_box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mn_box</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc_box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sc_box</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hr_box</name></expr></argument>,
<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><operator>(</operator><name>width</name> <operator>-</operator> <name>MIN_WIDE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>MARGIN</name></expr></argument>,
<argument><expr><operator>(</operator><name>height</name> <operator>-</operator> <name>MIN_HIGH</name> <operator>+</operator> <name>MARGIN</name><operator>)</operator></expr></argument>,
<argument><expr><name>ONE_WIDE</name></expr></argument>,
<argument><expr><name>ONE_HIGH</name></expr></argument>,
<argument><expr><literal type="number">24</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>hour</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>hour</name></expr> </then><else>: <expr><name><name>current</name><operator>.</operator><name>tm_hour</name></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hr_box</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CleanupResult</name><argument_list>(<argument><expr><name>DLG_EXIT_ERROR</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mvwprintw</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>hr_box</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>hr_box</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>ONE_WIDE</name> <operator>+</operator> <name>MARGIN</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>init_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mn_box</name></expr></argument>,
<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name><name>hr_box</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>ONE_WIDE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>hr_box</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>hr_box</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>hr_box</name><operator>.</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">60</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>minute</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>minute</name></expr> </then><else>: <expr><name><name>current</name><operator>.</operator><name>tm_min</name></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mn_box</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CleanupResult</name><argument_list>(<argument><expr><name>DLG_EXIT_ERROR</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mvwprintw</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>mn_box</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mn_box</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>ONE_WIDE</name> <operator>+</operator> <name>MARGIN</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>init_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc_box</name></expr></argument>,
<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name><name>mn_box</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>ONE_WIDE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>mn_box</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>mn_box</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>mn_box</name><operator>.</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">60</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>second</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>second</name></expr> </then><else>: <expr><name><name>current</name><operator>.</operator><name>tm_sec</name></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc_box</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CleanupResult</name><argument_list>(<argument><expr><name>DLG_EXIT_ERROR</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BOX</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>state</name> <operator>==</operator> <name>sHR</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>hr_box</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>state</name> <operator>==</operator> <name>sMN</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>mn_box</name></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>state</name> <operator>==</operator> <name>sSC</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>sc_box</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>state</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>state</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_set_focus</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_mouse_wgetch</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_result_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_button_key</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key2</name> <operator>=</operator> <call><name>dlg_char_to_button</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>key2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>sHR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>sMN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>sSC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_TOGGLE</name></expr>:</case>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_enter_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_LEAVE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_PREV</name></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_prev_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>dlg_next_ok_buttonindex</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_FIRST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_LAST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>sHR</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>sMN</name></expr>:</case>
<case>case <expr><name>sSC</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_DELETE_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_will_resize</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>old_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>old_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <name><name>hr_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>minute</name> <operator>=</operator> <name><name>mn_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name> <operator>=</operator> <name><name>sc_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dlg_resize_cleanup</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>key</name> <operator>-</operator> <name>M_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DLG_EXIT_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>next_or_previous</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name><name>obj</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>%=</operator> <name><name>obj</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><operator>(</operator><name>key</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>digit</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>period</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DrawObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DefaultFormat</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sprintf(dst, "%02d:%02d:%02d", hr_box.value, mn_box.value, sc_box.value)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRFTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>time_format</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>parts</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parts</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>sc_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parts</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>mn_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parts</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>hr_box</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>dialog_vars</name><operator>.</operator><name>time_format</name></name></expr></argument>,
<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>buffer</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DefaultFormat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>hr_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>DefaultFormat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>hr_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dlg_add_result</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddLastKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CleanupResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
