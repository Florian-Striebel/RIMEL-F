<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/dialog.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIALOG_H_included</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIALOG_H_included</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_config.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__HP_CURSES_COMPAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ERR</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSESW_NCURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncursesw/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_NCURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_CURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/curses.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curses.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNCTRL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unctrl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEY_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__KEY_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MAX</name></cpp:macro> <cpp:value>__KEY_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEY_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__KEY_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MIN</name></cpp:macro> <cpp:value>__KEY_MIN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>color_names</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>color_names</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>buttons</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dgettext(PACKAGE, s)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GCC_PRINTFLIKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCC_PRINTFLIKE</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GCC_NORETURN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCC_NORETURN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GCC_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCC_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WGET_WCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_WIDE_CURSES</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACS_UARROW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACS_DARROW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACS_BLOCK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SHADOW</name></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_COLORS</name></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_COLS</name></cpp:macro> <cpp:value>(COLS ? COLS : dialog_state.screen_width)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_LINES</name></cpp:macro> <cpp:value>(LINES ? LINES : dialog_state.screen_height)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCOLS</name></cpp:macro> <cpp:value>(DLG_COLS - (dialog_state.use_shadow ? SHADOW_COLS : 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLINES</name></cpp:macro> <cpp:value>(DLG_LINES - (dialog_state.use_shadow ? SHADOW_ROWS : 0))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCOLS</name></cpp:macro> <cpp:value>COLS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLINES</name></cpp:macro> <cpp:value>LINES</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_ESC</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_UNKNOWN</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_CANCEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_HELP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_EXTRA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_ITEM_HELP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_EXIT_TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_CTRL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &amp; 0x1f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_LEAVE</name></cpp:macro> <cpp:value>DLG_CTRL('D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_HELP</name></cpp:macro> <cpp:value>DLG_CTRL('E')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_BACKSPACE</name></cpp:macro> <cpp:value>DLG_CTRL('H')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_REPAINT</name></cpp:macro> <cpp:value>DLG_CTRL('L')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_NEXT</name></cpp:macro> <cpp:value>DLG_CTRL('N')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_PREVIOUS</name></cpp:macro> <cpp:value>DLG_CTRL('P')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_KILL</name></cpp:macro> <cpp:value>DLG_CTRL('U')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_TRACE</name></cpp:macro> <cpp:value>DLG_CTRL('T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_LITERAL</name></cpp:macro> <cpp:value>DLG_CTRL('V')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_SPACE</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_DELETE</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB</name></cpp:macro> <cpp:value>DLG_CTRL('I')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARGIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUTTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_ROWS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_COLS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROWS_COL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEN</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>(10L*1024)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SEPARATE_STR</name></cpp:macro> <cpp:value>"\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ASPECT_RATIO</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WTIMEOUT_VAL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WTIMEOUT_OFF</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>A_CHARTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CHARTEXT</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CharOf</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &amp; 0xff)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_ULCORNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_ULCORNER</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_LLCORNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_LLCORNER</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_URCORNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_URCORNER</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_LRCORNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_LRCORNER</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_HLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_HLINE</name></cpp:macro> <cpp:value>'-'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_VLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_VLINE</name></cpp:macro> <cpp:value>'|'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_LTEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_LTEE</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_RTEE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_RTEE</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_UARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_UARROW</name></cpp:macro> <cpp:value>'^'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_DARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_DARROW</name></cpp:macro> <cpp:value>'v'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACS_BLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACS_BLOCK</name></cpp:macro> <cpp:value>'#'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETBEGYX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getbegyx</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getbegyx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y = (win)?(win)-&gt;_begy:ERR, x = (win)?(win)-&gt;_begx:ERR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMAXYX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getmaxyx</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getmaxyx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y = (win)?(win)-&gt;_maxy:ERR, x = (win)?(win)-&gt;_maxx:ERR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPARYX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getparyx</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getparyx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y = (win)?(win)-&gt;_pary:ERR, x = (win)?(win)-&gt;_parx:ERR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WGETPARENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINDOW__PARENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wgetparent</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wgetparent</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((win) ? (win)-&gt;_parent : 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WSYNCUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wsyncup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wsyncup</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCURSYNCUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wcursyncup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wcursyncup</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETBEGX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETBEGY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getbegx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getbegy</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getbegx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getbegx(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getbegy</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getbegy(win)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getbegx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getbegy</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETCURX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETCURY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getcurx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getcury</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getcurx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getcurx(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getcury</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getcury(win)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getcurx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getcury</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMAXX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMAXY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getmaxx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getmaxy</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getmaxx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getmaxx(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getmaxy</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getmaxy(win)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getmaxx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getmaxy</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPARX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPARY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getparx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getpary</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getparx</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getparx(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpary</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_getpary(win)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getparx</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getpary</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WGETPARENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINDOW__PARENT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wgetparent</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wgetparent</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_wgetparent(win)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type> <name>dlg_wgetparent</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DIALOG_OLD_NAMES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>color_table</name></cpp:macro> <cpp:value>dlg_color_table</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attr_clear</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_attr_clear(win,h,w,a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>auto_size</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>xl</name></type></parameter>,<parameter><type><name>mc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_auto_size(t,s,h,w,xl,mc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>auto_sizefile</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>xl</name></type></parameter>,<parameter><type><name>mc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_auto_sizefile(t,f,h,w,xl,mc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>beeping</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_beeping()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>box_x_ordinate</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_box_x_ordinate(w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>box_y_ordinate</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_box_y_ordinate(h)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calc_listh</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>lh</name></type></parameter>,<parameter><type><name>in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_calc_listh(h,lh,in)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calc_listw</name><parameter_list>(<parameter><type><name>in</name></type></parameter>,<parameter><type><name>items</name></type></parameter>,<parameter><type><name>group</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_calc_listw(in,items,group)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>color_setup</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_color_setup()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>create_rc</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_create_rc(f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctl_size</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_ctl_size(h,w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>del_window</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_del_window(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dialog_clear</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_clear()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>draw_bottom_box</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_draw_bottom_box(win)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>draw_box</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>xc</name></type></parameter>,<parameter><type><name>bc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_draw_box(win,y,x,h,w,xc,bc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>draw_shadow</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_draw_shadow(win,h,w,y,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>draw_title</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_draw_title(win,t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exiterr</name></cpp:macro> <cpp:value>dlg_exiterr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>killall_bg</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_killall_bg(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_bigregion</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_bigregion(y,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_free_regions</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_mouse_free_regions()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_mkbigregion</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>ix</name></type></parameter>,<parameter><type><name>iy</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_mkbigregion(y,x,h,w,n,ix,iy,m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_mkregion</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_mkregion(y,x,h,w,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_region</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_region(y,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_setbase</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_setbase(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_setcode</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_setcode(c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_wgetch</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_wgetch(w,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new_window</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_new_window(h,w,y,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parse_rc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_parse_rc()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_autowrap</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_print_autowrap(win,s,h,w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_size</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_print_size(h,w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_backtitle</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>dlg_put_backtitle()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strclone</name><parameter_list>(<parameter><type><name>cprompt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_strclone(cprompt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sub_window</name><parameter_list>(<parameter><type><name>win</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_sub_window(win,h,w,y,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tab_correct_str</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_tab_correct_str(s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIALOG_ATR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_color_table[n].atr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>screen_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shadow_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dialog_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>title_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>border_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_active_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_inactive_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_key_active_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_key_inactive_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_label_active_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>button_label_inactive_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inputbox_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inputbox_border_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>searchbox_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>searchbox_title_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>searchbox_border_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>position_indicator_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>menubox_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>menubox_border_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>item_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>item_selected_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tag_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tag_selected_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tag_key_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tag_key_selected_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_selected_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uarrow_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>darrow_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itemhelp_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>form_active_text_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>form_text_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>form_item_readonly_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gauge_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(33)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>border2_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(34)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inputbox_border2_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(35)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>searchbox_border2_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(36)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>menubox_border2_attr</name></cpp:macro> <cpp:value>DIALOG_ATR(37)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLGK_max</name></cpp:macro> <cpp:value>(KEY_MAX + 256)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PDCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attrset</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattrset((w), (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attron</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattron((w), (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attroff</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattroff((w), (a))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attrset</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattrset((w), (int)(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attron</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattron((w), (int)(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_attroff</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) wattroff((w), (int)(a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct_decl>struct <name>_dlg_callback</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>DIALOG_FREEBACK</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_dlg_callback</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>_dlg_callback</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_dlg_callback</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bg_task</name></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>handle_getc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_dlg_callback</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fkey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_dlg_callback</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>caller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_FREEBACK</name></type> <name>freeback</name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>handle_input</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_dlg_callback</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>input_ready</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_CALLBACK</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_dlg_windows</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_dlg_windows</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>normal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getc_timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_WINDOWS</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DIALOG_CALLBACK</name> <modifier>*</modifier></type><name>getc_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_CALLBACK</name> <modifier>*</modifier></type><name>getc_redirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>all_windows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIALOG_WINDOWS</name> <modifier>*</modifier></type><name>all_subwindows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipe_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>screen_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>screen_initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_colors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_scrollbar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>visit_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>separate_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tab_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>trace_output</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>no_mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>visit_cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>finish_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>plain_buttons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>text_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_width</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>had_resize</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>DIALOG_STATE</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DIALOG_STATE</name></type> <name>dialog_state</name></decl>;</decl_stmt>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>beep_after_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>beep_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>begin_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cant_kill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>colors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cr_wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>defaultno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dlg_clear_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>extra_button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>help_button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>help_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>input_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>insecure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>item_help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keep_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nocancel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nocollapse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>print_siz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>separate_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>single_quoted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>size_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tab_correct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>trim_whitespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backtitle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cancel_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exit_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>no_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ok_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yes_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sleep_secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout_secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>input_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>formitem_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>keep_tite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ascii_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>nook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quoted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>column_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>column_separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_separator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>date_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>time_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_helpfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_nl_expand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>default_button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>last_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>help_tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>week_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iso_week</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pause_secs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>erase_on_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cursor_off_label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_hot_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_VARS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ITEM_HELP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dialog_vars.item_help &amp;&amp; (s) != 0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG__NO_ITEMS</name></cpp:macro> <cpp:value>(dialog_vars.no_items ? 0 : 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG__ITEM_HELP</name></cpp:macro> <cpp:value>(dialog_vars.item_help ? 1 : 0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKBOX_TAGS</name></cpp:macro> <cpp:value>(2 + DLG__ITEM_HELP + DLG__NO_ITEMS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENUBOX_TAGS</name></cpp:macro> <cpp:value>(1 + DLG__ITEM_HELP + DLG__NO_ITEMS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMBOX_TAGS</name></cpp:macro> <cpp:value>(8 + DLG__ITEM_HELP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXEDFORM_TAGS</name></cpp:macro> <cpp:value>(1 + FORMBOX_TAGS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXEDGAUGE_TAGS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREEVIEW_TAGS</name></cpp:macro> <cpp:value>(3 + DLG__ITEM_HELP + DLG__NO_ITEMS)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DIALOG_VARS</name></type> <name>dialog_vars</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_CHTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chtype</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isblank</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isblank</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == TAB)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCH</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)(ch))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_ptr</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((ptr) == 0) dlg_exiterr("cannot allocate memory in " msg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_malloc</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t *) malloc((size_t)(n) * sizeof(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_calloc</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t *) calloc((size_t)(n), sizeof(t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_realloc</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t *) realloc((p), (n) * sizeof(t))</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>chtype</name></type> <name>atr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hilite</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>DIALOG_COLORS</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DIALOG_COLORS</name></type> <name><name>dlg_color_table</name><index>[]</index></name></decl>;</decl_stmt>




<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dialog_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_buildlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_calendar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_checklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_dselect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_editbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_form</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_fselect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_gauge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_helpfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_inputbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_menu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_mixedform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_mixedgauge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_msgbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_pause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_prgbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_progressbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_rangebox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_tailbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_textbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_timebox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_treeview</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dialog_yesno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_LISTITEM</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>name_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_flen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_ilen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>text_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>help_free</name></decl>;</decl_stmt>
}</block></struct></type> <name>DIALOG_FORMITEM</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>DIALOG_INPUTMENU</name>) <parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_checklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_form</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_menu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>DIALOG_INPUTMENU</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_progressbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dlg_string_to_argv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_count_argv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_eat_argv</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_arrows</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_arrows2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_helpline</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_scrollbar</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>long</name></type></decl></parameter> , <parameter><decl><type><name>long</name></type></decl></parameter> , <parameter><decl><type><name>long</name></type></decl></parameter> , <parameter><decl><type><name>long</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_buildlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dlg_exit_label</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dlg_ok_label</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dlg_ok_labels</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dlg_yes_labels</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_button_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_button_to_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_button_x_step</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_char_to_button</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_exit_buttoncode</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_match_char</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_next_button</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_next_ok_buttonindex</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_ok_buttoncode</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_prev_button</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_prev_ok_buttonindex</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_yes_buttoncode</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_button_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_button_sizes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_buttons</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_align_columns</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_free_columns</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_editbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_default_formitem</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_ordinate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_free_formitems</name><parameter_list>(<parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type> <name>dlg_allocate_gauge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type> <name>dlg_reallocate_gauge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_free_gauge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_update_gauge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>dlg_edit_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type> <name>dlg_index_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name> <modifier>*</modifier></type> <name>dlg_index_wchars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_count_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_count_wchars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_edit_offset</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_find_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_limit_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_finish_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_show_string</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_dummy_menutext</name><parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_renamed_menutext</name><parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> <name>dlg_popen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_parse_rc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_create_rc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_treeview</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_ttysize</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getc</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getc_callbacks</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_last_getc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_last_key</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_callback</name><parameter_list>(<parameter><decl><type><name>DIALOG_CALLBACK</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_callback_ref</name><parameter_list>(<parameter><decl><type><name>DIALOG_CALLBACK</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>DIALOG_FREEBACK</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_flush_getc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_remove_callback</name><parameter_list>(<parameter><decl><type><name>DIALOG_CALLBACK</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_killall_bg</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>DIALOG_WINDOWS</name> <modifier>*</modifier></type> <name>_dlg_find_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type> <name>dlg_der_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type> <name>dlg_new_modal_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type> <name>dlg_new_window</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type> <name>dlg_sub_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>dlg_need_separator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_getenv_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_set_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_strclone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_strempty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>chtype</name></type> <name>dlg_asciibox</name><parameter_list>(<parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>chtype</name></type> <name>dlg_boxchar</name><parameter_list>(<parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>chtype</name></type> <name>dlg_get_attrs</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_exitcode2s</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>dlg_print_line</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>chtype</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_box_x_ordinate</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_box_y_ordinate</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_calc_list_width</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_calc_listw</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_check_scrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_count_real_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_default_item</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_default_listitem</name><parameter_list>(<parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_defaultno_button</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_default_button</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_exitname2n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_getenv_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_max_input</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_print_scrolled</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_set_timeout</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_help_formitem</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>DIALOG_FORMITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_help_listitem</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>DIALOG_LISTITEM</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_quoted</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_separator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_add_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_attr_clear</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_auto_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_auto_sizefile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_beeping</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_calc_listh</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_clr_result</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_ctl_size</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_del_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_does_output</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_bottom_box</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_bottom_box2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_box</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_box2</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_title</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_exit</name><argument_list>(<argument><expr><name>int</name></expr></argument> )</argument_list> <name>GCC_NORETURN</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_item_help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_keep_tite</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_print_autowrap</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_print_listitem</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_print_size</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_print_text</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>chtype</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_put_backtitle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_reset_timeout</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_restore_vars</name><parameter_list>(<parameter><decl><type><name>DIALOG_VARS</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_save_vars</name><parameter_list>(<parameter><decl><type><name>DIALOG_VARS</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_set_focus</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_tab_correct_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trim_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>end_dialog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>init_dialog</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_exiterr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>GCC_NORETURN</name> <name>GCC_PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_COLOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>chtype</name></type> <name>dlg_color_pair</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_color_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_color_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_draw_shadow</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRCASECMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_strcmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcasecmp(a,b)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_strcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLG_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE</name><parameter_list>(<parameter><type><name>params</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_trace_msg params</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> GCC_PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator>2</function_decl>)</block_content></block><empty_stmt>;</empty_stmt></extern>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_va_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE2S</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_trace_2s (name,value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE2N</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_trace_2n (name,value)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_2s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_2n</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_win</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace_chr</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_trace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE</name><parameter_list>(<parameter><type><name>params</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE2S</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_TRACE2N</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_trace_va_msg</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ap</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_trace_win</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_trace_chr</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>,<parameter><type><name>fkey</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_trace</name><parameter_list>(<parameter><type><name>fname</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_dlg_resize_cleanup</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_move_window</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_will_resize</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_enter_buttoncode</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dialog_vars.nook ? DLG_EXIT_OK : dlg_ok_buttoncode(code))</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>mseRegion</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>X</name>, <name>Y</name>, <name>code</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <name>step_x</name>, <name>step_y</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mseRegion</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>mseRegion</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_open</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>mousemask(BUTTON1_PRESSED, (mmask_t *) 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_close</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>mousemask(0, (mmask_t *) 0)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>mseRegion</name> <modifier>*</modifier></type> <name>dlg_mouse_mkregion</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_mouse_free_regions</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_mouse_mkbigregion</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_mouse_setbase</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dlg_mouse_setcode</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MOUSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_open</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_close</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_mouse_free_regions</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_mouse_mkregion</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>height</name></type></parameter>, <parameter><type><name>width</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_mouse_mkbigregion</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>height</name></type></parameter>, <parameter><type><name>width</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>step_x</name></type></parameter>, <parameter><type><name>step_y</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_mouse_setbase</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlg_mouse_setcode</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MOUSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>mseRegion</name> <modifier>*</modifier></type><name>dlg_mouse_region</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>mseRegion</name> <modifier>*</modifier></type><name>dlg_mouse_bigregion</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_mouse_wgetch</name> <parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlg_mouse_wgetch_nowait</name> <parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mouse_mkbutton</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>len</name></type></parameter>,<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlg_mouse_mkregion(y,x,1,len,code);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_EVENT</name></cpp:macro> <cpp:value>(DLGK_max + 1)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_CHECK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_RADIO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_dlg_inputstr_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NC_FREE_AND_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_nc_free_and_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curses_exit</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_nc_free_and_exit(code)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
