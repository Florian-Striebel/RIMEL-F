<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/dialog/textbox.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlg_keys.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_LENGTH</name></cpp:macro> <cpp:value>(height - 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_WIDTH</name></cpp:macro> <cpp:value>(width - 2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DIALOG_CALLBACK</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hscroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fd_bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>buffer_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>begin_reached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>buffer_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>end_reached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>page_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>in_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>MY_OBJ</name>;</typedef>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>lseek_obj</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fpos</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot get file position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot seek to end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot set file position to %ld"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fpos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>ftell_obj</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>lseek_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lseek_set</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>actual</name> <init>= <expr><call><name>lseek_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>actual</name> <operator>!=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Cannot set file position to %ld (actual %ld)\n"</literal></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lseek_end</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>actual</name> <init>= <expr><call><name>lseek_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>actual</name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <name>actual</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lseek_cur</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>actual</name> <init>= <expr><call><name>lseek_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>actual</name> <operator>!=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#Lseek returned %ld, expected %ld\n"</literal><operator>,</operator> <name>actual</name><operator>,</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>dlg_malloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_ptr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"xalloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_high</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buftab</name></decl>;</decl_stmt>


<expr_stmt><expr><name>buftab</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><name>size_read</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buftab</name></expr></argument>, <argument><expr><name>size_read</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>begin_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buftab</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>=</operator> <name>begin_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>buftab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>+=</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name>
<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>-</operator> <name>begin_line</name><operator>)</operator>
<operator>%</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>buftab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buffer_first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buffer_first</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buffer_first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buffer_first</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><name>size_read</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ch</name> <operator>=</operator> <name><name>buftab</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>TAB</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmpint</name> <init>= <expr><operator>(</operator><name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name>
<operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>i</name> <operator>-</operator> <name>begin_line</name><operator>)</operator> <operator>%</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>tmpint</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Error reading file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buftab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>find_first</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>recount</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>length</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>recount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>tabize</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>first_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>begin_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buftab</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fpos</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>buftab</name> <operator>=</operator> <call><name>xalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>read</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buftab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Error reading file in tabize()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>first_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>val</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>first_pos</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>count</name> <operator>&gt;=</operator> <name>val</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>first_pos</name> <operator>=</operator> <call><name>find_first</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buftab</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name>
<operator>-</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>-</operator> <name>begin_line</name><operator>)</operator> <operator>%</operator> <name><name>dialog_state</name><operator>.</operator><name>tab_len</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>buftab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buftab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_line</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name> <init>= <expr><call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>file_size</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>line</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>match_string</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><call><name>get_line</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>back_lines</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val_to_tabize</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&lt;</operator> <name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_to_tabize</name> <operator>=</operator> <name>fpos</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lseek_cur</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_to_tabize</name> <operator>=</operator> <name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>=</operator> <call><name>tabize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>val_to_tabize</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>&gt;=</operator> <name><name>obj</name><operator>-&gt;</operator><name>bytes_read</name></name>
<operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Internal error in back_lines()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&gt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&lt;</operator> <name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_to_tabize</name> <operator>=</operator> <name>fpos</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lseek_cur</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_to_tabize</name> <operator>=</operator> <name>BUF_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>=</operator> <call><name>tabize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>val_to_tabize</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>)</operator></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
</block_content>}</block></for>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_line</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wmove</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>get_line</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>dlg_index_columns</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name> <init>= <expr><call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name>dlg_count_wchars</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>limit</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <call><name>getmaxx</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>getmaxx</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hscroll</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;=</operator> <name>limit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>cols</name><index>[<expr><name>first</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>width</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddnstr</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name><name>indx</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>indx</name><index>[<expr><name>last</name></expr>]</index></name> <operator>-</operator> <name><name>indx</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>row</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>width</name> <operator>-</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddch</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_page</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>passed_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>passed_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>passed_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>passed_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_trace_win</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_position</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialog_vars</name><operator>.</operator><name>tab_correct</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>tabize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>find_first</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dlg_draw_scrollbar</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>first</name></expr></argument>,
<argument><expr><name>fpos</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name> <operator>+</operator> <name>size</name></expr></argument>,
<argument><expr><name>fpos</name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name> <operator>+</operator> <name>size</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file_size</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>border_attr</name></expr></argument>,
<argument><expr><name>border_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_search_term</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>INPUTSTR_BINDINGS</name></expr>,
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>old_x</name></decl>, <decl><type ref="prev"/><name>old_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>box_x</name></decl>, <decl><type ref="prev"/><name>box_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>box_height</name></decl>, <decl><type ref="prev"/><name>box_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caption</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Search"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_caption</name> <init>= <expr><call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getbegyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>old_y</name></expr></argument>, <argument><expr><name>old_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box_height</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>box_width</name> <operator>=</operator> <name>len_caption</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>MARGIN</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>box_width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>box_width</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>box_width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>box_width</name></expr></argument>, <argument><expr><call><name>getmaxx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_caption</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>len_caption</name></expr></argument>, <argument><expr><name>box_width</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>MARGIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box_x</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>box_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>box_y</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>box_height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>widget</name> <operator>=</operator> <call><name>dlg_new_modal_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name>box_height</name></expr></argument>, <argument><expr><name>box_width</name></expr></argument>,
<argument><expr><name>old_y</name> <operator>+</operator> <name>box_y</name></expr></argument>, <argument><expr><name>old_x</name> <operator>+</operator> <name>box_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="string">"searchbox"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>box_height</name></expr></argument>, <argument><expr><name>box_width</name></expr></argument>,
<argument><expr><name>searchbox_attr</name></expr></argument>,
<argument><expr><name>searchbox_border_attr</name></expr></argument>,
<argument><expr><name>searchbox_border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>searchbox_title_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>box_width</name> <operator>-</operator> <name>len_caption</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>dlg_index_wchars</name><argument_list>(<argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>dlg_limit_columns</name><argument_list>(<argument><expr><name>caption</name></expr></argument>, <argument><expr><name>len_caption</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>waddnstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>caption</name> <operator>+</operator> <name><name>indx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>indx</name><index>[<expr><name>limit</name></expr>]</index></name> <operator>-</operator> <name><name>indx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box_width</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>dlg_count_columns</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_getc</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DLG_EXIT_CANCEL</name></expr>;</expr_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DLG_EXIT_OK</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DLG_EXIT_ESC</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>napms</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_edit_string</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dlg_show_string</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>searchbox_attr</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>box_width</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>perform_search</name><parameter_list>(<parameter><decl><type><name>MY_OBJ</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>search_term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>key</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr> </then><else>: <expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>tempinx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>search_term</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>get_search_term</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>search_term</name></expr></argument>,
<argument><expr><name>PAGE_LENGTH</name></expr></argument>,
<argument><expr><name>PAGE_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DLG_EXIT_OK</name>
<operator>||</operator> <name><name>search_term</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ungetch</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetch</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>result</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tempinx</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>fd_bytes_read</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>dir</name></expr>
?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>
</then><else>: <expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>found</name> <operator>=</operator> <call><name>match_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>search_term</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>found</name> <operator>=</operator> <call><name>match_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>search_term</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>=</operator> <name>tempinx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>begin_reached</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>end_reached</name></name> <operator>=</operator> <name>temp1</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dlg_attrset</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>moved</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>dialog_textbox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DLG_KEYS_BINDING</name></type> <name><name>binding</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>HELPKEY_BINDINGS</name></expr>,
<expr><name>ENTERKEY_BINDINGS</name></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_DOWN</name></expr></argument>, <argument><expr><literal type="char">'J'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_DOWN</name></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_DOWN</name></expr></argument>, <argument><expr><name>KEY_DOWN</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_LEFT</name></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_LEFT</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_LEFT</name></expr></argument>, <argument><expr><name>KEY_LEFT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_RIGHT</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_RIGHT</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_RIGHT</name></expr></argument>, <argument><expr><name>KEY_RIGHT</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_UP</name></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_UP</name></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_GRID_UP</name></expr></argument>, <argument><expr><name>KEY_UP</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_FIRST</name></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_FIRST</name></expr></argument>, <argument><expr><name>KEY_HOME</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_LAST</name></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_LAST</name></expr></argument>, <argument><expr><name>KEY_END</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_LAST</name></expr></argument>, <argument><expr><name>KEY_LL</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_NEXT</name></expr></argument>, <argument><expr><name>CHR_SPACE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_NEXT</name></expr></argument>, <argument><expr><name>KEY_NPAGE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_PREV</name></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_PREV</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_PAGE_PREV</name></expr></argument>, <argument><expr><name>KEY_PPAGE</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_BEGIN</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_BEGIN</name></expr></argument>, <argument><expr><name>KEY_BEG</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_NEXT</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>DLG_KEYS_DATA</name><argument_list>( <argument><expr><name>DLGK_FIELD_PREV</name></expr></argument>, <argument><expr><name>KEY_BTAB</name></expr></argument> )</argument_list></call></expr>,
<expr><name>END_KEYS_BINDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_height</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_width</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>long</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cur_x</name></decl>, <decl><type ref="prev"/><name>cur_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>fkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>passed_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>search_term</name><index>[<expr><name>MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MY_OBJ</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>moved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>DLG_EXIT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><call><name>dlg_default_button</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_width</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLG_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"#textbox args:\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2S</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLG_TRACE2N</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_term</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>begin_reached</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>buffer_first</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>end_reached</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name> <operator>=</operator> <call><name>dlg_exit_label</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlg_exiterr</name><argument_list>(<argument><expr><literal type="string">"Can't open input file %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>lseek_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_button_layout</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>retry</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_auto_sizefile</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>min_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_print_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_ctl_size</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>dlg_box_x_ordinate</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>dlg_box_y_ordinate</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>dlg_new_window</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"textbox"</literal></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_register_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="string">"textbox"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_mouse_setbase</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>text</name></name> <operator>=</operator> <call><name>dlg_sub_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>PAGE_LENGTH</name></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dlg_mouse_mkbigregion</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_LENGTH</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>KEY_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_bottom_box2</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>border_attr</name></expr></argument>, <argument><expr><name>border2_attr</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_draw_title</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>PAGE_LENGTH</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_attr_clear</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name>PAGE_LENGTH</name></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>, <argument><expr><name>dialog_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>DLG_EXIT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>moved</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>scrollok</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>scroll</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>scrollok</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>PAGE_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>next</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>scrollok</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wscrl</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>scrollok</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>passed_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PAGE_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>get_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>passed_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>end_reached</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>passed_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>passed_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_page</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>PAGE_LENGTH</name></expr></argument>, <argument><expr><name>PAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>print_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wmove</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>cur_y</name></expr></argument>, <argument><expr><name>cur_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dlg_mouse_wgetch</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dlg_result_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>fkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlg_ok_button_key</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fkey</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>dlg_char_to_button</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fkey</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>is_DLGK_MOUSE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_exit_buttoncode</name><argument_list>(<argument><expr><name>key</name> <operator>-</operator> <name>M_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DLG_EXIT_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>dlg_next_button</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_FIELD_PREV</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>dlg_prev_button</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dlg_draw_buttons</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>,
<argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>.</operator><name>buttons</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_ENTER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_enter_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_LEAVE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dlg_ok_buttoncode</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_FIRST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>.</operator><name>begin_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>begin_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&gt;</operator> <name><name>obj</name><operator>.</operator><name>fd_bytes_read</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lseek_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>in_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_LAST</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>end_reached</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fpos</name> <operator>=</operator> <call><name>ftell_obj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&lt;</operator> <name><name>obj</name><operator>.</operator><name>file_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lseek_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>-</operator><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_high</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>in_buf</name></name> <operator>=</operator> <name><name>obj</name><operator>.</operator><name>bytes_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>PAGE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>.</operator><name>begin_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_PREV</name></expr>:</case>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_PPAGE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>.</operator><name>begin_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name> <operator>+</operator> <name>PAGE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>.</operator><name>end_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>begin_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_PAGE_NEXT</name></expr>:</case>
<case>case <expr><call><name>DLGK_MOUSE</name><argument_list>(<argument><expr><name>KEY_NPAGE</name></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>.</operator><name>end_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>begin_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_BEGIN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DLGK_GRID_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name> <operator>&lt;</operator> <name>MAX_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>hscroll</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEY_RESIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>dlg_will_resize</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>old_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>old_width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>back_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>page_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_dlg_resize_cleanup</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <call><name>perform_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>search_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fkey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dlg_add_last_key</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlg_del_window</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dlg_mouse_free_regions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
