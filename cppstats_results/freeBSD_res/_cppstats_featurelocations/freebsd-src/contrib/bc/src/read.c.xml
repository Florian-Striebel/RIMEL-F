<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/read.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;read.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;history.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>






<function><type><specifier>static</specifier> <name>int</name></type> <name>bc_read_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>bc_read_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_READ_BIN_CHAR</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bc_read_buf</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>nllen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>nl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nllen</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>buf_len</name> <operator>&gt;=</operator> <name>nllen</name></expr> ?</condition><then> <expr><name>nllen</name></expr> </then><else>: <expr><operator>*</operator><name>buf_len</name></expr></else></ternary></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>nllen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_len</name> <operator>-=</operator> <name>nllen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>buf_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><operator>*</operator><name>buf_len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BcStatus</name></type> <name>bc_read_chars</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vec</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_NOT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>BC_PROMPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>bc_read_buf</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buf_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BC_STATUS_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>vm</name><operator>.</operator><name>buf_len</name></name></expr></argument>,
<argument><expr><name>BC_VM_STDIN_BUF_SIZE</name> <operator>-</operator> <name><name>vm</name><operator>.</operator><name>buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_UNLIKELY</name><argument_list>(<argument><expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>BC_STATUS_QUIT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>BC_STATUS_SUCCESS</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>bc_program_ready_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>BC_PROMPT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BC_STATUS_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>buf_len</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>buf</name><index>[<expr><name><name>vm</name><operator>.</operator><name>buf_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>bc_read_buf</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>BC_STATUS_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BcStatus</name></type> <name>bc_read_line</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_TTY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>history</name><operator>.</operator><name>badTerm</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_history_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_read_chars</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_read_chars</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>bc_read_binary</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_verr</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_BIN_FILE</name></expr></argument>, <argument><expr><name>bc_program_stdin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>bc_read_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcErr</name></type> <name>e</name> <init>= <expr><name>BC_ERR_FATAL_IO_ERR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>to_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>pstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>bc_read_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_verr</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_FILE_ERR</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>malloc_err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>pstat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>BC_ERR_FATAL_PATH_DIR</name></expr>;</expr_stmt>
<goto>goto <name>malloc_err</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>pstat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>bc_vm_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_read</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<do>do <block>{<block_content>



<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>read_err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>to_read</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>to_read</name></expr>)</condition>;</do>


<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>bc_read_binary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>BC_ERR_FATAL_BIN_FILE</name></expr>;</expr_stmt>
<goto>goto <name>read_err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

<label><name>read_err</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>malloc_err</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_verr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
