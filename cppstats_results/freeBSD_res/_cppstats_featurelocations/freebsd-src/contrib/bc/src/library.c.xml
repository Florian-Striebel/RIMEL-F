<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/library.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;library.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>













<function><type><name>void</name></type> <name>bcl_handleSignal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>||</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bcl_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>refs</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>ctxts</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>out</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>abrt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigjmp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_INIT</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vm_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BclContext</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>out</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>ctxts</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_pushContext</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_popContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>ctxts</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>BclContext</name></type> <name>bcl_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>ctxts</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>BclContext</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>refs</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_rand_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vm</name><operator>.</operator><name>ctxts</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>BclContext</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcl_ctxt_free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ctxts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vm_atexit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcVm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_gc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_freeTemps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bcl_abortOnFatalError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>vm</name><operator>.</operator><name>abrt</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_setAbortOnFatalError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>abrt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>abrt</name></name> <operator>=</operator> <name>abrt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bcl_leadingZeroes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>vm</name><operator>.</operator><name>leading_zeroes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_setLeadingZeroes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>leadingZeroes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>leading_zeroes</name></name> <operator>=</operator> <name>leadingZeroes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclContext</name></type> <name>bcl_ctxt_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>bc_vm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BclCtxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_BCL_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BclNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>ibase</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>obase</name></name><operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>err</name></name> <operator>&amp;&amp;</operator> <name>ctxt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>BC_FUNC_FOOTER_NO_ERR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ctxt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_ctxt_free</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_ctxt_freeNums</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bcl_ctxt_scale</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_ctxt_setScale</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bcl_ctxt_ibase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctxt</name><operator>-&gt;</operator><name>ibase</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_ctxt_setIbase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ibase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ibase</name> <operator>&lt;</operator> <name>BC_NUM_MIN_BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ibase</name> <operator>=</operator> <name>BC_NUM_MIN_BASE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ibase</name> <operator>&gt;</operator> <name>BC_NUM_MAX_IBASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ibase</name> <operator>=</operator> <name>BC_NUM_MAX_IBASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>ibase</name></name> <operator>=</operator> <name>ibase</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bcl_ctxt_obase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>ctxt</name><operator>-&gt;</operator><name>obase</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_ctxt_setObase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>obase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>obase</name></name> <operator>=</operator> <name>obase</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_err</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>BCL_ERROR_NELEMS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>BclError</name><operator>)</operator> <operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name><name>n</name><operator>.</operator><name>i</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>BCL_ERROR_INVALID_NUM</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>BCL_ERROR_NONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>BclNumber</name></type> <name>bcl_num_insert</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>BclNumber</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>idx</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_num_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bcl_num_dtor</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_num_destruct</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>free_nums</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_num_free</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_copy</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>dest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_copy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_dup</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"/><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_createCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_num_destruct</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>BcNum</name><operator>*</operator><operator>)</operator> <name>num</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bcl_num_neg</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>BC_NUM_NEG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_num_setNeg</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>neg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>rdx</name></name> <operator>=</operator> <call><name>BC_NUM_NEG_VAL</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bcl_num_scale</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bc_num_scale</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_num_setScale</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_num_extend</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>scale</name> <operator>-</operator> <name><name>nptr</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_num_truncate</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name><name>nptr</name><operator>-&gt;</operator><name>scale</name></name> <operator>-</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bcl_num_len</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bc_num_len</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_bigdig</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BclBigDig</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>num</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>bc_num_bigdig</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_bigdig2num</name><parameter_list>(<parameter><decl><type><name>BclBigDig</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_createFromBigdig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER_UNLOCK</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>BclNumber</name></type> <name>bcl_binary</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNumBinaryOp</name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BcNumBinaryOpReq</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><call><name>req</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_add</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_add</name></expr></argument>, <argument><expr><name>bc_num_addReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_sub</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_sub</name></expr></argument>, <argument><expr><name>bc_num_addReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_mul</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_mul</name></expr></argument>, <argument><expr><name>bc_num_mulReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_div</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_div</name></expr></argument>, <argument><expr><name>bc_num_divReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_mod</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_mod</name></expr></argument>, <argument><expr><name>bc_num_divReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_pow</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_pow</name></expr></argument>, <argument><expr><name>bc_num_powReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_lshift</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_lshift</name></expr></argument>, <argument><expr><name>bc_num_placesReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_rshift</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bcl_binary</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bc_num_rshift</name></expr></argument>, <argument><expr><name>bc_num_placesReq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_sqrt</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_sqrt</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_divmod</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>cnum</name></decl>, <decl><type ref="prev"/><name>dnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>bc_num_divReq</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cnum</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_UNSETJMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnum</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_divmod</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnum</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>cnum</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnum</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>BCL_ERROR_INVALID_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>bcl_num_insert</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>bcl_num_insert</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_modexp</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>bc_num_divReq</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_modexp</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>i</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>i</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>bcl_cmp</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>bc_num_cmp</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_zero</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_zero</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_one</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_one</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>neg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bc_num_strValid</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>BCL_ERROR_PARSE_INVALID_STR</name></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>BcBigDig</name><operator>)</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>ibase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>n</name><operator>.</operator><name>rdx</name></name> <operator>=</operator> <call><name>BC_NUM_NEG_VAL_NP</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>bcl_string</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ASSERT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>str</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_print</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><operator>(</operator><name>BcBigDig</name><operator>)</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>obase</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>bc_vm_strdup</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>out</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_FUNC_FOOTER_NO_ERR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_irand</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_irand</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bcl_frandHelper</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name></type> <name>exp</name></decl>, <decl><type ref="prev"/><name>pow</name></decl>, <decl><type ref="prev"/><name>ten</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcDig</name></type> <name><name>exp_digs</name><index>[<expr><name>BC_NUM_BIGDIG_LOG10</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcDig</name></type> <name><name>ten_digs</name><index>[<expr><name>BC_NUM_BIGDIG_LOG10</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>exp_digs</name></expr></argument>, <argument><expr><name>BC_NUM_BIGDIG_LOG10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ten</name></expr></argument>, <argument><expr><name>ten_digs</name></expr></argument>, <argument><expr><name>BC_NUM_BIGDIG_LOG10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ten</name><operator>.</operator><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ten</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_bigdig2num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><operator>(</operator><name>BcBigDig</name><operator>)</operator> <name>places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>, <argument><expr><call><name>bc_num_powReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ten</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_pow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ten</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_irand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_shiftRight</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_frand</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_frandHelper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>bcl_ifrandHelper</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BcNum</name></type> <name>ir</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_irand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_frandHelper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>, <argument><expr><name>places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_ifrand</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>aptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctxt</name><operator>-&gt;</operator><name>nums</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_ifrandHelper</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_dtor</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_rand_seedWithNum</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_CHECK_NUM_ERR</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>nums</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>BC_NUM</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>nptr</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_rng</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclError</name></type> <name>bcl_rand_seed</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>seed</name><index>[<expr><name>BCL_SEED_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong</name></type> <name><name>vals</name><index>[<expr><name>BCL_SEED_ULONGS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BCL_SEED_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ulong</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator> <name><name>seed</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name>i</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>|=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bc_rand_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bcl_rand_reseed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_rand_srand</name><argument_list>(<argument><expr><call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BclNumber</name></type> <name>bcl_rand_seed2num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name> <init>= <expr><name>BCL_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_CHECK_CTXT</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_FUNC_HEADER_LOCK</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_createFromRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_FUNC_FOOTER</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_MAYBE_SETUP</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclRandInt</name></type> <name>bcl_rand_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>BclRandInt</name><operator>)</operator> <call><name>bc_rand_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BclRandInt</name></type> <name>bcl_rand_bounded</name><parameter_list>(<parameter><decl><type><name>BclRandInt</name></type> <name>bound</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>BclRandInt</name><operator>)</operator> <call><name>bc_rand_bounded</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>rng</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BcRand</name><operator>)</operator> <name>bound</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
