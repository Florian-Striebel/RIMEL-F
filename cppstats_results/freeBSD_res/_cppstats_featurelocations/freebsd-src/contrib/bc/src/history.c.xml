<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/history.c">















































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;history.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;read.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcFile</name></type> <name>bc_history_debug_fp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bc_history_debug_buf</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>bc_history_wchar</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bc_history_wchars_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>bc_history_wchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>cp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bc_history_wchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;=</operator> <name><name>bc_history_wchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>bc_history_comboChar</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bc_history_combo_chars_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>bc_history_combo_chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>cp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bc_history_combo_chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>cp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_prevCharLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>end</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><operator>--</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><name>end</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>pos</name> <operator>&gt;=</operator> <name>end</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_codePoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>byte</name> <init>= <expr><operator>(</operator><name>uchar</name><operator>)</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0xFFFD</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_nextLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>col_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>beg</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>bc_history_codePoint</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bc_history_comboChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>BC_UNREACHABLE</name></macro>

<if_stmt><if>if <condition>(<expr><name>col_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>col_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col_len</name> <operator>=</operator> <ternary><condition><expr><call><name>bc_history_wchar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bc_history_codePoint</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bc_history_comboChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name> <operator>-</operator> <name>beg</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>pos</name> <operator>-</operator> <name>beg</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_prevLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>end</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>bc_history_prevCharLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_codePoint</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bc_history_comboChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>end</name> <operator>-</operator> <name>pos</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<macro><name>BC_UNREACHABLE</name></macro>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>bc_history_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>bool</name></type> <name>good</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hn</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>ReadConsole</name><argument_list>(<argument><expr><name>hn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>read</name> <operator>!=</operator> <name>n</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>BcStatus</name></type> <name>bc_history_readCode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bc_history_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uchar</name></type> <name>byte</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bc_history_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bc_history_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bc_history_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <call><name>bc_history_codePoint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>BC_STATUS_SUCCESS</name></expr>;</return>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>BC_STATUS_EOF</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_colPos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>pos</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>col_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bc_history_nextLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>col_len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bc_history_isBadTerm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>bc_vm_getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>bc_history_bad_terms</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>bc_history_bad_terms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bc_vm_getenvFree</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_enableRaw</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>BC_TTYIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rawMode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>orig_termios</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>raw</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>orig_termios</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>BRKINT</name> <operator>|</operator> <name>ICRNL</name> <operator>|</operator> <name>INPCK</name> <operator>|</operator> <name>ISTRIP</name> <operator>|</operator> <name>IXON</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <operator>(</operator><name>CS8</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>ECHO</name> <operator>|</operator> <name>ICANON</name> <operator>|</operator> <name>IEXTEN</name> <operator>|</operator> <name>ISIG</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>rawMode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_disableRaw</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>rawMode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>orig_termios</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>rawMode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_cursorPos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BC_HIST_SEQ_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cols</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\x1b[6n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bc_history_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>BC_ACTION_ESC</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SIZE_MAX</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><name>rows</name> <operator>||</operator> <name><name>ptr2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SIZE_MAX</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><name>cols</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SIZE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>cols</name> <operator>&lt;=</operator> <name>UINT16_MAX</name></expr> ?</condition><then> <expr><name>cols</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_columns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>fout</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>


<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bc_history_cursorPos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>start</name> <operator>==</operator> <name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BC_HIST_DEF_COLS</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\x1b[999C"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>bc_history_cursorPos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>cols</name> <operator>==</operator> <name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BC_HIST_DEF_COLS</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b[%zuD"</literal></expr></argument>, <argument><expr><name>cols</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">80</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_history_promptColLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BC_HIST_MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>plen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>prompt</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>bc_history_colPos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_refresh</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>colpos</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>, <decl><type ref="prev"/><name>extras_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pcol</name></name> <operator>+</operator> <call><name>bc_history_colPos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlen</name> <init>= <expr><call><name>bc_history_nextLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>chlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pcol</name></name> <operator>+</operator> <call><name>bc_history_colPos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>bc_history_prevLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extras_len</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>extras_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>extras_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>extras_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>extras_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>BC_PROMPT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>extras_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\x1b[0K"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>extras_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>extras_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>colpos</name> <operator>=</operator> <call><name>bc_history_colPos</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>extras_len</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pcol</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>colpos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><literal type="string">"\r\x1b[%zuC"</literal></expr></argument>, <argument><expr><name>colpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_insert</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>clen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>colpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>clen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colpos</name> <operator>=</operator> <call><name>bc_history_promptColLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>colpos</name> <operator>+=</operator> <call><name>bc_history_colPos</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>colpos</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>amt</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_left</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <call><name>bc_history_prevLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_right</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <call><name>bc_history_nextLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_wordEnd</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_wordStart</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_home</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_end</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_next</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>bc_vm_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>dup</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>bc_vec_replaceAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BC_HIST_PREV</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>SIZE_MAX</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_delete</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>chlen</name> <operator>=</operator> <call><name>bc_history_nextLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>chlen</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>chlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_backspace</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>chlen</name> <operator>=</operator> <call><name>bc_history_prevLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>chlen</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_deletePrevWord</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>old_pos</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_pos</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>old_pos</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name>old_pos</name></expr></argument>,
<argument><expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>old_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_edit_deleteNextWord</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>next_end</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>next_end</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>next_end</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name>next_end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>next_end</name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>next_end</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><name>next_end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>next_end</name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name>next_end</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>next_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>next_end</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_swap</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pcl</name></decl>, <decl><type ref="prev"/><name>ncl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>auxb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><name>pcl</name> <operator>=</operator> <call><name>bc_history_prevLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ncl</name> <operator>=</operator> <call><name>bc_history_nextLen</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>pcl</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <call><name>BC_HIST_BUF_LEN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pcl</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>ncl</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>auxb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>pcl</name></expr></argument>, <argument><expr><name>pcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>pcl</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>ncl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>pcl</name> <operator>+</operator> <name>ncl</name></expr></argument>, <argument><expr><name>auxb</name></expr></argument>, <argument><expr><name>pcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>pcl</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>ncl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_raise</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>bc_history_disableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_escape</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name><name>seq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_HIST_READ</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_wordEnd</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_wordStart</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_deleteNextWord</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_HIST_READ</name><argument_list>(<argument><expr><name>seq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_HIST_READ</name><argument_list>(<argument><expr><name>seq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_delete</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_HIST_READ</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'5'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_wordEnd</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_wordStart</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>


<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_right</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_left</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_home</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_deleteNextWord</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_right</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_left</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_home</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_add</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_add_empty</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>history</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_reset</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>oldcolpos</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>bc_history_columns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_history_add_empty</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_history_printCtrl</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">"^A"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>newline</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <name>BC_ACTION_CTRL_A</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_npop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>BC_ACTION_CTRL_C</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>BC_ACTION_CTRL_D</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>BcStatus</name></type> <name>bc_history_edit</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_reset</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>BC_PROMPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <name>prompt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pcol</name></name> <operator>=</operator> <call><name>bc_history_promptColLen</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_history_readCode</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BC_ACTION_LINE_FEED</name></expr>:</case>
<case>case <expr><name>BC_ACTION_ENTER</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>bc_vec_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_TAB</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>bc_history_tab</name></expr></argument>, <argument><expr><name>bc_history_tab_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_edit_insert</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>bc_history_tab_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>BC_ACTION_CTRL_C</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_printCtrl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BC_SIGINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>BC_STATUS_QUIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>sigmsg</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>siglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>bc_program_ready_msg</name></expr></argument>,
<argument><expr><name>bc_program_ready_msg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_reset</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>BC_ACTION_BACKSPACE</name></expr>:</case>
<case>case <expr><name>BC_ACTION_CTRL_H</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_backspace</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>BC_ACTION_CTRL_D</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_printCtrl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<return>return <expr><name>BC_STATUS_EOF</name></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<case>case <expr><name>BC_ACTION_CTRL_T</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_swap</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_CTRL_B</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_left</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_CTRL_F</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_right</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_CTRL_P</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_CTRL_N</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BC_HIST_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_ACTION_ESC</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_escape</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_U</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_K</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_npop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_A</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_home</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_E</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_L</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_history_refresh</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>BC_ACTION_CTRL_W</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_edit_deletePrevWord</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <name>BC_ACTION_CTRL_A</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>BC_ACTION_CTRL_Z</name><operator>)</operator> <operator>||</operator>
<name>c</name> <operator>==</operator> <name>BC_ACTION_CTRL_BSLASH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_history_printCtrl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>BC_ACTION_CTRL_Z</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_raise</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>BC_ACTION_CTRL_S</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_raise</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>BC_ACTION_CTRL_BSLASH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_history_raise</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>BC_STATUS_QUIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_edit_insert</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<return>return <expr><name>BC_STATUS_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bc_history_stdinHasData</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<return>return <expr><call><name>pselect</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>rdset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sigmask</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>BcStatus</name></type> <name>bc_history_line</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>fout</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_enableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_history_edit</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>bc_vm_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_history_add</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_add_empty</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_concat</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_concat</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>bc_history_stdinHasData</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>s</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>BC_STATUS_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_disableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_history_string_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>str</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_history_init</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>rawMode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>badTerm</name></name> <operator>=</operator> <call><name>bc_history_isBadTerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>orig_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>orig_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>badTerm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetConsoleCP</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleOutputCP</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>orig_in</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>orig_out</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>badTerm</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>reqOut</name> <init>= <expr><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name> <operator>|</operator>
<name>DISABLE_NEWLINE_AUTO_RETURN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>reqIn</name> <init>= <expr><name>ENABLE_VIRTUAL_TERMINAL_INPUT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>orig_in</name></name> <operator>|</operator> <name>reqIn</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>orig_out</name></name> <operator>|</operator> <name>reqOut</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>badTerm</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_HISTORY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>rdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>rdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sigmask</name></name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_history_free</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bc_history_disableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>orig_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>orig_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>






<function><type><name>void</name></type> <name>bc_history_printKeyCodes</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>quit</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_vm_printf</name><argument_list>(<argument><expr><literal type="string">"Linenoise key codes debugging mode.\n"</literal>
<literal type="string">"Press keys to see scan codes. "</literal>
<literal type="string">"Type 'quit' at any time to exit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_history_enableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>quit</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>bc_history_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>quit</name></expr></argument>, <argument><expr><name>quit</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>quit</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>quit</name></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_vm_printf</name><argument_list>(<argument><expr><literal type="string">"'%c' %lu (type quit to exit)\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>bc_history_disableRaw</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
