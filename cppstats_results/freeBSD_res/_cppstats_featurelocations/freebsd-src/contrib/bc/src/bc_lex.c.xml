<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/bc_lex.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_lex_identifier</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bc_lex_kws_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BcLexKeyword</name> <modifier>*</modifier></type><name>kw</name> <init>= <expr><name>bc_lex_kws</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>BC_LEX_KW_LEN</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>no_redefine</name></name> <operator>&amp;&amp;</operator> <name><name>vm</name><operator>.</operator><name>redefined_kws</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_KW_AUTO</name> <operator>+</operator> <operator>(</operator><name>BcLexType</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BC_LEX_KW_POSIX</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_KW</name></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bc_lex_name</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_NAME_LEN</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>str</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_lex_string</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>nlines</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>got_more</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_STR</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>is_stdin</name></name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>nlines</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>is_stdin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_more</name> <operator>=</operator> <call><name>bc_lex_readLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>got_more</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <name>nlines</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_lex_assign</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>BcLexType</name></type> <name>with</name></decl></parameter>, <parameter><decl><type><name>BcLexType</name></type> <name>without</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>with</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>without</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_token</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_commonTokens</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_NE</name></expr></argument>, <argument><expr><name>BC_LEX_OP_BOOL_NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_OP_BOOL_NOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_BOOL</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_lineComment</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_MODULUS</name></expr></argument>, <argument><expr><name>BC_LEX_OP_MODULUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name>c2</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_BOOL</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_BOOL_AND</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_TRUNC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_PLACES</name></expr></argument>, <argument><expr><name>BC_LEX_OP_PLACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><name>BcLexType</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'('</literal> <operator>+</operator> <name>BC_LEX_LPAREN</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_MULTIPLY</name></expr></argument>, <argument><expr><name>BC_LEX_OP_MULTIPLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_INC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_PLUS</name></expr></argument>, <argument><expr><name>BC_LEX_OP_PLUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">','</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_COMMA</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_DEC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_MINUS</name></expr></argument>, <argument><expr><name>BC_LEX_OP_MINUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_KW_LAST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator><literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_comment</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_DIVIDE</name></expr></argument>, <argument><expr><name>BC_LEX_OP_DIVIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>




<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">';'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_SCOLON</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_LSHIFT</name></expr></argument>, <argument><expr><name>BC_LEX_OP_LSHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_LE</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_EQ</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_RSHIFT</name></expr></argument>, <argument><expr><name>BC_LEX_OP_RSHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_GE</name></expr></argument>, <argument><expr><name>BC_LEX_OP_REL_GT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><name>BcLexType</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'['</literal> <operator>+</operator> <name>BC_LEX_LBRACKET</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_WHITESPACE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_assign</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_LEX_OP_ASSIGN_POWER</name></expr></argument>, <argument><expr><name>BC_LEX_OP_POWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_identifier</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <operator>(</operator><name>BcLexType</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'{'</literal> <operator>+</operator> <name>BC_LEX_LBRACE</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name>c2</name> <operator>==</operator> <literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_BOOL</name></expr></argument>, <argument><expr><literal type="string">"||"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_BOOL_OR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
