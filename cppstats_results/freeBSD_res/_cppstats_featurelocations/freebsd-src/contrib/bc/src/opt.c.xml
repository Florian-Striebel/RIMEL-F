<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/opt.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bc_opt_longoptsEnd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcOptLong</name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_opt_longopt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcOptLong</name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>bc_opt_longoptsEnd</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<macro><name>BC_UNREACHABLE</name></macro>

<return>return <expr><literal type="string">"NULL"</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_opt_error</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_short</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>BC_ERR_FATAL_OPTION</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_short</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>short_str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>short_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>short_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>short_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>bc_opt_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcOptLong</name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>bc_opt_longoptsEnd</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>!=</operator> <name>c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>bc_opt_longoptsEnd</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>bc_opt_parseShort</name><parameter_list>(<parameter><decl><type><name>BcOpt</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcOptLong</name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>option</name> <operator>+=</operator> <name><name>o</name><operator>-&gt;</operator><name>subopt</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name> <operator>=</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>bc_opt_type</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><name>BC_OPT_BC_ONLY</name></expr>:</case>
<case>case <expr><name>BC_OPT_DC_ONLY</name></expr>:</case>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>BC_OPT_BC_ONLY</name> <operator>&amp;&amp;</operator> <name>BC_IS_DC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>BC_OPT_DC_ONLY</name> <operator>&amp;&amp;</operator> <name>BC_IS_BC</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>BC_FALLTHROUGH</name></macro>

<case>case <expr><name>BC_OPT_NONE</name></expr>:</case>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>option</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>subopt</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>subopt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_OPT_REQUIRED_BC_ONLY</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>BC_IS_DC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>bc_opt_longopt</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<macro><name>BC_FALLTHROUGH</name></macro>

<case>case <expr><name>BC_OPT_REQUIRED</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>subopt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>option</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>option</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION_NO_ARG</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>bc_opt_longopt</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>bc_opt_longoptsMatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>option</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>a</name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr><operator>,</operator> <expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>a</name> <operator>!=</operator> <operator>*</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><operator>(</operator><operator>*</operator><name>n</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>a</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>a</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_opt_longoptsArg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>


<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>option</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>option</name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><operator>++</operator><name>option</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>option</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>option</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bc_opt_parse</name><parameter_list>(<parameter><decl><type><name>BcOpt</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcOptLong</name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>empty</name></decl>;</decl_stmt>


<do>do <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <name>empty</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>empty</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><call><name>BC_OPT_ISDASHDASH</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>BC_OPT_ISSHORTOPT</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>bc_opt_parseShort</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>longopts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>BC_OPT_ISLONGOPT</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>option</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>bc_opt_longoptsEnd</name><argument_list>(<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>bc_opt_longoptsMatch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name> <operator>=</operator> <name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>bc_opt_longoptsArg</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_BC_ONLY</name> <operator>&amp;&amp;</operator> <name>BC_IS_DC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_REQUIRED_BC_ONLY</name> <operator>&amp;&amp;</operator> <name>BC_IS_DC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_DC_ONLY</name> <operator>&amp;&amp;</operator> <name>BC_IS_BC</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_NONE</name> <operator>&amp;&amp;</operator> <name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION_ARG</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_REQUIRED</name> <operator>||</operator>
<name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BC_OPT_REQUIRED_BC_ONLY</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION_NO_ARG</name></expr></argument>,
<argument><expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>o</name><operator>-&gt;</operator><name>optopt</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bc_opt_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>BC_UNREACHABLE</name></macro>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_opt_init</name><parameter_list>(<parameter><decl><type><name>BcOpt</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optind</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>subopt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>optarg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
