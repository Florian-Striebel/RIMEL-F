<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/vector.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lang.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>bc_vec_grow</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cap</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>cap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cap</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<while>while <condition>(<expr><name>cap</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cap</name> <operator>+=</operator> <name>cap</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>bc_vm_realloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><call><name>bc_vm_arraySize</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>esize</name></decl></parameter>, <parameter><decl><type><name>BcDtorType</name></type> <name>dtor</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>bc_vm_malloc</name><argument_list>(<argument><expr><call><name>bc_vm_arraySize</name><argument_list>(<argument><expr><name>BC_VEC_START_CAP</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>BcSize</name><operator>)</operator> <name>esize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>BC_VEC_START_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <operator>(</operator><name>BcSize</name><operator>)</operator> <name>dtor</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_expand</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>&lt;</operator> <name>req</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>bc_vm_realloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><call><name>bc_vm_arraySize</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_npop</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BcVecFree</name></type> <name>d</name> <init>= <expr><name><name>bc_vec_dtors</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>esize</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>n</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <operator>(</operator><name>esize</name> <operator>*</operator> <operator>--</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_npopAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <name>n</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BcVecFree</name></type> <name>d</name> <init>= <expr><name><name>bc_vec_dtors</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_npush</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>esize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>esize</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <operator>(</operator><name>esize</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>esize</name> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>bc_vec_push</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>bc_vec_pushEmpty</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>bc_vec_pushByte</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_pushIndex</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>amt</name></decl>, <decl><type ref="prev"/><name><name>nums</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>amt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>amt</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nums</name><index>[<expr><name>amt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uchar</name><operator>)</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <operator>~</operator><operator>(</operator><name>UCHAR_MAX</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>amt</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>amt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_pushAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>esize</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_grow</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>esize</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <name>esize</name> <operator>*</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>esize</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>esize</name> <operator>*</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_string</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>v</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_expand</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>bc_vm_growSize</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_concat</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>v</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_vec_npush</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_empty</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_vec_replaceAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bc_vec_dtors</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <name>void</name><modifier>*</modifier></type> <name>bc_vec_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name><modifier>*</modifier></type> <name>bc_vec_item_rev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>bc_vec_clear</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>BC_DTOR_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vec_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>BcVec</name><operator>*</operator><operator>)</operator> <name>vec</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>










<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_map_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BcId</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>mid</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>low</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bc_map_insert</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BcId</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>slabs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <call><name>bc_map_find</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>i</name> <operator>!=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>BcId</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<expr_stmt><expr><name>slabs</name> <operator>=</operator> <ternary><condition><expr><name>BC_IS_DC</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_slabs</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>other_slabs</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>slabs</name> <operator>=</operator> <operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_slabs</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>id</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>bc_slabvec_strdup</name><argument_list>(<argument><expr><name>slabs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_pushAt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bc_map_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>bc_map_find</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BC_VEC_INVALID_IDX</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>BcId</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>BC_VEC_INVALID_IDX</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_map_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BcId</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><operator>(</operator><name>BcId</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<macro><name>BC_UNREACHABLE</name></macro>

<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_slab_init</name><parameter_list>(<parameter><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>bc_vm_malloc</name><argument_list>(<argument><expr><name>BC_SLAB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_slab_add</name><parameter_list>(<parameter><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>BC_SLAB_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_strcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_slab_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BcSlab</name><operator>*</operator><operator>)</operator> <name>slab</name><operator>)</operator><operator>-&gt;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_slabvec_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>slab</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcSlab</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_SLAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>slab</name> <operator>=</operator> <call><name>bc_vec_pushEmpty</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slab_init</name><argument_list>(<argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>bc_slabvec_strdup</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcSlab</name></type> <name>slab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>slab_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_UNLIKELY</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <name>BC_SLAB_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>slab</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>SIZE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slab</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>bc_vm_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_pushAt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>slab</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>slab_ptr</name> <operator>=</operator> <call><name>bc_vec_top</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_slab_add</name><argument_list>(<argument><expr><name>slab_ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_UNLIKELY</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>slab_ptr</name> <operator>=</operator> <call><name>bc_vec_pushEmpty</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slab_init</name><argument_list>(<argument><expr><name>slab_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_slab_add</name><argument_list>(<argument><expr><name>slab_ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_slabvec_clear</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>again</name></decl>;</decl_stmt>



<do>do <block>{<block_content>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>SIZE_MAX</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>again</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>SIZE_MAX</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>again</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_npopAt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>again</name></expr>)</condition>;</do>



<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_npop</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>

<function><type><name>void</name></type> <name>bc_slabvec_print</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcSlab</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><literal type="string">"%zu { s = %zu, len = %zu }\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
