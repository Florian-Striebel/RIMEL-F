<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/file.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_file_ultoa</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BC_FILE_ULL_LENGTH</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>BC_FILE_ULL_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BC_FILE_ULL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>val</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><name>val</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name>mod</name><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>BcStatus</name></type> <name>bc_file_output</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>bytes</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>written</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>errno</name> <operator>==</operator> <name>EPIPE</name></expr> ?</condition><then> <expr><name>BC_STATUS_EOF</name></expr> </then><else>: <expr><name>BC_STATUS_ERROR_FATAL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>BC_STATUS_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BcStatus</name></type> <name>bc_file_flushErr</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>BC_TTY</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>BC_FLUSH_SAVE_EXTRAS_CLEAR</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>BC_FLUSH_SAVE_EXTRAS_NO_CLEAR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>history</name><operator>.</operator><name>extras</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>BC_FLUSH_NO_EXTRAS_CLEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>history</name><operator>.</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_file_output</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>BC_STATUS_SUCCESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_flush</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_file_flushErr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>BC_STATUS_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_write</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_UNLIKELY</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_output</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_printf</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_vprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_vprintf</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BC_FILE_ULL_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>







<while>while <condition>(<expr><operator>(</operator><name>percent</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>!=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>percent</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>percent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>uc</name> <init>= <expr><operator>(</operator><name>uchar</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_ultoa</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>d</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>percent</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ull</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ull</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ull</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_ultoa</name><argument_list>(<argument><expr><name>ull</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>percent</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_puts</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_write</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_putchar</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_init</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_file_free</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
