<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/lang.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lang.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>bc_const_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>constant</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcConst</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>constant</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_func_insert</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>BcType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BcAuto</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>bc_program_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name> <operator>==</operator> <name>BC_TYPE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>autos</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><name>BcAuto</name> <modifier>*</modifier></type><name>aptr</name> <init>= <expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>autos</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>idx</name> <operator>==</operator> <name><name>aptr</name><operator>-&gt;</operator><name>idx</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name><name>aptr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>BC_TYPE_ARRAY</name></expr> ?</condition><then> <expr><literal type="string">"[]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_error</name><argument_list>(<argument><expr><name>BC_ERR_PARSE_DUP_LOCAL</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>a</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>autos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_func_init</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>consts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcConst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_CONST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>strs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>autos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcAuto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>voidfn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_func_reset</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>autos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>voidfn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_func_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>BcFunc</name><operator>*</operator><operator>)</operator> <name>func</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>autos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_array_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>nums</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcVec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_VEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>bc_array_expand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_array_copy</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>s</name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>dtor</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>dtor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_expand</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>dnum</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>snum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dnum</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>snum</name> <operator>=</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_PROG_STR</name><argument_list>(<argument><expr><name>snum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dnum</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_num_createCopy</name><argument_list>(<argument><expr><name>dnum</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_array_expand</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_expand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>dtor</name></name> <operator>==</operator> <name>BC_DTOR_NUM</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>bc_vec_pushEmpty</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bc_num_init</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>BC_NUM_DEF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BcVec</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>dtor</name></name> <operator>==</operator> <name>BC_DTOR_VEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>bc_vec_pushEmpty</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bc_array_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_result_clear</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_RESULT_TEMP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_result_copy</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>t</name></name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BC_RESULT_TEMP</name></expr>:</case>
<case>case <expr><name>BC_RESULT_IBASE</name></expr>:</case>
<case>case <expr><name>BC_RESULT_SCALE</name></expr>:</case>
<case>case <expr><name>BC_RESULT_OBASE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<case>case <expr><name>BC_RESULT_SEED</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_num_createCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_RESULT_VAR</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ARRAY</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ARRAY_ELEM</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>loc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>loc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcLoc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_RESULT_STR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_RESULT_ZERO</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ONE</name></expr>:</case>
<block>{<block_content>

<break>break;</break>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<case>case <expr><name>BC_RESULT_VOID</name></expr>:</case>
<case>case <expr><name>BC_RESULT_LAST</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_result_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>BcResult</name><operator>*</operator><operator>)</operator> <name>result</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BC_RESULT_TEMP</name></expr>:</case>
<case>case <expr><name>BC_RESULT_IBASE</name></expr>:</case>
<case>case <expr><name>BC_RESULT_SCALE</name></expr>:</case>
<case>case <expr><name>BC_RESULT_OBASE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<case>case <expr><name>BC_RESULT_SEED</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_num_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_RESULT_VAR</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ARRAY</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ARRAY_ELEM</name></expr>:</case>
<case>case <expr><name>BC_RESULT_STR</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ZERO</name></expr>:</case>
<case>case <expr><name>BC_RESULT_ONE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<case>case <expr><name>BC_RESULT_VOID</name></expr>:</case>
<case>case <expr><name>BC_RESULT_LAST</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
