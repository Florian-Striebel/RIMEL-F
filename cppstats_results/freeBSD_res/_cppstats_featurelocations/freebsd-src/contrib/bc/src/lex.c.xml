<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/lex.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bc.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>bc_lex_invalidChar</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_CHAR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_lineComment</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_WHITESPACE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_comment</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>end</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_WHITESPACE</name></expr>;</expr_stmt>




<do>do <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>is_stdin</name></name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>;</init> <condition><expr><operator>!</operator><name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <operator>!</operator><name>end</name></expr></incr>)</control> <block>{<block_content>


<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>nlines</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><name>c</name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>is_stdin</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>got_more</name> <operator>=</operator> <call><name>bc_lex_readLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>got_more</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>end</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <name>nlines</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_whitespace</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_WHITESPACE</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><operator>++</operator><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_commonTokens</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_EOF</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_NLINE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_whitespace</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_lex_num</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>int_only</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>last_pt</name></decl>, <decl><type ref="prev"/><name>pt</name> <init>= <expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>int_only</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<while>while<condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>int_only</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>last_pt</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>&amp;&amp;</operator> <name>last_pt</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>pt</name> <operator>||</operator> <name>last_pt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_number</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_NUMBER</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <call><name>bc_lex_num</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_POSIX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_POSIX_EXP_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>BC_LEX_NEG_CHAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_CHAR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <call><name>bc_lex_num</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_name</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_NAME</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name>bc_vec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_init</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_free</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_file</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_next</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>t</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>BC_LEX_EOF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_EOF</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>



<do>do <block>{<block_content>
<expr_stmt><expr><call><name><name>vm</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_WHITESPACE</name></expr>)</condition>;</do>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_lex_fixText</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bc_lex_readLine</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>good</name></decl>;</decl_stmt>



<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>bc_vm_readLine</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_lex_fixText</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>good</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_lex_text</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_stdin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>text</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_lex_fixText</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>BC_LEX_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>is_stdin</name></name> <operator>=</operator> <name>is_stdin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
