<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/rand.c">








































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcrypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_RAND_BUILTIN</name></expr></cpp:if>







<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_addition</name><parameter_list>(<parameter><decl><type><name>uint_fast64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint_fast64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRandState</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>(</operator><name><name>res</name><operator>.</operator><name>lo</name></name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_addition2</name><parameter_list>(<parameter><decl><type><name>BcRandState</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcRandState</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRandState</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bc_rand_addition</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>bc_rand_addition</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>hi</name></name> <operator>+=</operator> <name><name>temp</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_multiply</name><parameter_list>(<parameter><decl><type><name>uint_fast64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint_fast64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint_fast64_t</name></type> <name>al</name></decl>, <decl><type ref="prev"/><name>ah</name></decl>, <decl><type ref="prev"/><name>bl</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcRandState</name></type> <name>carry</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>BC_RAND_TRUNC32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ah</name> <operator>=</operator> <call><name>BC_RAND_CHOP32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bl</name> <operator>=</operator> <call><name>BC_RAND_TRUNC32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bh</name> <operator>=</operator> <call><name>BC_RAND_CHOP32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>al</name> <operator>*</operator> <name>bl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>al</name> <operator>*</operator> <name>bh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>ah</name> <operator>*</operator> <name>bl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>ah</name> <operator>*</operator> <name>bh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <call><name>bc_rand_addition</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bc_rand_addition</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><operator>(</operator><call><name>BC_RAND_TRUNC32</name><argument_list>(<argument><expr><name><name>carry</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>hi</name></name> <operator>+=</operator> <call><name>BC_RAND_CHOP32</name><argument_list>(<argument><expr><name><name>carry</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c3</name> <operator>+</operator> <operator>(</operator><name><name>carry</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_multiply2</name><parameter_list>(<parameter><decl><type><name>BcRandState</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcRandState</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRandState</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>bc_rand_multiply</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>bc_rand_multiply</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>bc_rand_multiply</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <call><name>bc_rand_addition2</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>carry</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>carry</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>carry</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>bc_rand_addition2</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>carry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_setModified</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name></name> <operator>|=</operator> <operator>(</operator><name>BcRandState</name><operator>)</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>lo</name></name> <operator>|=</operator> <operator>(</operator><name>uint_fast64_t</name><operator>)</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_clearModified</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>BcRandState</name><operator>)</operator> <literal type="number">1UL</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>lo</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1UL</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_copy</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>unmod</name> <init>= <expr><call><name>BC_RAND_NOTMODIFIED</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcRNGData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unmod</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_setModified</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>BC_RAND_NOTMODIFIED</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_clearModified</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><specifier>static</specifier> <name>ulong</name></type> <name>bc_rand_frand</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ulong</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>nread</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_IO_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ulong</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<function><type><specifier>static</specifier> <name>ulong</name></type> <name>bc_rand_winrand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ulong</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NTSTATUS</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>BCryptGenRandom</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>BCRYPT_USE_SYSTEM_PREFERRED_RNG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><call><name>BCRYPT_SUCCESS</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>ulong</name></type> <name>bc_rand_rand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ulong</name><operator>)</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>BC_RAND_SRAND_BITS</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_inc</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRandState</name></type> <name>inc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>inc</name></name> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>inc</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>lo</name></name> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inc</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>inc</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_setupInc</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>hi</name></name> <operator>|=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BC_LONG_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>BC_LONG_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>inc</name><operator>.</operator><name>lo</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_seedState</name><parameter_list>(<parameter><decl><type><name>BcRandState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>val1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>val2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BcRandState</name><operator>)</operator> <name>val1</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>BcRandState</name><operator>)</operator> <name>val2</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>BC_LONG_BIT</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <name>val1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_seedRNG</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state2</name></decl></parameter>,
<parameter><decl><type><name>ulong</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>inc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_rand_seedState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_seedState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>inc</name></name></expr></argument>, <argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>inc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_setupInc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_fill</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRandUlong</name></type> <name>fulong</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ulong</name></type> <name>state1</name></decl>, <decl><type ref="prev"/><name>state2</name></decl>, <decl><type ref="prev"/><name>inc1</name></decl>, <decl><type ref="prev"/><name>inc2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>fulong</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state2</name> <operator>=</operator> <call><name>fulong</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inc1</name> <operator>=</operator> <call><name>fulong</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inc2</name> <operator>=</operator> <call><name>fulong</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_rand_seedRNG</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state2</name></expr></argument>, <argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>inc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_step</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BcRandState</name></type> <name>temp</name> <init>= <expr><call><name>bc_rand_mul2</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>bc_rand_multiplier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>bc_rand_add2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><call><name>bc_rand_inc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>BcRand</name></type> <name>bc_rand_output</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>BC_RAND_ROT</name><argument_list>(<argument><expr><call><name>BC_RAND_FOLD</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BC_RAND_ROTAMT</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_seedZeroes</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng2</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>rng2</name> <operator>=</operator> <call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_RAND_ZERO</name><argument_list>(<argument><expr><name>rng2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_rand_copy</name><argument_list>(<argument><expr><call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_srand</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_rand_fill</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>bc_rand_frand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/random"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_rand_fill</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>bc_rand_frand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>bc_rand_fill</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>bc_rand_winrand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_RAND_ZERO</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_fill</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>bc_rand_rand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_rand_propagate</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_RAND_NOTMODIFIED</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>go</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>go</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng2</name> <init>= <expr><call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>BC_RAND_NOTMODIFIED</name><argument_list>(<argument><expr><name>rng2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_rand_copy</name><argument_list>(<argument><expr><name>rng2</name></expr></argument>, <argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bc_rand_seedZeroes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rng</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_seedZeroes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BcRand</name></type> <name>bc_rand_int</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcRand</name></type> <name>res</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_RAND_ZERO</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_srand</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_rand_step</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_propagate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bc_rand_output</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BcRand</name></type> <name>bc_rand_bounded</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRand</name></type> <name>bound</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>BcRand</name></type> <name>rand</name></decl>, <decl><type ref="prev"/><name>threshold</name> <init>= <expr><operator>(</operator><literal type="number">0</literal> <operator>-</operator> <name>bound</name><operator>)</operator> <operator>%</operator> <name>bound</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>rand</name> <operator>=</operator> <call><name>bc_rand_int</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>rand</name> <operator>&lt;</operator> <name>threshold</name></expr>)</condition>;</do>

<return>return <expr><name>rand</name> <operator>%</operator> <name>bound</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_seed</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state2</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>inc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_rand_seedState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rng</name><operator>-&gt;</operator><name>inc</name></name></expr></argument>, <argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>inc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_setupInc</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_setModified</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>state2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rng</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rng</name><operator>-&gt;</operator><name>inc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcRandState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_step</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_seedState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rng</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>bc_rand_propagate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>BcRandState</name></type> <name>bc_rand_getInc</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRandState</name></type> <name>res</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>inc</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>inc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>lo</name></name> <operator>|=</operator> <operator>(</operator><name><name>res</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>BC_LONG_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_getRands</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>i1</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>i2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BcRandState</name></type> <name>inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_RAND_ZERO</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_srand</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>inc</name> <operator>=</operator> <call><name>bc_rand_getInc</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>s1</name> <operator>=</operator> <call><name>BC_RAND_TRUNC</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s2</name> <operator>=</operator> <call><name>BC_RAND_CHOP</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>i1</name> <operator>=</operator> <call><name>BC_RAND_TRUNC</name><argument_list>(<argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>i2</name> <operator>=</operator> <call><name>BC_RAND_CHOP</name><argument_list>(<argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_push</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name> <init>= <expr><call><name>bc_vec_pushEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcRNGData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_rand_copy</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_pop</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_npop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>reset</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_rand_init</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BcRNGData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_rand_push</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_USE_FREE</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_rand_free</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
