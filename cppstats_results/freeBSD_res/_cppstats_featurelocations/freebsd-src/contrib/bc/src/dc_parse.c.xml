<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/dc_parse.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_parse_register</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>!=</operator> <name>BC_LEX_NAME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bc_parse_pushName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>str</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dc_parse_string</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_addString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_parse_mem</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dc_parse_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name> <operator>!=</operator> <name>BC_INST_ARRAY_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_SWAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_ASSIGN_NO_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_parse_cond</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_EXEC_COND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dc_parse_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_KW_ELSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dc_parse_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_pushIndex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_parse_token</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>BcLexType</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>inst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>assign</name></decl>, <decl><type ref="prev"/><name>get_token</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BC_LEX_OP_REL_EQ</name></expr>:</case>
<case>case <expr><name>BC_LEX_OP_REL_LE</name></expr>:</case>
<case>case <expr><name>BC_LEX_OP_REL_GE</name></expr>:</case>
<case>case <expr><name>BC_LEX_OP_REL_NE</name></expr>:</case>
<case>case <expr><name>BC_LEX_OP_REL_LT</name></expr>:</case>
<case>case <expr><name>BC_LEX_OP_REL_GT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>uchar</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>BC_LEX_OP_REL_EQ</name> <operator>+</operator> <name>BC_INST_REL_EQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dc_parse_cond</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_SCOLON</name></expr>:</case>
<case>case <expr><name>BC_LEX_COLON</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>dc_parse_mem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_ARRAY_ELEM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>t</name> <operator>==</operator> <name>BC_LEX_COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_STR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>dc_parse_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_NEG</name></expr>:</case>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>dc_lex_negCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>get_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BC_FALLTHROUGH</name></macro>

<case>case <expr><name>BC_LEX_NUMBER</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_number</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>BC_LEX_NEG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>get_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_KW_READ</name></expr>:</case>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>BC_PARSE_NOREAD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_parse_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_ERR_EXEC_REC_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>get_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_OP_ASSIGN</name></expr>:</case>
<case>case <expr><name>BC_LEX_STORE_PUSH</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>assign</name> <operator>=</operator> <name>t</name> <operator>==</operator> <name>BC_LEX_OP_ASSIGN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inst</name> <operator>=</operator> <ternary><condition><expr><name>assign</name></expr> ?</condition><then> <expr><name>BC_INST_VAR</name></expr> </then><else>: <expr><name>BC_INST_PUSH_TO_VAR</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dc_parse_mem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>assign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_LOAD</name></expr>:</case>
<case>case <expr><name>BC_LEX_LOAD_POP</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>inst</name> <operator>=</operator> <ternary><condition><expr><name>t</name> <operator>==</operator> <name>BC_LEX_LOAD_POP</name></expr> ?</condition><then> <expr><name>BC_INST_PUSH_VAR</name></expr> </then><else>: <expr><name>BC_INST_LOAD</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dc_parse_mem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_REG_STACK_LEVEL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>dc_parse_mem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_REG_STACK_LEN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_STORE_IBASE</name></expr>:</case>
<case>case <expr><name>BC_LEX_STORE_OBASE</name></expr>:</case>
<case>case <expr><name>BC_LEX_STORE_SCALE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<case>case <expr><name>BC_LEX_STORE_SEED</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>uchar</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>BC_LEX_STORE_IBASE</name> <operator>+</operator> <name>BC_INST_IBASE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dc_parse_mem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>BC_LEX_ARRAY_LENGTH</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dc_parse_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>get_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>


<expr_stmt><expr><call><name>bc_parse_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>get_token</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_parse_expr</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcInst</name></type> <name>inst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcLexType</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_expr</name></decl>, <decl><type ref="prev"/><name>have_expr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>need_expr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BC_PARSE_NOREAD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>






<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>t</name></name><operator>)</operator> <operator>!=</operator> <name>BC_LEX_EOF</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>BC_LEX_NLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>dc_parse_insts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>inst</name> <operator>!=</operator> <name>BC_INST_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>dc_parse_token</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>have_expr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>need_expr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>have_expr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_err</name><argument_list>(<argument><expr><name>BC_ERR_EXEC_READ_EXPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_EOF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BC_PARSE_NOCALL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_parse_push</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_INST_POP_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dc_parse_parse</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_EOF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>dc_parse_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>exit</name>:</label>


<if_stmt><if>if <condition>(<expr><name>BC_SIG_EXC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_parse_reset</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
