<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/dc_lex.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>dc_lex_negCommand</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_lex_register</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>DC_X</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_lex_whitespace</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_CHAR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_name</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_verr</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_CHAR</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uchar</name><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_NAME</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_lex_string</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>nls</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>got_more</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>is_stdin</name></name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>depth</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>depth</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>-=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>nls</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>is_stdin</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>got_more</name> <operator>=</operator> <call><name>bc_lex_readLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_more</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>got_more</name> <operator>&amp;&amp;</operator> <name>depth</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_lex_err</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>BC_ERR_PARSE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name> <operator>+=</operator> <name>nls</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>dc_lex_token</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dc_lex_regs_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name><name>dc_lex_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dc_lex_register</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>dc_lex_tokens</name><index>[<expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'"'</literal><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>BC_LEX_INVALID</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_commonTokens</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>



<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_REL_NE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_REL_LE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_OP_REL_GE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_lineComment</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><call><name>BC_LEX_NUM_CHAR</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_lex_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_KW_LINE_LENGTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>BC_LEX_KW_LEADING_ZERO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>dc_lex_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_lex_invalidChar</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
