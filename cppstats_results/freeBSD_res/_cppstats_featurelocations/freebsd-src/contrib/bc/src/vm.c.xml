<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/src/vm.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;args.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;read.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bc.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>BcDig</name><modifier>*</modifier></type> <name><name>temps_buf</name><index>[<expr><name>BC_VM_MAX_TEMPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>output_bufs</name><index>[<expr><name>BC_VM_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcVm</name></type> <name>vm</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<function><type><name>BC_NORETURN</name> <name>void</name></type> <name>bc_vm_jmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>BC_NORETURN</name> <name>void</name></type> <name>bc_vm_jmp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>BC_SIG_EXC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"Longjmp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>vm</name><operator>.</operator><name>sig_pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>sig_pop</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>sig_pop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>sigjmp_buf</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_sig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>BC_STATUS_QUIT</name> <operator>||</operator> <name><name>vm</name><operator>.</operator><name>sig</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BC_I</name> <operator>||</operator> <name>sig</name> <operator>!=</operator> <name>SIGINT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>BC_STATUS_QUIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGINT</name> <operator>&amp;&amp;</operator> <name>BC_SIGINT</name> <operator>&amp;&amp;</operator> <name>BC_I</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>sigmsg</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>siglen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>vm</name><operator>.</operator><name>siglen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>BC_STATUS_ERROR_FATAL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>BC_STATUS_QUIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>jmp_bufs</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_lock</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_sigaction</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>bc_vm_sig</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_TTY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>bc_vm_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>bc_vm_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vm_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>help</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>BC_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>bc_copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>help</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>banner</name> <init>= <expr><ternary><condition><expr><name>BC_DEFAULT_BANNER</name></expr> ?</condition><then> <expr><literal type="string">"to"</literal></expr> </then><else>: <expr><literal type="string">"to not"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>sigint</name> <init>= <expr><ternary><condition><expr><name>BC_DEFAULT_SIGINT_RESET</name></expr> ?</condition><then> <expr><literal type="string">"to reset"</literal></expr> </then><else>:
<expr><literal type="string">"to exit"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tty</name> <init>= <expr><ternary><condition><expr><name>BC_DEFAULT_TTY_MODE</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>:
<expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>prompt</name> <init>= <expr><ternary><condition><expr><name>BC_DEFAULT_PROMPT</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>:
<expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>expr</name> <init>= <expr><ternary><condition><expr><name>BC_DEFAULT_EXPR_EXIT</name></expr> ?</condition><then> <expr><literal type="string">"to exit"</literal></expr> </then><else>:
<expr><literal type="string">"to not exit"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>help</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>BC_VERSION</name></expr></argument>,
<argument><expr><name>BC_BUILD_TYPE</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><name>sigint</name></expr></argument>, <argument><expr><name>tty</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_DC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>sigint</name> <init>= <expr><ternary><condition><expr><name>DC_DEFAULT_SIGINT_RESET</name></expr> ?</condition><then> <expr><literal type="string">"to reset"</literal></expr> </then><else>:
<expr><literal type="string">"to exit"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tty</name> <init>= <expr><ternary><condition><expr><name>DC_DEFAULT_TTY_MODE</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>:
<expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>prompt</name> <init>= <expr><ternary><condition><expr><name>DC_DEFAULT_PROMPT</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>:
<expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>expr</name> <init>= <expr><ternary><condition><expr><name>DC_DEFAULT_EXPR_EXIT</name></expr> ?</condition><then> <expr><literal type="string">"to exit"</literal></expr> </then><else>:
<expr><literal type="string">"to not exit"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>help</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>BC_VERSION</name></expr></argument>,
<argument><expr><name>BC_BUILD_TYPE</name></expr></argument>, <argument><expr><name>sigint</name></expr></argument>, <argument><expr><name>tty</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>BC_ENABLE_MEMCHECK</name></expr></cpp:if>
<function><type><name>BC_NORETURN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>void</name></type> <name>bc_vm_fatalError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>BC_ENABLE_MEMCHECK</name></expr></cpp:if>
<function_decl><type><name>BC_UNREACHABLE</name></type>
<name>abort</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_vm_handleError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>&lt;</operator> <name>BC_ERR_NELEMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>BC_ERR_MATH_DIVIDE_BY_ZERO</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err</name></name> <operator>=</operator> <operator>(</operator><name>BclError</name><operator>)</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>BC_ERR_MATH_NEGATIVE</name> <operator>+</operator>
<name>BCL_ERROR_MATH_NEGATIVE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>vm</name><operator>.</operator><name>abrt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>==</operator> <name>BC_ERR_FATAL_ALLOC_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>BCL_ERROR_FATAL_ALLOC_ERR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type> <name>bc_vm_handleError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar</name></type> <name>id</name> <init>= <expr><name><name>bc_err_ids</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>err_type</name> <init>= <expr><name><name>vm</name><operator>.</operator><name>err_ids</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>&lt;</operator> <name>BC_ERR_NELEMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BC_S</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&gt;=</operator> <name>BC_ERR_POSIX_START</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>BC_W</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>UCHAR_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_type</name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>err_ids</name><index>[<expr><name>BC_ERR_IDX_WARN</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_file_flushErr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>BC_STATUS_ERROR_FATAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>err_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_vprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>err_msgs</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_NO_ERR</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_err_line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>BcInstPtr</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>bc_vec_item_rev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>fns</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>func_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name> <operator>&amp;&amp;</operator> <name><name>ip</name><operator>-&gt;</operator><name>func</name></name> <operator>!=</operator> <name>BC_PROG_MAIN</name> <operator>&amp;&amp;</operator>
<name><name>ip</name><operator>-&gt;</operator><name>func</name></name> <operator>!=</operator> <name>BC_PROG_READ</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_file_flushErr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_MEMCHECK</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>BC_ERR_IDX_FATAL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>BC_STATUS_ERROR_FATAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>bc_vm_atexit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>BC_STATUS_ERROR_FATAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>BC_STATUS_ERROR_FATAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <operator>(</operator><name>uchar</name><operator>)</operator> <operator>(</operator><name>id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>BC_JMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>bc_vm_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_dupenv_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vm_getenvFree</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_setenvFlag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><call><name>bc_vm_getenv</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>def</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>flag</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strtoul</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>flag</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bc_vm_getenvFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_envArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_args_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env_args</name> <init>= <expr><call><name>bc_vm_getenv</name><argument_list>(<argument><expr><name>env_args_name</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>instr</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>env_args</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>env_args_buffer</name></name> <operator>=</operator> <call><name>bc_vm_strdup</name><argument_list>(<argument><expr><name>env_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>env_args_buffer</name></name> <operator>=</operator> <name>env_args</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env_args_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>instr</name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>instr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>instr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>instr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name> <operator>!=</operator> <name>instr</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>instr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>instr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>instr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_error</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_OPTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_args</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>vm</name><operator>.</operator><name>env_args</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bc_vm_envLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lenv</name> <init>= <expr><call><name>bc_vm_getenv</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name>BC_NUM_PRINT_WIDTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>lenv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>num</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>lenv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>lenv</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>BC_NUM_PRINT_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>BC_NUM_PRINT_WIDTH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bc_vm_getenvFree</name><argument_list>(<argument><expr><name>lenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_vm_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_NLS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>catalog</name></name> <operator>!=</operator> <name>BC_VM_INVALID_CATALOG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>catclose</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>BC_TTY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>env_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>env_args_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>exprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_PARSE_IS_INITED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>read_prs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_parse_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>read_prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bc_parse_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_program_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_slabvec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>other_slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_const_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bc_vm_freeTemps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<expr_stmt><expr><call><name>bc_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vm_addTemp</name><parameter_list>(<parameter><decl><type><name>BcDig</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name> <operator>==</operator> <name>BC_VM_MAX_TEMPS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name><name>temps_buf</name><index>[<expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BcDig</name><modifier>*</modifier></type> <name>bc_vm_takeTemp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>temps_len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>temps_buf</name><index>[<expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vm_freeTemps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>temps_len</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vm</name><operator>.</operator><name>temps_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>temps_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>temps_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>bc_vm_arraySize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><name>n</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><call><name>BC_VM_MUL_OVERFLOW</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_ALLOC_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>bc_vm_growSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>res</name> <operator>&gt;=</operator> <name>SIZE_MAX</name> <operator>||</operator> <name>res</name> <operator>&lt;</operator> <name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_ALLOC_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>bc_vm_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vm_freeTemps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_ALLOC_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>bc_vm_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vm_freeTemps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_ALLOC_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>bc_vm_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vm_freeTemps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BC_ERR</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_fatalError</name><argument_list>(<argument><expr><name>BC_ERR_FATAL_ALLOC_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_vm_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_vprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>nchars</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SIG_TRYUNLOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_vm_putchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uchar</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>uchar</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>nchars</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>vm</name><operator>.</operator><name>nchars</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>BC_NORETURN</name> <specifier>static</specifier> <name>void</name></type> <name>bc_abortm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="string">"; this is a bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_pledge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>promises</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>execpromises</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>pledge</name><argument_list>(<argument><expr><name>promises</name></expr></argument>, <argument><expr><name>execpromises</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_abortm</name><argument_list>(<argument><expr><literal type="string">"pledge() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_unveil</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>permissions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>unveil</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_abortm</name><argument_list>(<argument><expr><literal type="string">"unveil() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>bc_pledge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>promises</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>execpromises</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>promises</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>execpromises</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_unveil</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>permissions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_UNUSED</name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_clean</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>fns</name> <init>= <expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>fns</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><name>fns</name></expr></argument>, <argument><expr><name>BC_PROG_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcInstPtr</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>good</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>&amp;&amp;</operator> <name><name>vm</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>BC_STATUS_QUIT</name><operator>)</operator> <operator>||</operator> <name><name>vm</name><operator>.</operator><name>sig</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>good</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_program_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>good</name> <operator>&amp;&amp;</operator> <name>BC_IS_BC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>good</name> <operator>=</operator> <operator>!</operator><call><name>BC_PARSE_NO_EXEC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name>BC_IS_DC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>good</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>good</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>results</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>BcResult</name><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>results</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>BC_VM_SAFE_RESULT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>good</name> <operator>&amp;&amp;</operator> <name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>stack</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ip</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>bc_slabvec_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_const_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_DC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>consts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_const_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_stdin</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>bc_parse_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>is_stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>BC_LEX_KW_DEFINE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>vm</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><call><name>BC_PARSE_CAN_PARSE</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>vm</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>BC_IS_DC</name> <operator>||</operator> <operator>!</operator><call><name>BC_PARSE_NO_EXEC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_program_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>BC_IS_DC</name> <operator>||</operator> <name><name>vm</name><operator>.</operator><name>prog</name><operator>.</operator><name>results</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>BC_I</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>!=</operator> <name>BC_LEX_EOF</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>







<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_endif</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>bc_parse_endif</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_program_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>sig_pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_lex_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bc_read_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_process</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_endif</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_clean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <operator>(</operator><name>sig_atomic_t</name><operator>)</operator> <name>BC_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>BC_LONGJMP_STOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>bc_vm_readLine</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BcStatus</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>good</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_ASSERT_NOT_LOCKED</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vec_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>line_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>bc_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>line_buf</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>BC_STATUS_EOF</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>vm</name><operator>.</operator><name>line_buf</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>good</name> <operator>=</operator> <operator>(</operator><name><name>vm</name><operator>.</operator><name>line_buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>good</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vec_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>line_buf</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>good</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_stdin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>clear</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>is_stdin</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_lex_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><name>bc_program_stdin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>line_buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>




<label><name>restart</name>:</label>


<while>while <condition>(<expr><call><name>bc_vm_readLine</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>clear</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clear</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vm_process</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>buffer</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_clean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_endif</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_clean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_MEMCHECK</name></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>BC_STATUS_ERROR_FATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>BC_STATUS_QUIT</name> <operator>||</operator> <operator>!</operator><name>BC_I</name></expr> ?</condition><then>
<expr><name><name>vm</name><operator>.</operator><name>status</name></name></expr> </then><else>: <expr><name>BC_STATUS_SUCCESS</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>BC_STATUS_ERROR_FATAL</name> <operator>||</operator>
<name><name>vm</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>BC_STATUS_QUIT</name> <operator>||</operator> <operator>!</operator><name>BC_I</name></expr> ?</condition><then>
<expr><name><name>vm</name><operator>.</operator><name>status</name></name></expr> </then><else>: <expr><name>BC_STATUS_SUCCESS</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>status</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vec_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_LONGJMP_STOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
<goto>goto <name>restart</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>line_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>bc_lex_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_parse_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name><operator>.</operator><name>t</name></name> <operator>!=</operator> <name>BC_LEX_EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>vm</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_defaultMsgs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>func_header</name></name> <operator>=</operator> <name>bc_err_func_header</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BC_ERR_IDX_NELEMS</name> <operator>+</operator> <name>BC_ENABLED</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bc_errs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BC_ERR_NELEMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err_msgs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bc_err_msgs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_gettext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_NLS</name></expr></cpp:if>
<decl_stmt><decl><type><name>uchar</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>msg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>locale</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name> <operator>=</operator> <name>BC_VM_INVALID_CATALOG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_defaultMsgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name> <operator>=</operator> <call><name>catopen</name><argument_list>(<argument><expr><name>BC_MAINEXEC</name></expr></argument>, <argument><expr><name>NL_CAT_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>catalog</name></name> <operator>==</operator> <name>BC_VM_INVALID_CATALOG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vm_defaultMsgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>func_header</name></name> <operator>=</operator> <call><name>catgets</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>bc_err_func_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>set</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>msg</name> <operator>&lt;=</operator> <name>BC_ERR_IDX_NELEMS</name> <operator>+</operator> <name>BC_ENABLED</name></expr>;</condition> <incr><expr><operator>++</operator><name>msg</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err_ids</name><index>[<expr><name>msg</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgets</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>bc_errs</name><index>[<expr><name>msg</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>bc_err_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>set</name> <operator>=</operator> <name>id</name> <operator>+</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>msg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BC_ERR_NELEMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>msg</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name><name>bc_err_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>bc_err_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <name>id</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>err_msgs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>catgets</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>catalog</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>bc_err_msgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>bc_vm_defaultMsgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bc_vm_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_file</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BcVec</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>BC_FLAG_L</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>no_redefine</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vm_load</name><argument_list>(<argument><expr><name>bc_lib_name</name></expr></argument>, <argument><expr><name>bc_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BC_IS_POSIX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_load</name><argument_list>(<argument><expr><name>bc_lib2_name</name></expr></argument>, <argument><expr><name>bc_lib2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>no_redefine</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_program_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>vm</name><operator>.</operator><name>exprs</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>vm</name><operator>.</operator><name>exprs</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>more</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BC_DTOR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BC_SETJMP_LOCKED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_lex_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><name>bc_program_exprs_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<do>do <block>{<block_content>

<expr_stmt><expr><name>more</name> <operator>=</operator> <call><name>bc_read_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>exprs</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_pushByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_process</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_popAll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>more</name></expr>)</condition>;</do>

<expr_stmt><expr><name>BC_SIG_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>BC_UNSETJMP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vm</name><operator>.</operator><name>no_exprs</name></name> <operator>&amp;&amp;</operator> <name><name>vm</name><operator>.</operator><name>exit_exprs</name></name> <operator>&amp;&amp;</operator> <name>BC_EXPR_EXIT</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vm</name><operator>.</operator><name>files</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>bc_vec_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>has_file</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<expr_stmt><expr><call><name>bc_unveil</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_unveil</name><argument_list>(<argument><expr><literal type="string">"/dev/random"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_unveil</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name>BC_TTY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vm</name><operator>.</operator><name>history</name><operator>.</operator><name>badTerm</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_pledge</name><argument_list>(<argument><expr><name>bc_pledge_end_history</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>bc_pledge</name><argument_list>(<argument><expr><name>bc_pledge_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_AFL</name></expr></cpp:if>




<expr_stmt><expr><call><name>__AFL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name> <operator>||</operator> <operator>!</operator><name>has_file</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_stdin</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><name>BC_SIG_MAYLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BC_LONGJMP_CONT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bc_vm_boot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ttyin</name></decl>, <decl><type ref="prev"/><name>ttyout</name></decl>, <decl><type ref="prev"/><name>ttyerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_len</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_LINE_LENGTH"</literal></expr> </then><else>: <expr><literal type="string">"DC_LINE_LENGTH"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_args</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_ENV_ARGS"</literal></expr> </then><else>: <expr><literal type="string">"DC_ENV_ARGS"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_exit</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_EXPR_EXIT"</literal></expr> </then><else>: <expr><literal type="string">"DC_EXPR_EXIT"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_exit_def</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><name>BC_DEFAULT_EXPR_EXIT</name></expr> </then><else>: <expr><name>DC_DEFAULT_EXPR_EXIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ttyin</name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttyout</name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttyerr</name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tty</name> <operator>=</operator> <operator>(</operator><name>ttyin</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ttyout</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ttyerr</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name>ttyin</name></expr> ?</condition><then> <expr><name>BC_FLAG_TTYIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name>tty</name></expr> ?</condition><then> <expr><name>BC_FLAG_TTY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name>ttyin</name> <operator>&amp;&amp;</operator> <name>ttyout</name></expr> ?</condition><then> <expr><name>BC_FLAG_I</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_sigaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_vm_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_gettext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_file_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>ferr</name></name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name>output_bufs</name> <operator>+</operator> <name>BC_VM_STDOUT_BUF_SIZE</name></expr></argument>,
<argument><expr><name>BC_VM_STDERR_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>output_bufs</name></expr></argument>, <argument><expr><name>BC_VM_STDOUT_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>output_bufs</name> <operator>+</operator> <name>BC_VM_STDOUT_BUF_SIZE</name> <operator>+</operator> <name>BC_VM_STDERR_BUF_SIZE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>line_len</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <call><name>bc_vm_envLen</name><argument_list>(<argument><expr><name>env_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bc_vm_setenvFlag</name><argument_list>(<argument><expr><name>env_exit</name></expr></argument>, <argument><expr><name>env_exit_def</name></expr></argument>, <argument><expr><name>BC_FLAG_EXPR_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bc_vec_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vec_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>exprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<expr_stmt><expr><call><name>bc_slabvec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_const_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>main_slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_slabvec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>other_slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>bc_program_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_parse_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>prog</name></name></expr></argument>, <argument><expr><name>BC_PROG_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name>BC_TTY</name></expr> ?</condition><then> <expr><name>BC_FLAG_P</name> <operator>|</operator> <name>BC_FLAG_R</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name>BC_I</name></expr> ?</condition><then> <expr><name>BC_FLAG_Q</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>var</name> <init>= <expr><call><name>bc_vm_getenv</name><argument_list>(<argument><expr><literal type="string">"POSIXLY_CORRECT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>BC_FLAG_S</name> <operator>*</operator> <operator>(</operator><name>var</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_getenvFree</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>BC_I</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_vm_setenvFlag</name><argument_list>(<argument><expr><literal type="string">"BC_BANNER"</literal></expr></argument>, <argument><expr><name>BC_DEFAULT_BANNER</name></expr></argument>, <argument><expr><name>BC_FLAG_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>BC_TTY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_tty</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_TTY_MODE"</literal></expr> </then><else>: <expr><literal type="string">"DC_TTY_MODE"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_tty_def</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><name>BC_DEFAULT_TTY_MODE</name></expr> </then><else>: <expr><name>DC_DEFAULT_TTY_MODE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_prompt</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_PROMPT"</literal></expr> </then><else>: <expr><literal type="string">"DC_PROMPT"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_prompt_def</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><name>BC_DEFAULT_PROMPT</name></expr> </then><else>: <expr><name>DC_DEFAULT_PROMPT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_vm_setenvFlag</name><argument_list>(<argument><expr><name>env_tty</name></expr></argument>, <argument><expr><name>env_tty_def</name></expr></argument>, <argument><expr><name>BC_FLAG_TTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_vm_setenvFlag</name><argument_list>(<argument><expr><name>env_prompt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tty</name></expr> ?</condition><then> <expr><name>env_prompt_def</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>BC_FLAG_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_TTY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bc_history_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>bc_vm_envArgs</name><argument_list>(<argument><expr><name>env_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>BC_I</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_sigint</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><literal type="string">"BC_SIGINT_RESET"</literal></expr> </then><else>:
<expr><literal type="string">"DC_SIGINT_RESET"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_sigint_def</name> <init>= <expr><ternary><condition><expr><name>BC_IS_BC</name></expr> ?</condition><then> <expr><name>BC_DEFAULT_SIGINT_RESET</name></expr> </then><else>:
<expr><name>DC_DEFAULT_SIGINT_RESET</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bc_vm_setenvFlag</name><argument_list>(<argument><expr><name>env_sigint</name></expr></argument>, <argument><expr><name>env_sigint_def</name></expr></argument>, <argument><expr><name>BC_FLAG_SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_POSIX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>BC_FLAG_G</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name> <operator>&amp;&amp;</operator> <name>BC_I</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vm</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>BC_FLAG_Q</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bc_vm_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>fout</name></name></expr></argument>, <argument><expr><name>bc_flush_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>BC_SIG_UNLOCK</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bc_vm_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>bc_vm_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>BC_SIG_ASSERT_LOCKED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>zero</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>zero_num</name></name></expr></argument>, <argument><expr><name>BC_VM_ONE_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>one_num</name></name></expr></argument>, <argument><expr><name>BC_VM_ONE_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>max_num</name></name></expr></argument>, <argument><expr><name>bc_num_bigdigMax</name></expr></argument>,
<argument><expr><name>bc_num_bigdigMax_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BcDig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vm</name><operator>.</operator><name>max2_num</name></name></expr></argument>, <argument><expr><name>bc_num_bigdigMax2</name></expr></argument>,
<argument><expr><name>bc_num_bigdigMax2_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BcDig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>max_num</name></name></expr></argument>, <argument><expr><name>BC_NUM_BIGDIG_LOG10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bc_num_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>max2</name></name></expr></argument>, <argument><expr><name><name>vm</name><operator>.</operator><name>max2_num</name></name></expr></argument>, <argument><expr><name>BC_NUM_BIGDIG_LOG10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>max</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>bc_num_bigdigMax_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>max2</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>bc_num_bigdigMax2_size</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>maxes</name><index>[<expr><name>BC_PROG_GLOBALS_IBASE</name></expr>]</index></name> <operator>=</operator> <name>BC_NUM_MAX_POSIX_IBASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>maxes</name><index>[<expr><name>BC_PROG_GLOBALS_OBASE</name></expr>]</index></name> <operator>=</operator> <name>BC_MAX_OBASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>maxes</name><index>[<expr><name>BC_PROG_GLOBALS_SCALE</name></expr>]</index></name> <operator>=</operator> <name>BC_MAX_SCALE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>maxes</name><index>[<expr><name>BC_PROG_MAX_RAND</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BcRand</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>BC_IS_BC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>BC_IS_POSIX</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>vm</name><operator>.</operator><name>maxes</name><index>[<expr><name>BC_PROG_GLOBALS_IBASE</name></expr>]</index></name> <operator>=</operator> <name>BC_NUM_MAX_IBASE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<function><type><name>void</name></type> <name>bc_vm_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>bc_vm_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>bc_vm_atexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><call><name>BC_STATUS_IS_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>status</name></expr> </then><else>: <expr><name>BC_STATUS_SUCCESS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bc_vm_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bc_vec_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vm</name><operator>.</operator><name>jmp_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
