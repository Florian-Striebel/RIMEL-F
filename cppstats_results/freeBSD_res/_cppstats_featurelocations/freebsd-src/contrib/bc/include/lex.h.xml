<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/lex.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_LEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lang.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_lex_err</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), (l)-&gt;line))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_lex_verr</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), (l)-&gt;line, __VA_ARGS__))</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NEG_CHAR</name></cpp:macro> <cpp:value>(BC_IS_BC ? '-' : '_')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_LAST_NUM_CHAR</name></cpp:macro> <cpp:value>(BC_IS_BC ? 'Z' : 'F')</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NEG_CHAR</name></cpp:macro> <cpp:value>('-')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_LAST_NUM_CHAR</name></cpp:macro> <cpp:value>('Z')</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NEG_CHAR</name></cpp:macro> <cpp:value>('_')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_LAST_NUM_CHAR</name></cpp:macro> <cpp:value>('F')</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NUM_CHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>pt</name></type></parameter>, <parameter><type><name>int_only</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(c) != 0 || ((c) &gt;= 'A' &amp;&amp; (c) &lt;= BC_LEX_LAST_NUM_CHAR) || ((c) == '.' &amp;&amp; !(pt) &amp;&amp; !(int_only)))</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum <name>BcLexType</name> <block>{


<decl><name>BC_LEX_EOF</name></decl>,


<decl><name>BC_LEX_INVALID</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_LEX_OP_INC</name></decl>,


<decl><name>BC_LEX_OP_DEC</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl><name>BC_LEX_NEG</name></decl>,


<decl><name>BC_LEX_OP_BOOL_NOT</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_LEX_OP_TRUNC</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_OP_POWER</name></decl>,


<decl><name>BC_LEX_OP_MULTIPLY</name></decl>,


<decl><name>BC_LEX_OP_DIVIDE</name></decl>,


<decl><name>BC_LEX_OP_MODULUS</name></decl>,


<decl><name>BC_LEX_OP_PLUS</name></decl>,


<decl><name>BC_LEX_OP_MINUS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_LEX_OP_PLACES</name></decl>,


<decl><name>BC_LEX_OP_LSHIFT</name></decl>,


<decl><name>BC_LEX_OP_RSHIFT</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_OP_REL_EQ</name></decl>,


<decl><name>BC_LEX_OP_REL_LE</name></decl>,


<decl><name>BC_LEX_OP_REL_GE</name></decl>,


<decl><name>BC_LEX_OP_REL_NE</name></decl>,


<decl><name>BC_LEX_OP_REL_LT</name></decl>,


<decl><name>BC_LEX_OP_REL_GT</name></decl>,


<decl><name>BC_LEX_OP_BOOL_OR</name></decl>,


<decl><name>BC_LEX_OP_BOOL_AND</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<decl><name>BC_LEX_OP_ASSIGN_POWER</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_MULTIPLY</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_DIVIDE</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_MODULUS</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_PLUS</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_MINUS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_LEX_OP_ASSIGN_PLACES</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_LSHIFT</name></decl>,


<decl><name>BC_LEX_OP_ASSIGN_RSHIFT</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_OP_ASSIGN</name></decl>,


<decl><name>BC_LEX_NLINE</name></decl>,


<decl><name>BC_LEX_WHITESPACE</name></decl>,


<decl><name>BC_LEX_LPAREN</name></decl>,


<decl><name>BC_LEX_RPAREN</name></decl>,


<decl><name>BC_LEX_LBRACKET</name></decl>,


<decl><name>BC_LEX_COMMA</name></decl>,


<decl><name>BC_LEX_RBRACKET</name></decl>,


<decl><name>BC_LEX_LBRACE</name></decl>,


<decl><name>BC_LEX_SCOLON</name></decl>,


<decl><name>BC_LEX_RBRACE</name></decl>,


<decl><name>BC_LEX_STR</name></decl>,


<decl><name>BC_LEX_NAME</name></decl>,


<decl><name>BC_LEX_NUMBER</name></decl>,





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_LEX_KW_AUTO</name></decl>,


<decl><name>BC_LEX_KW_BREAK</name></decl>,


<decl><name>BC_LEX_KW_CONTINUE</name></decl>,


<decl><name>BC_LEX_KW_DEFINE</name></decl>,


<decl><name>BC_LEX_KW_FOR</name></decl>,


<decl><name>BC_LEX_KW_IF</name></decl>,


<decl><name>BC_LEX_KW_LIMITS</name></decl>,


<decl><name>BC_LEX_KW_RETURN</name></decl>,


<decl><name>BC_LEX_KW_WHILE</name></decl>,


<decl><name>BC_LEX_KW_HALT</name></decl>,


<decl><name>BC_LEX_KW_LAST</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_IBASE</name></decl>,


<decl><name>BC_LEX_KW_OBASE</name></decl>,


<decl><name>BC_LEX_KW_SCALE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_LEX_KW_SEED</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_LENGTH</name></decl>,


<decl><name>BC_LEX_KW_PRINT</name></decl>,


<decl><name>BC_LEX_KW_SQRT</name></decl>,


<decl><name>BC_LEX_KW_ABS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_LEX_KW_IRAND</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_ASCIIFY</name></decl>,


<decl><name>BC_LEX_KW_MODEXP</name></decl>,


<decl><name>BC_LEX_KW_DIVMOD</name></decl>,


<decl><name>BC_LEX_KW_QUIT</name></decl>,


<decl><name>BC_LEX_KW_READ</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_LEX_KW_RAND</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_MAXIBASE</name></decl>,


<decl><name>BC_LEX_KW_MAXOBASE</name></decl>,


<decl><name>BC_LEX_KW_MAXSCALE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_LEX_KW_MAXRAND</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_LINE_LENGTH</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_LEX_KW_GLOBAL_STACKS</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_KW_LEADING_ZERO</name></decl>,


<decl><name>BC_LEX_KW_STREAM</name></decl>,


<decl><name>BC_LEX_KW_ELSE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<decl><name>BC_LEX_EQ_NO_REG</name></decl>,


<decl><name>BC_LEX_COLON</name></decl>,


<decl><name>BC_LEX_EXECUTE</name></decl>,


<decl><name>BC_LEX_PRINT_STACK</name></decl>,


<decl><name>BC_LEX_CLEAR_STACK</name></decl>,


<decl><name>BC_LEX_REG_STACK_LEVEL</name></decl>,


<decl><name>BC_LEX_STACK_LEVEL</name></decl>,


<decl><name>BC_LEX_DUPLICATE</name></decl>,


<decl><name>BC_LEX_SWAP</name></decl>,


<decl><name>BC_LEX_POP</name></decl>,


<decl><name>BC_LEX_STORE_IBASE</name></decl>,


<decl><name>BC_LEX_STORE_OBASE</name></decl>,


<decl><name>BC_LEX_STORE_SCALE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_LEX_STORE_SEED</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_LEX_LOAD</name></decl>,


<decl><name>BC_LEX_LOAD_POP</name></decl>,


<decl><name>BC_LEX_STORE_PUSH</name></decl>,


<decl><name>BC_LEX_PRINT_POP</name></decl>,


<decl><name>BC_LEX_NQUIT</name></decl>,


<decl><name>BC_LEX_EXEC_STACK_LENGTH</name></decl>,



<decl><name>BC_LEX_SCALE_FACTOR</name></decl>,



<decl><name>BC_LEX_ARRAY_LENGTH</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></enum></type> <name>BcLexType</name>;</typedef>

<struct_decl>struct <name>BcLex</name>;</struct_decl>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcLexNext</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BcLex</name></name><modifier>*</modifier></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <name>BcLex</name> <block>{


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>line</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcLexType</name></type> <name>t</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcLexType</name></type> <name>last</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BcVec</name></type> <name>str</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>is_stdin</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcLex</name>;</typedef>





<function_decl><type><name>void</name></type> <name>bc_lex_init</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_lex_free</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_lex_file</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_lex_text</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_stdin</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_lex_next</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_lex_lineComment</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_lex_comment</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_lex_whitespace</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_lex_number</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>start</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_lex_name</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_lex_commonTokens</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_lex_invalidChar</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>bc_lex_readLine</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
