<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/history.h">













































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_HISTORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HISTORY_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_HISTORY</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strncasecmp</name></cpp:macro> <cpp:value>_strnicmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcasecmp</name></cpp:macro> <cpp:value>_stricmp</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;read.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;file.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_DEF_COLS</name></cpp:macro> <cpp:value>(80)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_MAX_LEN</name></cpp:macro> <cpp:value>(128)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_MAX_LINE</name></cpp:macro> <cpp:value>(4095)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_SEQ_SIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_BUF_LEN</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;buf.len - 1)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_READ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_history_read((s), (n)) == -1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_NEXT</name></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HIST_PREV</name></cpp:macro> <cpp:value>(true)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HISTORY_DEBUG_BUF_SIZE</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lndebug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (bc_history_debug_fp.fd == 0) { bc_history_debug_buf = bc_vm_malloc(BC_HISTORY_DEBUG_BUF_SIZE); bc_file_init(&amp;bc_history_debug_fp, open("/tmp/lndebug.txt", O_APPEND), BC_HISTORY_DEBUG_BUF_SIZE); bc_file_printf(&amp;bc_history_debug_fp, "[%zu %zu %zu] p: %d, rows: %d, " "rpos: %d, max: %zu, oldmax: %d\n", l-&gt;len, l-&gt;pos, l-&gt;oldcolpos, plen, rows, rpos, l-&gt;maxrows, old_rows); } bc_file_printf(&amp;bc_history_debug_fp, ", " __VA_ARGS__); bc_file_flush(&amp;bc_history_debug_fp); } while (0)</cpp:value></cpp:define>















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lndebug</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><enum>enum <name>BcHistoryAction</name> <block>{

<decl><name>BC_ACTION_NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_A</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_B</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_C</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_D</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_E</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_F</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_H</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>BC_ACTION_TAB</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>BC_ACTION_LINE_FEED</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_K</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_L</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>BC_ACTION_ENTER</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_N</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_P</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_S</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_T</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_U</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_W</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_Z</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>BC_ACTION_ESC</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>BC_ACTION_CTRL_BSLASH</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>BC_ACTION_BACKSPACE</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>

}</block></enum></type> <name>BcHistoryAction</name>;</typedef>





<typedef>typedef <type><struct>struct <name>BcHistory</name> <block>{


<decl_stmt><decl><type><name>BcVec</name></type> <name>buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>history</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>extras</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pcol</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>oldcolpos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>cols</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>orig_termios</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>DWORD</name></type> <name>orig_in</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>orig_out</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>bool</name></type> <name>rawMode</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>badTerm</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>fd_set</name></type> <name>rdset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigmask</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>BcHistory</name>;</typedef>












<function_decl><type><name>BcStatus</name></type> <name>bc_history_line</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_history_init</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_history_free</name><parameter_list>(<parameter><decl><type><name>BcHistory</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_history_string_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bc_history_bad_terms</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_history_tab</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_history_tab_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_history_ctrlc</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>bc_history_wchars</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_history_wchars_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>bc_history_combo_chars</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_history_combo_chars_len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <name>BcFile</name></type> <name>bc_history_debug_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>bc_history_debug_buf</name></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>bc_history_printKeyCodes</name><parameter_list>(<parameter><decl><type><name>BcHistory</name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
