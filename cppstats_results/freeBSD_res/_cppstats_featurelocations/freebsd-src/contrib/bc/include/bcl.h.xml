<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/bcl.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_BCL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BCL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;BaseTsd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restrict</name></cpp:macro> <cpp:value>__restrict</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strdup</name></cpp:macro> <cpp:value>_strdup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_write((f), (b), (unsigned int) (s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_read((f), (b), (unsigned int) (s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sopen_s((f), (n), (m) | _O_BINARY, _SH_DENYNO, _S_IREAD | _S_IWRITE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigjmp_buf</name></cpp:macro> <cpp:value>jmp_buf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigsetjmp</name><parameter_list>(<parameter><type><name>j</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setjmp(j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siglongjmp</name></cpp:macro> <cpp:value>longjmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isatty</name></cpp:macro> <cpp:value>_isatty</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_FILENO</name></cpp:macro> <cpp:value>_fileno(stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro> <cpp:value>_fileno(stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDERR_FILENO</name></cpp:macro> <cpp:value>_fileno(stderr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssize_t</name></cpp:macro> <cpp:value>SSIZE_T</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((m) &amp; _S_IFDIR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDONLY</name></cpp:macro> <cpp:value>_O_RDONLY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>_fstat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FILE_SEP</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FILE_SEP</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCL_SEED_ULONGS</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCL_SEED_SIZE</name></cpp:macro> <cpp:value>(sizeof(long) * BCL_SEED_ULONGS)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BIT</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_LONG_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LONG_BIT</name></cpp:macro> <cpp:value>LONG_BIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;</operator> <name>LONG_BIT</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> BC_LONG_BIT cannot be greater than LONG_BIT</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></cpp:if>

<typedef>typedef <type><name>uint64_t</name></type> <name>BclBigDig</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>BclRandInt</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr></cpp:elif>

<typedef>typedef <type><name>uint32_t</name></type> <name>BclBigDig</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>BclRandInt</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> BC_LONG_BIT must be at least 32</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_LIBRARY</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<typedef>typedef <type><enum>enum <name>BclError</name> <block>{

<decl><name>BCL_ERROR_NONE</name></decl>,

<decl><name>BCL_ERROR_INVALID_NUM</name></decl>,
<decl><name>BCL_ERROR_INVALID_CONTEXT</name></decl>,
<decl><name>BCL_ERROR_SIGNAL</name></decl>,

<decl><name>BCL_ERROR_MATH_NEGATIVE</name></decl>,
<decl><name>BCL_ERROR_MATH_NON_INTEGER</name></decl>,
<decl><name>BCL_ERROR_MATH_OVERFLOW</name></decl>,
<decl><name>BCL_ERROR_MATH_DIVIDE_BY_ZERO</name></decl>,

<decl><name>BCL_ERROR_PARSE_INVALID_STR</name></decl>,

<decl><name>BCL_ERROR_FATAL_ALLOC_ERR</name></decl>,
<decl><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></decl>,

<decl><name>BCL_ERROR_NELEMS</name></decl>,

}</block></enum></type> <name>BclError</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BclNumber</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

}</block></struct></type> <name>BclNumber</name>;</typedef>

<struct_decl>struct <name>BclCtxt</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>BclCtxt</name></name><modifier>*</modifier></type> <name>BclContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>bcl_handleSignal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bcl_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>bcl_abortOnFatalError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_setAbortOnFatalError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>abrt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bcl_leadingZeroes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_setLeadingZeroes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>leadingZeroes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>bcl_gc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_pushContext</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_popContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclContext</name></type> <name>bcl_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclContext</name></type> <name>bcl_ctxt_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_ctxt_free</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_ctxt_freeNums</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>bcl_ctxt_scale</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_ctxt_setScale</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bcl_ctxt_ibase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_ctxt_setIbase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ibase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bcl_ctxt_obase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_ctxt_setObase</name><parameter_list>(<parameter><decl><type><name>BclContext</name></type> <name>ctxt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>obase</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_err</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclNumber</name></type> <name>bcl_num_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_num_free</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>bcl_num_neg</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_num_setNeg</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>neg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bcl_num_scale</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclError</name></type> <name>bcl_num_setScale</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bcl_num_len</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_copy</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_dup</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_bigdig</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BclBigDig</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_bigdig2num</name><parameter_list>(<parameter><decl><type><name>BclBigDig</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclNumber</name></type> <name>bcl_add</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_sub</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_mul</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_div</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_mod</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_pow</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_lshift</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_rshift</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_sqrt</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclError</name></type> <name>bcl_divmod</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_modexp</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>bcl_cmp</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BclNumber</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>bcl_zero</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_one</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclNumber</name></type> <name>bcl_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name><modifier>*</modifier></type> <name>bcl_string</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclNumber</name></type> <name>bcl_irand</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_frand</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_ifrand</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BclError</name></type> <name>bcl_rand_seedWithNum</name><parameter_list>(<parameter><decl><type><name>BclNumber</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclError</name></type> <name>bcl_rand_seed</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>seed</name><index>[<expr><name>BCL_SEED_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bcl_rand_reseed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclNumber</name></type> <name>bcl_rand_seed2num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclRandInt</name></type> <name>bcl_rand_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BclRandInt</name></type> <name>bcl_rand_bounded</name><parameter_list>(<parameter><decl><type><name>BclRandInt</name></type> <name>bound</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
