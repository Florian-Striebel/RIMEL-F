<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/file.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FILE_ULL_LENGTH</name></cpp:macro> <cpp:value>(21)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>BcFile</name> <block>{


<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcFile</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>




<typedef>typedef <type><enum>enum <name>BcFlushType</name> <block>{


<decl><name>BC_FLUSH_NO_EXTRAS_NO_CLEAR</name></decl>,


<decl><name>BC_FLUSH_SAVE_EXTRAS_NO_CLEAR</name></decl>,


<decl><name>BC_FLUSH_NO_EXTRAS_CLEAR</name></decl>,


<decl><name>BC_FLUSH_SAVE_EXTRAS_CLEAR</name></decl>,

}</block></enum></type> <name>BcFlushType</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_file_putchar</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_file_putchar(f, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_file_flushErr</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_file_flushErr(f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_file_flush</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_file_flush(f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_file_write</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_file_write(f, b, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_file_puts</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_file_puts(f, s)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><name>void</name></type> <name>bc_file_init</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_file_free</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_file_putchar</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>BcStatus</name></type> <name>bc_file_flushErr</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_file_flush</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_file_write</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_file_printf</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_file_vprintf</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_file_puts</name><parameter_list>(<parameter><decl><type><name>BcFile</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcFlushType</name></type> <name>bc_flush_none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcFlushType</name></type> <name>bc_flush_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcFlushType</name></type> <name>bc_flush_save</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
