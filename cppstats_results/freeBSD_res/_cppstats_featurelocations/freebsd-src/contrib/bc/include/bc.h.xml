<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/bc.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_BC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BC_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parse.h&gt;</cpp:file></cpp:include>





<function_decl><type><name>void</name></type> <name>bc_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_help</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_lib</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_lib_name</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_lib2</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_lib2_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><struct>struct <name>BcLexKeyword</name> <block>{



<decl_stmt><decl><type><name>uchar</name></type> <name>data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>BcLexKeyword</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_CHAR_MSB</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bit) &lt;&lt; (CHAR_BIT - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_KW_POSIX</name><parameter_list>(<parameter><type><name>kw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kw)-&gt;data &amp; (BC_LEX_CHAR_MSB(1)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_KW_LEN</name><parameter_list>(<parameter><type><name>kw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) ((kw)-&gt;data &amp; ~(BC_LEX_CHAR_MSB(1))))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_KW_ENTRY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .data = ((b) &amp; ~(BC_LEX_CHAR_MSB(1))) | BC_LEX_CHAR_MSB(c), .name = a }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NKWS</name></cpp:macro> <cpp:value>(35)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LEX_NKWS</name></cpp:macro> <cpp:value>(31)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcLexKeyword</name></type> <name><name>bc_lex_kws</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_lex_kws_len</name></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>bc_lex_token</name><parameter_list>(<parameter><decl><type><name>BcLex</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_TOP_FLAG_PTR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t*) bc_vec_top(&amp;(p)-&gt;flags))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_TOP_FLAG</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(BC_PARSE_TOP_FLAG_PTR(p)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_BRACE</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_BRACE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_BRACE)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_FUNC_INNER</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FUNC_INNER</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_FUNC_INNER)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_FUNC</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FUNC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_FUNC)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_BODY</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_BODY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_BODY)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_LOOP</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_LOOP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_LOOP)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_LOOP_INNER</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_LOOP_INNER</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_LOOP_INNER)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_IF</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_IF</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_IF)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_ELSE</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_ELSE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_ELSE)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_FLAG_IF_END</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_IF_END</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_TOP_FLAG(p) &amp; BC_PARSE_FLAG_IF_END)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NO_EXEC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;flags.len != 1 || BC_PARSE_TOP_FLAG(p) != 0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_DELIMITER</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) == BC_LEX_SCOLON || (t) == BC_LEX_NLINE || (t) == BC_LEX_EOF)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_BLOCK_STMT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &amp; (BC_PARSE_FLAG_ELSE | BC_PARSE_FLAG_LOOP_INNER))</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_OP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p) &amp; ~(BC_LEX_CHAR_MSB(1))) | (BC_LEX_CHAR_MSB(l)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_OP_DATA</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_parse_ops[((t) - BC_LEX_OP_INC)]</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_OP_LEFT</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_OP_DATA(op) &amp; BC_LEX_CHAR_MSB(1))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_OP_PREC</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_PARSE_OP_DATA(op) &amp; ~(BC_LEX_CHAR_MSB(1)))</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_EXPR_ENTRY</name><parameter_list>(<parameter><type><name>e1</name></type></parameter>, <parameter><type><name>e2</name></type></parameter>, <parameter><type><name>e3</name></type></parameter>, <parameter><type><name>e4</name></type></parameter>, <parameter><type><name>e5</name></type></parameter>, <parameter><type><name>e6</name></type></parameter>, <parameter><type><name>e7</name></type></parameter>, <parameter><type><name>e8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UINTMAX_C(e1) &lt;&lt; 7) | (UINTMAX_C(e2) &lt;&lt; 6) | (UINTMAX_C(e3) &lt;&lt; 5) | (UINTMAX_C(e4) &lt;&lt; 4) | (UINTMAX_C(e5) &lt;&lt; 3) | (UINTMAX_C(e6) &lt;&lt; 2) | (UINTMAX_C(e7) &lt;&lt; 1) | (UINTMAX_C(e8) &lt;&lt; 0))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_EXPR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_parse_exprs[(((i) &amp; (uchar) ~(0x07)) &gt;&gt; 3)] &amp; (1 &lt;&lt; (7 - ((i) &amp; 0x07))))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_TOP_OP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((BcLexType*) bc_vec_top(&amp;(p)-&gt;ops)))</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_LEAF</name><parameter_list>(<parameter><type><name>prev</name></type></parameter>, <parameter><type><name>bin_last</name></type></parameter>, <parameter><type><name>rparen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(bin_last) &amp;&amp; ((rparen) || bc_parse_inst_isLeaf(prev)))</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_INST_VAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) &gt;= BC_INST_VAR &amp;&amp; (t) &lt;= BC_INST_SEED &amp;&amp; (t) != BC_INST_ARRAY)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_INST_VAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) &gt;= BC_INST_VAR &amp;&amp; (t) &lt;= BC_INST_SCALE &amp;&amp; (t) != BC_INST_ARRAY)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_PREV_PREFIX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) &gt;= BC_INST_NEG &amp;&amp; (p) &lt;= BC_INST_BOOL_NOT)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_OP_PREFIX</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) == BC_LEX_OP_BOOL_NOT || (t) == BC_LEX_NEG)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_TOKEN_INST</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uchar) ((t) - BC_LEX_NEG + BC_INST_NEG))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_IS_KEYWORD</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) &gt;= BC_LEX_KW_AUTO &amp;&amp; (t) &lt;= BC_LEX_KW_ELSE)</cpp:value></cpp:define>








<typedef>typedef <type><struct>struct <name>BcParseNext</name> <block>{


<decl_stmt><decl><type><name>uchar</name></type> <name>len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uchar</name></type> <name><name>tokens</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>BcParseNext</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NEXT_TOKENS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.tokens = { __VA_ARGS__ }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NEXT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .len = (uchar) (a), BC_PARSE_NEXT_TOKENS(__VA_ARGS__) }</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum <name>BcParseStatus</name> <block>{

<decl><name>BC_PARSE_STATUS_SUCCESS</name></decl>,
<decl><name>BC_PARSE_STATUS_EMPTY_EXPR</name></decl>,

}</block></enum></type> <name>BcParseStatus</name>;</typedef>








<function_decl><type><name>void</name></type> <name>bc_parse_expr</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_parse_parse</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_parse_endif</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_sig_msg</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uchar</name></type> <name>bc_sig_msg_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bc_parse_exprs</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uchar</name></type> <name><name>bc_parse_ops</name><index>[]</index></name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_expr</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_arg</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_print</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_rel</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_elem</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_for</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_read</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcParseNext</name></type> <name>bc_parse_next_builtin</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NO_EXEC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
