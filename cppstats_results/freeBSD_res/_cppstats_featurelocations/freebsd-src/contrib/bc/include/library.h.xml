<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/library.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBBC_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBBC_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_HEADER_LOCK</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BC_SIG_LOCK; BC_SETJMP_LOCKED(l); vm.err = BCL_ERROR_NONE; vm.running = 1; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_FOOTER_UNLOCK</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BC_SIG_ASSERT_LOCKED; e = vm.err; vm.running = 0; BC_UNSETJMP; BC_LONGJMP_STOP; vm.sig_lock = 0; } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_HEADER</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BC_SETJMP(l); vm.err = BCL_ERROR_NONE; vm.running = 1; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_HEADER_INIT</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { BC_SETJMP_LOCKED(l); vm.err = BCL_ERROR_NONE; vm.running = 1; } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_FOOTER_NO_ERR</name></cpp:macro> <cpp:value>do { vm.running = 0; BC_UNSETJMP; BC_LONGJMP_STOP; vm.sig_lock = 0; } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_FOOTER</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { e = vm.err; BC_FUNC_FOOTER_NO_ERR; } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAYBE_SETUP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (BC_ERR((e) != BCL_ERROR_NONE)) { if ((n).num != NULL) bc_num_free(&amp;(n)); idx.i = 0 - (size_t) (e); } else idx = bcl_num_insert(c, &amp;(n)); } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_CHECK_CTXT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c = bcl_context(); if (BC_ERR(c == NULL)) { BclNumber n_num; n_num.i = 0 - (size_t) BCL_ERROR_INVALID_CONTEXT; return n_num; } } while (0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_CHECK_CTXT_ERR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c = bcl_context(); if (BC_ERR(c == NULL)) { return BCL_ERROR_INVALID_CONTEXT; } } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_CHECK_CTXT_ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c = bcl_context(); assert(c != NULL); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_CHECK_NUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (BC_ERR((n).i &gt;= (c)-&gt;nums.len)) { if ((n).i &gt; 0 - (size_t) BCL_ERROR_NELEMS) return (n); else { BclNumber n_num; n_num.i = 0 - (size_t) BCL_ERROR_INVALID_NUM; return n_num; } } } while (0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_CHECK_NUM_ERR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (BC_ERR((n).i &gt;= (c)-&gt;nums.len)) { if ((n).i &gt; 0 - (size_t) BCL_ERROR_NELEMS) return (BclError) (0 - (n).i); else return BCL_ERROR_INVALID_NUM; } } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((BcNum*) bc_vec_item(&amp;(c)-&gt;nums, (n).i))</cpp:value></cpp:define>





<function_decl><type><name>void</name></type> <name>bcl_num_destruct</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <name>BclCtxt</name> <block>{


<decl_stmt><decl><type><name>size_t</name></type> <name>scale</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>ibase</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>obase</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>nums</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcVec</name></type> <name>free_nums</name></decl>;</decl_stmt>

}</block></struct></type> <name>BclCtxt</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
