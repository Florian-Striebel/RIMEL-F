<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/vector.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_VECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VEC_INVALID_IDX</name></cpp:macro> <cpp:value>(SIZE_MAX)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VEC_START_CAP</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;5)</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>






<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcVecFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<struct_decl>struct <name>BcId</name>;</struct_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></cpp:if>


<typedef>typedef <type><name>uint32_t</name></type> <name>BcSize</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<typedef>typedef <type><name>uint16_t</name></type> <name>BcSize</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><enum>enum <name>BcDtorType</name> <block>{


<decl><name>BC_DTOR_NONE</name></decl>,


<decl><name>BC_DTOR_VEC</name></decl>,


<decl><name>BC_DTOR_NUM</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl><name>BC_DTOR_FUNC</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_DTOR_SLAB</name></decl>,


<decl><name>BC_DTOR_CONST</name></decl>,


<decl><name>BC_DTOR_RESULT</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<decl><name>BC_DTOR_HISTORY_STRING</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl><name>BC_DTOR_BCL_NUM</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></enum></type> <name>BcDtorType</name>;</typedef>


<typedef>typedef <type><struct>struct <name>BcVec</name> <block>{



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcSize</name></type> <name>size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcSize</name></type> <name>dtor</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcVec</name>;</typedef>







<function_decl><type><name>void</name></type> <name>bc_vec_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>esize</name></decl></parameter>, <parameter><decl><type><name>BcDtorType</name></type> <name>dtor</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_expand</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_vec_grow</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_npop</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_vec_npopAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_push</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_npush</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name><modifier>*</modifier></type> <name>bc_vec_pushEmpty</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_pushByte</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uchar</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_vec_pushIndex</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>bc_vec_pushAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_vec_string</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_vec_concat</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vec_empty</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>








<function_decl><type><name>void</name></type> <name>bc_vec_replaceAt</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><name>void</name><modifier>*</modifier></type> <name>bc_vec_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name><modifier>*</modifier></type> <name>bc_vec_item_rev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vec_clear</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vec_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>bool</name></type> <name>bc_map_insert</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>size_t</name></type> <name>bc_map_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>







<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bc_map_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_vec_pop</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_npop((v), 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_vec_popAll</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_npop((v), (v)-&gt;len))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_vec_top</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_item_rev((v), 0))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_map_init</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_init((v), sizeof(BcId), BC_DTOR_NONE))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcVecFree</name></type> <name><name>bc_vec_dtors</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SLAB_SIZE</name></cpp:macro> <cpp:value>(4096)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>BcSlab</name> <block>{


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcSlab</name>;</typedef>





<function_decl><type><name>void</name></type> <name>bc_slab_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_slabvec_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>char</name><modifier>*</modifier></type> <name>bc_slabvec_strdup</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>bc_slabvec_undo</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>void</name></type> <name>bc_slabvec_clear</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>bc_slabvec_print</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_slabvec_free</name></cpp:macro> <cpp:value>bc_vec_free</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_strcpy</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy(d, s)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_strcpy</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy_s(d, l, s)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
