<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/program.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_PROGRAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROGRAM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lang.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rand.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBALS_IBASE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBALS_OBASE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBALS_SCALE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_MAX_RAND</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBALS_LEN</name></cpp:macro> <cpp:value>(3 + BC_ENABLE_EXTRA_MATH)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BcProgram</name> <block>{


<decl_stmt><decl><type><name>BcBigDig</name></type> <name><name>globals</name><index>[<expr><name>BC_PROG_GLOBALS_LEN</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name><name>globals_v</name><index>[<expr><name>BC_PROG_GLOBALS_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcRNG</name></type> <name>rng</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcVec</name></type> <name>results</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>stack</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>consts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>strs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>fns</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>fn_map</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>vars</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>var_map</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>arrs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>arr_map</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>





<decl_stmt><decl><type><name>BcVec</name></type> <name>tail_calls</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcNum</name></type> <name>strmb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcNum</name></type> <name>last</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>BcDig</name></type> <name><name>strmb_num</name><index>[<expr><name>BC_NUM_BIGDIG_LOG10</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>BcProgram</name>;</typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_STACK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;len &gt;= ((size_t) (n)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBAL_PTR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_top(v))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_GLOBAL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((BcBigDig*) BC_PROG_GLOBAL_PTR(v)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_IBASE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;globals[BC_PROG_GLOBALS_IBASE])</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_OBASE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;globals[BC_PROG_GLOBALS_OBASE])</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_SCALE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;globals[BC_PROG_GLOBALS_SCALE])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_MAIN</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_READ</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_program_retire</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>nres</name></type></parameter>, <parameter><type><name>nops</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_npopAt(&amp;(p)-&gt;results, (nops), (p)-&gt;results.len - (nres + nops)))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_REQ_FUNCS</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLED</name></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_program_copyToVar</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>last</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_program_copyToVar(p, name, t)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_program_pushVar</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>bgn</name></type></parameter>, <parameter><type><name>pop</name></type></parameter>, <parameter><type><name>copy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_program_pushVar(p, code, bgn)</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_NO_STACK_CHECK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_STR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;num == NULL &amp;&amp; !(n)-&gt;cap)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_NUM</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r)-&gt;t != BC_RESULT_ARRAY &amp;&amp; (r)-&gt;t != BC_RESULT_STR &amp;&amp; !BC_PROG_STR(n))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_NUM</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r)-&gt;t != BC_RESULT_STR &amp;&amp; !BC_PROG_STR(n))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcProgramUnary</name>)<parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<function_decl><type><name>void</name></type> <name>bc_program_init</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function_decl><type><name>void</name></type> <name>bc_program_free</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name> <operator>&amp;&amp;</operator> <name>DC_ENABLED</name></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>bc_program_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_program_printInst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>bgn</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_program_printStackDebug</name><parameter_list>(<parameter><decl><type><name>BcProgram</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><name>size_t</name></type> <name>bc_program_search</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>var</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>size_t</name></type> <name>bc_program_addString</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fidx</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>size_t</name></type> <name>bc_program_insertFunc</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_program_reset</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_program_exec</name><parameter_list>(<parameter><decl><type><name>BcProgram</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_program_negate</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_program_not</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>






<function_decl><type><name>void</name></type> <name>bc_program_trunc</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcNumBinaryOp</name></type> <name><name>bc_program_ops</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcNumBinaryOpReq</name></type> <name><name>bc_program_opReqs</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcProgramUnary</name></type> <name><name>bc_program_unarys</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_program_exprs_name</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_program_stdin_name</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_program_ready_msg</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_program_ready_msg_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_program_esc_chars</name><index>[]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_program_esc_seqs</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_HAS_COMPUTED_GOTO</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_JUMP</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>ip</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { inst = (uchar) (code)[(ip)-&gt;idx++]; bc_file_printf(&amp;vm.ferr, "inst: %s\n", bc_inst_names[inst]); bc_file_flush(&amp;vm.ferr, bc_flush_none); goto *bc_program_inst_lbls[inst]; } while (0)</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_JUMP</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>ip</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { inst = (uchar) (code)[(ip)-&gt;idx++]; goto *bc_program_inst_lbls[inst]; } while (0)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_DIRECT_JUMP</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>goto lbl_ ##l;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBL</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lbl_ ##l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_FALLTHROUGH</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_C11</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS_SIZE</name></cpp:macro> <cpp:value>(sizeof(bc_program_inst_lbls) / sizeof(void*))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS_ASSERT</name></cpp:macro> <cpp:value>static_assert(BC_PROG_LBLS_SIZE == BC_INST_INVALID + 1,"bc_program_inst_lbls[] mismatches the instructions")</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS_ASSERT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_INC, &amp;&amp;lbl_BC_INST_DEC, &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_TRUNC, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_PLACES, &amp;&amp;lbl_BC_INST_LSHIFT, &amp;&amp;lbl_BC_INST_RSHIFT, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_POWER, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLACES, &amp;&amp;lbl_BC_INST_ASSIGN_LSHIFT, &amp;&amp;lbl_BC_INST_ASSIGN_RSHIFT, &amp;&amp;lbl_BC_INST_ASSIGN, &amp;&amp;lbl_BC_INST_ASSIGN_POWER_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLACES_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_LSHIFT_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_RSHIFT_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_LAST, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_SEED, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_IRAND, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_RAND, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_MAXRAND, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_GLOBAL_STACKS, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_PRINT_STR, &amp;&amp;lbl_BC_INST_JUMP, &amp;&amp;lbl_BC_INST_JUMP_ZERO, &amp;&amp;lbl_BC_INST_CALL, &amp;&amp;lbl_BC_INST_RET, &amp;&amp;lbl_BC_INST_RET0, &amp;&amp;lbl_BC_INST_RET_VOID, &amp;&amp;lbl_BC_INST_HALT, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_POP_EXEC, &amp;&amp;lbl_BC_INST_EXECUTE, &amp;&amp;lbl_BC_INST_EXEC_COND, &amp;&amp;lbl_BC_INST_PRINT_STACK, &amp;&amp;lbl_BC_INST_CLEAR_STACK, &amp;&amp;lbl_BC_INST_REG_STACK_LEN, &amp;&amp;lbl_BC_INST_STACK_LEN, &amp;&amp;lbl_BC_INST_DUPLICATE, &amp;&amp;lbl_BC_INST_LOAD, &amp;&amp;lbl_BC_INST_PUSH_VAR, &amp;&amp;lbl_BC_INST_PUSH_TO_VAR, &amp;&amp;lbl_BC_INST_QUIT, &amp;&amp;lbl_BC_INST_NQUIT, &amp;&amp;lbl_BC_INST_EXEC_STACK_LEN, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>





































































































<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_INC, &amp;&amp;lbl_BC_INST_DEC, &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_POWER, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS, &amp;&amp;lbl_BC_INST_ASSIGN, &amp;&amp;lbl_BC_INST_ASSIGN_POWER_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_LAST, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_GLOBAL_STACKS, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_PRINT_STR, &amp;&amp;lbl_BC_INST_JUMP, &amp;&amp;lbl_BC_INST_JUMP_ZERO, &amp;&amp;lbl_BC_INST_CALL, &amp;&amp;lbl_BC_INST_RET, &amp;&amp;lbl_BC_INST_RET0, &amp;&amp;lbl_BC_INST_RET_VOID, &amp;&amp;lbl_BC_INST_HALT, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_POP_EXEC, &amp;&amp;lbl_BC_INST_EXECUTE, &amp;&amp;lbl_BC_INST_EXEC_COND, &amp;&amp;lbl_BC_INST_PRINT_STACK, &amp;&amp;lbl_BC_INST_CLEAR_STACK, &amp;&amp;lbl_BC_INST_REG_STACK_LEN, &amp;&amp;lbl_BC_INST_STACK_LEN, &amp;&amp;lbl_BC_INST_DUPLICATE, &amp;&amp;lbl_BC_INST_LOAD, &amp;&amp;lbl_BC_INST_PUSH_VAR, &amp;&amp;lbl_BC_INST_PUSH_TO_VAR, &amp;&amp;lbl_BC_INST_QUIT, &amp;&amp;lbl_BC_INST_NQUIT, &amp;&amp;lbl_BC_INST_EXEC_STACK_LEN, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>























































































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_INC, &amp;&amp;lbl_BC_INST_DEC, &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_TRUNC, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_PLACES, &amp;&amp;lbl_BC_INST_LSHIFT, &amp;&amp;lbl_BC_INST_RSHIFT, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_POWER, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLACES, &amp;&amp;lbl_BC_INST_ASSIGN_LSHIFT, &amp;&amp;lbl_BC_INST_ASSIGN_RSHIFT, &amp;&amp;lbl_BC_INST_ASSIGN, &amp;&amp;lbl_BC_INST_ASSIGN_POWER_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLACES_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_LSHIFT_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_RSHIFT_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_LAST, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_SEED, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_IRAND, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_RAND, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_MAXRAND, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_GLOBAL_STACKS, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_PRINT_STR, &amp;&amp;lbl_BC_INST_JUMP, &amp;&amp;lbl_BC_INST_JUMP_ZERO, &amp;&amp;lbl_BC_INST_CALL, &amp;&amp;lbl_BC_INST_RET, &amp;&amp;lbl_BC_INST_RET0, &amp;&amp;lbl_BC_INST_RET_VOID, &amp;&amp;lbl_BC_INST_HALT, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>























































































<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_INC, &amp;&amp;lbl_BC_INST_DEC, &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_POWER, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS, &amp;&amp;lbl_BC_INST_ASSIGN, &amp;&amp;lbl_BC_INST_ASSIGN_POWER_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MULTIPLY_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_DIVIDE_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MODULUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_PLUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_MINUS_NO_VAL, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_LAST, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_GLOBAL_STACKS, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_PRINT_STR, &amp;&amp;lbl_BC_INST_JUMP, &amp;&amp;lbl_BC_INST_JUMP_ZERO, &amp;&amp;lbl_BC_INST_CALL, &amp;&amp;lbl_BC_INST_RET, &amp;&amp;lbl_BC_INST_RET0, &amp;&amp;lbl_BC_INST_RET_VOID, &amp;&amp;lbl_BC_INST_HALT, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>









































































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_TRUNC, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_PLACES, &amp;&amp;lbl_BC_INST_LSHIFT, &amp;&amp;lbl_BC_INST_RSHIFT, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_SEED, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_IRAND, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_RAND, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_MAXRAND, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_POP_EXEC, &amp;&amp;lbl_BC_INST_EXECUTE, &amp;&amp;lbl_BC_INST_EXEC_COND, &amp;&amp;lbl_BC_INST_PRINT_STACK, &amp;&amp;lbl_BC_INST_CLEAR_STACK, &amp;&amp;lbl_BC_INST_REG_STACK_LEN, &amp;&amp;lbl_BC_INST_STACK_LEN, &amp;&amp;lbl_BC_INST_DUPLICATE, &amp;&amp;lbl_BC_INST_LOAD, &amp;&amp;lbl_BC_INST_PUSH_VAR, &amp;&amp;lbl_BC_INST_PUSH_TO_VAR, &amp;&amp;lbl_BC_INST_QUIT, &amp;&amp;lbl_BC_INST_NQUIT, &amp;&amp;lbl_BC_INST_EXEC_STACK_LEN, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>






































































<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro> <cpp:value>static const void* const bc_program_inst_lbls[] = { &amp;&amp;lbl_BC_INST_NEG, &amp;&amp;lbl_BC_INST_BOOL_NOT, &amp;&amp;lbl_BC_INST_POWER, &amp;&amp;lbl_BC_INST_MULTIPLY, &amp;&amp;lbl_BC_INST_DIVIDE, &amp;&amp;lbl_BC_INST_MODULUS, &amp;&amp;lbl_BC_INST_PLUS, &amp;&amp;lbl_BC_INST_MINUS, &amp;&amp;lbl_BC_INST_REL_EQ, &amp;&amp;lbl_BC_INST_REL_LE, &amp;&amp;lbl_BC_INST_REL_GE, &amp;&amp;lbl_BC_INST_REL_NE, &amp;&amp;lbl_BC_INST_REL_LT, &amp;&amp;lbl_BC_INST_REL_GT, &amp;&amp;lbl_BC_INST_BOOL_OR, &amp;&amp;lbl_BC_INST_BOOL_AND, &amp;&amp;lbl_BC_INST_ASSIGN_NO_VAL, &amp;&amp;lbl_BC_INST_NUM, &amp;&amp;lbl_BC_INST_VAR, &amp;&amp;lbl_BC_INST_ARRAY_ELEM, &amp;&amp;lbl_BC_INST_ARRAY, &amp;&amp;lbl_BC_INST_ZERO, &amp;&amp;lbl_BC_INST_ONE, &amp;&amp;lbl_BC_INST_IBASE, &amp;&amp;lbl_BC_INST_OBASE, &amp;&amp;lbl_BC_INST_SCALE, &amp;&amp;lbl_BC_INST_LENGTH, &amp;&amp;lbl_BC_INST_SCALE_FUNC, &amp;&amp;lbl_BC_INST_SQRT, &amp;&amp;lbl_BC_INST_ABS, &amp;&amp;lbl_BC_INST_ASCIIFY, &amp;&amp;lbl_BC_INST_READ, &amp;&amp;lbl_BC_INST_MAXIBASE, &amp;&amp;lbl_BC_INST_MAXOBASE, &amp;&amp;lbl_BC_INST_MAXSCALE, &amp;&amp;lbl_BC_INST_LINE_LENGTH, &amp;&amp;lbl_BC_INST_LEADING_ZERO, &amp;&amp;lbl_BC_INST_PRINT, &amp;&amp;lbl_BC_INST_PRINT_POP, &amp;&amp;lbl_BC_INST_STR, &amp;&amp;lbl_BC_INST_POP, &amp;&amp;lbl_BC_INST_SWAP, &amp;&amp;lbl_BC_INST_MODEXP, &amp;&amp;lbl_BC_INST_DIVMOD, &amp;&amp;lbl_BC_INST_PRINT_STREAM, &amp;&amp;lbl_BC_INST_POP_EXEC, &amp;&amp;lbl_BC_INST_EXECUTE, &amp;&amp;lbl_BC_INST_EXEC_COND, &amp;&amp;lbl_BC_INST_PRINT_STACK, &amp;&amp;lbl_BC_INST_CLEAR_STACK, &amp;&amp;lbl_BC_INST_REG_STACK_LEN, &amp;&amp;lbl_BC_INST_STACK_LEN, &amp;&amp;lbl_BC_INST_DUPLICATE, &amp;&amp;lbl_BC_INST_LOAD, &amp;&amp;lbl_BC_INST_PUSH_VAR, &amp;&amp;lbl_BC_INST_PUSH_TO_VAR, &amp;&amp;lbl_BC_INST_QUIT, &amp;&amp;lbl_BC_INST_NQUIT, &amp;&amp;lbl_BC_INST_EXEC_STACK_LEN, &amp;&amp;lbl_BC_INST_INVALID, }</cpp:value></cpp:define>






























































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_JUMP</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>ip</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>break</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_DIRECT_JUMP</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBL</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_FALLTHROUGH</name></cpp:macro> <cpp:value>BC_FALLTHROUGH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROG_LBLS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
