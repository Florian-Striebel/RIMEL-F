<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/vm.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_VM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_NLS</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> NLS is not supported on Windows.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nl_types.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;history.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bc.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;file.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>DC_ENABLED</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Must define BC_ENABLED, DC_ENABLED, or both</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHAR_BIT</name> <operator>&lt;</operator> <literal type="number">6</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> CHAR_BIT must be at least 6.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_NLS</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAINEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAINEXEC</name></cpp:macro> <cpp:value>bc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXECPREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECPREFIX</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXECPREFIX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_STR</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#V</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_STR2</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GEN_STR(V)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VERSION</name></cpp:macro> <cpp:value>GEN_STR2(VERSION)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAINEXEC</name></cpp:macro> <cpp:value>GEN_STR2(MAINEXEC)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BUILD_TYPE</name></cpp:macro> <cpp:value>GEN_STR2(BUILD_TYPE)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_EXECPREFIX</name></cpp:macro> <cpp:value>GEN_STR2(EXECPREFIX)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_EXECPREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_FLAG_X</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_W</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_S</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_L</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_G</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;4)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_Q</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;5)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_I</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;6)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_P</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;7)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_R</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;8)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_Z</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;9)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_TTYIN</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_TTY</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;11)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_SIGINT</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;12)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FLAG_EXPR_EXIT</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;13)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_TTYIN</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_TTYIN)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_TTY</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_TTY)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIGINT</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_SIGINT)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_S</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_S)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_W</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_W)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_L</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_L)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_G</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_G)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_X</name></cpp:macro> <cpp:value>(vm.flags &amp; DC_FLAG_X)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_I</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_I)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_P</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_P)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_R</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_R)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_Z</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_Z)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_EXPR_EXIT</name></cpp:macro> <cpp:value>(vm.flags &amp; BC_FLAG_EXPR_EXIT)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_POSIX</name></cpp:macro> <cpp:value>(BC_S || BC_W)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_BC</name></cpp:macro> <cpp:value>(vm.name[0] != 'd')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_DC</name></cpp:macro> <cpp:value>(vm.name[0] == 'd')</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_BC</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_DC</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_POSIX</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_BC</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_IS_DC</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PROMPT</name></cpp:macro> <cpp:value>(BC_P)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_Z</name></cpp:macro> <cpp:value>(vm.leading_zeroes)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_OBASE</name></cpp:macro> <cpp:value>((BcBigDig) (BC_BASE_POW))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_DIM</name></cpp:macro> <cpp:value>((BcBigDig) (SIZE_MAX - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_SCALE</name></cpp:macro> <cpp:value>((BcBigDig) (BC_NUM_BIGDIG_MAX - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_STRING</name></cpp:macro> <cpp:value>((BcBigDig) (BC_NUM_BIGDIG_MAX - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_NAME</name></cpp:macro> <cpp:value>BC_MAX_STRING</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_NUM</name></cpp:macro> <cpp:value>BC_MAX_SCALE</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_RAND</name></cpp:macro> <cpp:value>((BcBigDig) (((BcRand) 0) - 1))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_EXP</name></cpp:macro> <cpp:value>((ulong) (BC_NUM_BIGDIG_MAX))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MAX_VARS</name></cpp:macro> <cpp:value>((ulong) (SIZE_MAX - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_BUF_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_STDOUT_BUF_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_STDERR_BUF_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_STDIN_BUF_SIZE</name></cpp:macro> <cpp:value>(BC_VM_STDERR_BUF_SIZE - 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_MAX_TEMPS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_ONE_CAP</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_SAFE_RESULT</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r)-&gt;t &gt;= BC_RESULT_TEMP)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_INVALID_CATALOG</name></cpp:macro> <cpp:value>((nl_catd) -1)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_VM_MUL_OVERFLOW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r) &gt;= SIZE_MAX || ((a) != 0 &amp;&amp; (r) / (a) != (b)))</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>BcVm</name> <block>{





<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>status</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>sig_pop</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcParse</name></type> <name>prs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcProgram</name></type> <name>prog</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>line_buf</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcVec</name></type> <name>buffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcParse</name></type> <name>read_prs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>read_buf</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>BcVec</name></type> <name>jmp_bufs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>temps_len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcVec</name></type> <name>ctxts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>out</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcRNG</name></type> <name>rng</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BclError</name></type> <name>err</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>abrt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>leading_zeroes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>refs</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>running</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sigmsg</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>sig_lock</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>sig</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<decl_stmt><decl><type><name>uchar</name></type> <name>siglen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uchar</name></type> <name>read_ret</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint16_t</name></type> <name>nchars</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>line_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>no_exprs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>exit_exprs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>is_stdin</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>



<decl_stmt><decl><type><name>bool</name></type> <name>no_redefine</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name><name>maxes</name><index>[<expr><name>BC_PROG_GLOBALS_LEN</name> <operator>+</operator> <name>BC_ENABLE_EXTRA_MATH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcVec</name></type> <name>files</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>exprs</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcHistory</name></type> <name>history</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcLexNext</name></type> <name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcParseParse</name></type> <name>parse</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcParseExpr</name></type> <name>expr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_header</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>err_ids</name><index>[<expr><name>BC_ERR_IDX_NELEMS</name> <operator>+</operator> <name>BC_ENABLED</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>err_msgs</name><index>[<expr><name>BC_ERR_NELEMS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name>last_base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name>last_pow</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name>last_exp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name>last_rem</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env_args_buffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>env_args</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcNum</name></type> <name>zero</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcNum</name></type> <name>one</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcNum</name></type> <name>max</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcNum</name></type> <name>max2</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcDig</name></type> <name><name>max_num</name><index>[<expr><name>BC_NUM_BIGDIG_LOG10</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcDig</name></type> <name><name>max2_num</name><index>[<expr><name>BC_NUM_BIGDIG_LOG10</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcDig</name></type> <name><name>one_num</name><index>[<expr><name>BC_VM_ONE_CAP</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>


<decl_stmt><decl><type><name>BcDig</name></type> <name><name>zero_num</name><index>[<expr><name>BC_VM_ONE_CAP</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcFile</name></type> <name>fout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcFile</name></type> <name>ferr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_NLS</name></expr></cpp:if>


<decl_stmt><decl><type><name>nl_catd</name></type> <name>catalog</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcVec</name></type> <name>main_const_slab</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>main_slabs</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcVec</name></type> <name>other_slabs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>



<decl_stmt><decl><type><name>bool</name></type> <name><name>redefined_kws</name><index>[<expr><name>BC_LEX_NKWS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>


<decl_stmt><decl><type><name>size_t</name></type> <name>func_depth</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>BcVm</name>;</typedef>





<function_decl><type><name>void</name></type> <name>bc_vm_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>help</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_vm_boot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vm_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>bc_vm_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vm_addTemp</name><parameter_list>(<parameter><decl><type><name>BcDig</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>BcDig</name><modifier>*</modifier></type> <name>bc_vm_takeTemp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>bc_vm_freeTemps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_HISTORY</name></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_vm_putchar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bc_vm_putchar(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>void</name></type> <name>bc_vm_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_vm_putchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>BcFlushType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>size_t</name></type> <name>bc_vm_arraySize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>size_t</name></type> <name>bc_vm_growSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name><modifier>*</modifier></type> <name>bc_vm_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name><modifier>*</modifier></type> <name>bc_vm_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>char</name><modifier>*</modifier></type> <name>bc_vm_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>bc_vm_readLine</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_pledge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>promises</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>execpromises</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>char</name><modifier>*</modifier></type> <name>bc_vm_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>var</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vm_getenvFree</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>bc_vm_jmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function_decl><type><name>void</name></type> <name>bc_vm_jmp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>







<function_decl><type><name>void</name></type> <name>bc_vm_handleError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_vm_fatalError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>bc_vm_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>








<function_decl><type><name>void</name></type> <name>bc_vm_handleError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_MEMCHECK</name></expr></cpp:if>
<function_decl><type><name>BC_NORETURN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>void</name></type> <name>bc_vm_fatalError</name><parameter_list>(<parameter><decl><type><name>BcErr</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>bc_vm_atexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_copyright</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bc_err_line</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bc_err_func_header</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bc_errs</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uchar</name></type> <name><name>bc_err_ids</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>bc_err_msgs</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_pledge_start</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_HISTORY</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_pledge_end_history</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_pledge_end</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>BcVm</name></type> <name>vm</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>output_bufs</name><index>[<expr><name>BC_VM_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
