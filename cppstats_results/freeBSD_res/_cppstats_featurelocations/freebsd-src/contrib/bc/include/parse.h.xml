<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/parse.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_PARSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lang.h&gt;</cpp:file></cpp:include>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_REL</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_PRINT</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NOCALL</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NOREAD</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;3)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_ARRAY</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_NEEDVAL</name></cpp:macro> <cpp:value>(UINTMAX_C(1)&lt;&lt;5)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_IS_INITED</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>prg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;prog == (prg))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_CAN_PARSE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p).l.t != BC_LEX_EOF &amp;&amp; (p).l.t != BC_LEX_KW_DEFINE)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_PARSE_CAN_PARSE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p).l.t != BC_LEX_EOF)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_parse_push</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_pushByte(&amp;(p)-&gt;func-&gt;code, (uchar) (i)))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_parse_pushIndex</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vec_pushIndex(&amp;(p)-&gt;func-&gt;code, (idx)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_parse_err</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), (p)-&gt;l.line))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_parse_verr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), (p)-&gt;l.line, __VA_ARGS__))</cpp:value></cpp:define>



<struct_decl>struct <name>BcParse</name>;</struct_decl>
<struct_decl>struct <name>BcProgram</name>;</struct_decl>





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcParseParse</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BcParse</name></name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcParseExpr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BcParse</name></name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <name>BcParse</name> <block>{


<decl_stmt><decl><type><name>BcLex</name></type> <name>l</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>



<decl_stmt><decl><type><name>BcVec</name></type> <name>flags</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BcVec</name></type> <name>exits</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BcVec</name></type> <name>conds</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>BcVec</name></type> <name>ops</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>BcVec</name></type> <name>buf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>struct</name> <name>BcProgram</name></name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>fidx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl_stmt><decl><type><name>bool</name></type> <name>auto_part</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>BcParse</name>;</typedef>







<function_decl><type><name>void</name></type> <name>bc_parse_init</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BcProgram</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_parse_free</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_parse_reset</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_parse_addString</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_parse_number</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_parse_updateFunc</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fidx</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_parse_pushName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcParse</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>var</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_parse_text</name><parameter_list>(<parameter><decl><type><name>BcParse</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_stdin</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_parse_zero</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_parse_one</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
