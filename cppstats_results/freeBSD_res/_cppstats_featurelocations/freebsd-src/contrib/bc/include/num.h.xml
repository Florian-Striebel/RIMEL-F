<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/num.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_NUM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_EXTRA_MATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_EXTRA_MATH</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BASE</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ulong</name>;</typedef>



<typedef>typedef <type><name>BclBigDig</name></type> <name>BcBigDig</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_BIGDIG_MAX</name></cpp:macro> <cpp:value>((BcBigDig) UINT64_MAX)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BASE_DIGS</name></cpp:macro> <cpp:value>(9)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BASE_POW</name></cpp:macro> <cpp:value>(1000000000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_BIGDIG_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>


<typedef>typedef <type><name>int_least32_t</name></type> <name>BcDig</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_BIGDIG_MAX</name></cpp:macro> <cpp:value>((BcBigDig) UINT32_MAX)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BASE_DIGS</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_BASE_POW</name></cpp:macro> <cpp:value>(10000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_BIGDIG_C</name></cpp:macro> <cpp:value>UINT32_C</cpp:value></cpp:define>


<typedef>typedef <type><name>int_least16_t</name></type> <name>BcDig</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:error>#<cpp:directive>error</cpp:directive> BC_LONG_BIT must be at least 32</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_DEF_SIZE</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>BcNum</name> <block>{




<decl_stmt><decl><type><name>BcDig</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>num</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>rdx</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>scale</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcNum</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<struct_decl>struct <name>BcRNG</name>;</struct_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_MIN_BASE</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C(2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_MAX_POSIX_IBASE</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C(16))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_MAX_IBASE</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C(36))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_MAX_LBASE</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C('Z' + BC_BASE + 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_PRINT_WIDTH</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C(69))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_STREAM_BASE</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_NUM_KARATSUBA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_KARATSUBA_LEN</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_C(32))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BC_NUM_KARATSUBA_LEN</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> BC_NUM_KARATSUBA_LEN must be at least 16.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_BIGDIG_LOG10</name></cpp:macro> <cpp:value>(BC_NUM_DEF_SIZE)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NONZERO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;len)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_ZERO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!BC_NUM_NONZERO(n))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_ONE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;len == 1 &amp;&amp; (n)-&gt;rdx == 0 &amp;&amp; (n)-&gt;num[0] == 1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NUM_LETTER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) - 'A' + BC_BASE)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_KARATSUBA_ALLOCS</name></cpp:macro> <cpp:value>(6)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_ROUND_POW</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_growSize((s), BC_BASE_DIGS - 1))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_NUM_ROUND_POW(s) / BC_BASE_DIGS)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_VAL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx &gt;&gt; 1)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_VAL_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n).rdx &gt;&gt; 1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx = (((v) &lt;&lt; 1) | ((n)-&gt;rdx &amp; (BcBigDig) 1)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_SET_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n).rdx = (((v) &lt;&lt; 1) | ((n).rdx &amp; (BcBigDig) 1)))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_SET_NEG</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>neg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx = (((v) &lt;&lt; 1) | (neg)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_VALID</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BC_NUM_ZERO(n) || BC_NUM_RDX_VAL(n) * BC_BASE_DIGS &gt;= (n)-&gt;scale)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_RDX_VALID_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((!(n).len) || BC_NUM_RDX_VAL_NP(n) * BC_BASE_DIGS &gt;= (n).scale)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx &amp; ((BcBigDig) 1))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n).rdx &amp; ((BcBigDig) 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_CLR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx &amp;= ~((BcBigDig) 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_CLR_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n).rdx &amp;= ~((BcBigDig) 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx |= ((BcBigDig) 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_TGL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;rdx ^= ((BcBigDig) 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_TGL_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n).rdx ^= ((BcBigDig) 1))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_VAL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n)-&gt;rdx &amp; ~((BcBigDig) 1)) | (v))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_NEG_VAL_NP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n).rdx &amp; ~((BcBigDig) 1)) | (v))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_SIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * sizeof(BcDig))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s = %lu\n", #x, (unsigned long)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_NUM</name></cpp:macro> <cpp:value>bc_num_dump</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DUMP_NUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NUM_PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcNumBinaryOp</name>)<parameter_list>(<parameter><decl><type><name>BcNum</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl></typedef>










<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcNumBinOp</name>)<parameter_list>(<parameter><decl><type><name>BcNum</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl></typedef>











<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>BcNumBinaryOpReq</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl></typedef>












<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcNumDigitOp</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rdx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bslash</name></decl></parameter>)</parameter_list>;</function_decl></typedef>








<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BcNumShiftAddOp</name>)<parameter_list>(<parameter><decl><type><name>BcDig</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcDig</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<function_decl><type><name>void</name></type> <name>bc_num_init</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_num_setup</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BcDig</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_copy</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_createCopy</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_createFromBigdig</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BcBigDig</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_num_clear</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_num_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>size_t</name></type> <name>bc_num_scale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>size_t</name></type> <name>bc_num_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>BcBigDig</name></type> <name>bc_num_bigdig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>BcBigDig</name></type> <name>bc_num_bigdig2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_bigdig2num</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BcBigDig</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>








<function_decl><type><name>void</name></type> <name>bc_num_irand</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>BcRNG</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>rng</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_num_rng</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BcRNG</name></name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_num_createFromRNG</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BcRNG</name></name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function_decl><type><name>void</name></type> <name>bc_num_add</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_sub</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_mul</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_div</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_mod</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_pow</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>








<function_decl><type><name>void</name></type> <name>bc_num_places</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_lshift</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_rshift</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>void</name></type> <name>bc_num_sqrt</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_num_divmod</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>size_t</name></type> <name>bc_num_addReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>size_t</name></type> <name>bc_num_mulReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>size_t</name></type> <name>bc_num_divReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>size_t</name></type> <name>bc_num_powReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>










<function_decl><type><name>size_t</name></type> <name>bc_num_placesReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>void</name></type> <name>bc_num_truncate</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_extend</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_shiftRight</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>places</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>ssize_t</name></type> <name>bc_num_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_modexp</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_num_zero</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_num_one</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ssize_t</name></type> <name>bc_num_cmpZero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>BC_ENABLE_LIBRARY</name></expr></cpp:if>









<function_decl><type><name>bool</name></type> <name>bc_num_strValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>void</name></type> <name>bc_num_parse</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>BcBigDig</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_num_print</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BcBigDig</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>newline</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>bc_num_stream</name><parameter_list>(<parameter><decl><type><name>BcNum</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>







<function_decl><type><name>void</name></type> <name>bc_num_printDebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>emptyline</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_printDigs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcDig</name><modifier>*</modifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>emptyline</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_num_printWithDigs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>emptyline</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_num_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcNum</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_num_hex_digits</name><index>[]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcBigDig</name></type> <name><name>bc_num_pow10</name><index>[<expr><name>BC_BASE_DIGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcDig</name></type> <name><name>bc_num_bigdigMax</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_num_bigdigMax_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcDig</name></type> <name><name>bc_num_bigdigMax2</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bc_num_bigdigMax2_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
