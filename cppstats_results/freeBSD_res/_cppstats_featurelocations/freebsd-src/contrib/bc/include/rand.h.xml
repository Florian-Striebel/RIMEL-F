<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/rand.h">








































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_RAND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_USE_FREE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_USE_FREE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_USE_FREE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <function_decl><type><name>ulong</name></type> (<modifier>*</modifier><name>BcRandUlong</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_LONG_BIT</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BC_RAND_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_RAND_BUILTIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BUILTIN</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_RAND_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BUILTIN</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BUILTIN</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>uint64_t</name></type> <name>BcRand</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROTC</name></cpp:macro> <cpp:value>(63)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_BUILTIN</name></expr></cpp:if>


<typedef>typedef <type><name>__uint128_t</name></type> <name>BcRandState</name>;</typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) * ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) + ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) * ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) + ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_NOTMODIFIED</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((r)-&gt;inc &amp; 1UL) == 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ZERO</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(r)-&gt;state)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CONSTANT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((BcRandState) (h)) &lt;&lt; 64) + (BcRandState) (l))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_TRUNC</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t) (s))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CHOP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t) ((s) &gt;&gt; 64UL))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROTAMT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int) ((s) &gt;&gt; 122UL))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<typedef>typedef <type><struct>struct <name>BcRandState</name> <block>{


<decl_stmt><decl><type><name>uint_fast64_t</name></type> <name>lo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint_fast64_t</name></type> <name>hi</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcRandState</name>;</typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_rand_multiply((a), (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_rand_addition((a), (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_rand_multiply2((a), (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_rand_addition2((a), (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_NOTMODIFIED</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((r)-&gt;inc.lo &amp; 1) == 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ZERO</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(r)-&gt;state.lo &amp;&amp; !(r)-&gt;state.hi)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CONSTANT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .lo = (l), .hi = (h) }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_TRUNC</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s).lo)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CHOP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s).hi)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROTAMT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int) ((s).hi &gt;&gt; 58UL))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BOTTOM32</name></cpp:macro> <cpp:value>(((uint_fast64_t) 0xffffffffULL))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_TRUNC32</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &amp; BC_RAND_BOTTOM32)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CHOP32</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &gt;&gt; 32)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_MULTIPLIER</name></cpp:macro> <cpp:value>BC_RAND_CONSTANT(2549297995355413924ULL, 4865540595714422341ULL)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_FOLD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((BcRand) (BC_RAND_CHOP(s) ^ BC_RAND_TRUNC(s)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_RAND_BUILTIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BUILTIN</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>


<typedef>typedef <type><name>uint32_t</name></type> <name>BcRand</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROTC</name></cpp:macro> <cpp:value>(31)</cpp:value></cpp:define>


<typedef>typedef <type><name>uint_fast64_t</name></type> <name>BcRandState</name>;</typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) * ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) + ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_mul2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) * ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_rand_add2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((BcRandState) (a)) + ((BcRandState) (b)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_NOTMODIFIED</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((r)-&gt;inc &amp; 1UL) == 0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ZERO</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(r)-&gt;state)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CONSTANT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UINT64_C(n)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_MULTIPLIER</name></cpp:macro> <cpp:value>BC_RAND_CONSTANT(6364136223846793005)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_TRUNC</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t) (s))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_CHOP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t) ((s) &gt;&gt; 32UL))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROTAMT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int) ((s) &gt;&gt; 59UL))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_FOLD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((BcRand) ((((s) &gt;&gt; 18U) ^ (s)) &gt;&gt; 27U))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_ROT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((BcRand) (((v) &gt;&gt; (r)) | ((v) &lt;&lt; ((0 - (r)) &amp; BC_RAND_ROTC))))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_BITS</name></cpp:macro> <cpp:value>(sizeof(BcRand) * CHAR_BIT)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_STATE_BITS</name></cpp:macro> <cpp:value>(sizeof(BcRandState) * CHAR_BIT)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_NUM_SIZE</name></cpp:macro> <cpp:value>(BC_NUM_BIGDIG_LOG10 * 2 + 2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_RAND_SRAND_BITS</name></cpp:macro> <cpp:value>((1 &lt;&lt; CHAR_BIT) - 1)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>BcRNGData</name> <block>{


<decl_stmt><decl><type><name>BcRandState</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcRandState</name></type> <name>inc</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcRNGData</name>;</typedef>



<typedef>typedef <type><struct>struct <name>BcRNG</name> <block>{


<decl_stmt><decl><type><name>BcVec</name></type> <name>v</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcRNG</name>;</typedef>





<function_decl><type><name>void</name></type> <name>bc_rand_init</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_RAND_USE_FREE</name></expr></cpp:if>






<function_decl><type><name>void</name></type> <name>bc_rand_free</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>BcRand</name></type> <name>bc_rand_int</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>BcRand</name></type> <name>bc_rand_bounded</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRand</name></type> <name>bound</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_rand_seed</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>state2</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>ulong</name></type> <name>inc2</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_rand_push</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_rand_pop</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>bc_rand_getRands</name><parameter_list>(<parameter><decl><type><name>BcRNG</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>i1</name></decl></parameter>, <parameter><decl><type><name>BcRand</name> <modifier>*</modifier></type><name>i2</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_rand_srand</name><parameter_list>(<parameter><decl><type><name>BcRNGData</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BcRandState</name></type> <name>bc_rand_multiplier</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
