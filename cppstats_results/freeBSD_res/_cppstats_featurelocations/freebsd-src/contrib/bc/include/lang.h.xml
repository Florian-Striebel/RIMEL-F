<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/lang.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_LANG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LANG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;status.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;num.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><enum>enum <name>BcInst</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>



<decl><name>BC_INST_INC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BC_INST_DEC</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_NEG</name></decl>,


<decl><name>BC_INST_BOOL_NOT</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_TRUNC</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_POWER</name></decl>,
<decl><name>BC_INST_MULTIPLY</name></decl>,
<decl><name>BC_INST_DIVIDE</name></decl>,
<decl><name>BC_INST_MODULUS</name></decl>,
<decl><name>BC_INST_PLUS</name></decl>,
<decl><name>BC_INST_MINUS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_INST_PLACES</name></decl>,


<decl><name>BC_INST_LSHIFT</name></decl>,
<decl><name>BC_INST_RSHIFT</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_REL_EQ</name></decl>,
<decl><name>BC_INST_REL_LE</name></decl>,
<decl><name>BC_INST_REL_GE</name></decl>,
<decl><name>BC_INST_REL_NE</name></decl>,
<decl><name>BC_INST_REL_LT</name></decl>,
<decl><name>BC_INST_REL_GT</name></decl>,


<decl><name>BC_INST_BOOL_OR</name></decl>,
<decl><name>BC_INST_BOOL_AND</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<decl><name>BC_INST_ASSIGN_POWER</name></decl>,
<decl><name>BC_INST_ASSIGN_MULTIPLY</name></decl>,
<decl><name>BC_INST_ASSIGN_DIVIDE</name></decl>,
<decl><name>BC_INST_ASSIGN_MODULUS</name></decl>,
<decl><name>BC_INST_ASSIGN_PLUS</name></decl>,
<decl><name>BC_INST_ASSIGN_MINUS</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_ASSIGN_PLACES</name></decl>,
<decl><name>BC_INST_ASSIGN_LSHIFT</name></decl>,
<decl><name>BC_INST_ASSIGN_RSHIFT</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_ASSIGN</name></decl>,






<decl><name>BC_INST_ASSIGN_POWER_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_MULTIPLY_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_DIVIDE_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_MODULUS_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_PLUS_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_MINUS_NO_VAL</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_ASSIGN_PLACES_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_LSHIFT_NO_VAL</name></decl>,
<decl><name>BC_INST_ASSIGN_RSHIFT_NO_VAL</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_ASSIGN_NO_VAL</name></decl>,


<decl><name>BC_INST_NUM</name></decl>,


<decl><name>BC_INST_VAR</name></decl>,


<decl><name>BC_INST_ARRAY_ELEM</name></decl>,





<decl><name>BC_INST_ARRAY</name></decl>,




<decl><name>BC_INST_ZERO</name></decl>,
<decl><name>BC_INST_ONE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<decl><name>BC_INST_LAST</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_IBASE</name></decl>,
<decl><name>BC_INST_OBASE</name></decl>,
<decl><name>BC_INST_SCALE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_SEED</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_LENGTH</name></decl>,
<decl><name>BC_INST_SCALE_FUNC</name></decl>,
<decl><name>BC_INST_SQRT</name></decl>,
<decl><name>BC_INST_ABS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_IRAND</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_ASCIIFY</name></decl>,


<decl><name>BC_INST_READ</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_RAND</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_MAXIBASE</name></decl>,
<decl><name>BC_INST_MAXOBASE</name></decl>,
<decl><name>BC_INST_MAXSCALE</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>

<decl><name>BC_INST_MAXRAND</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_LINE_LENGTH</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_INST_GLOBAL_STACKS</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_LEADING_ZERO</name></decl>,













<decl><name>BC_INST_PRINT</name></decl>,
<decl><name>BC_INST_PRINT_POP</name></decl>,
<decl><name>BC_INST_STR</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>
<decl><name>BC_INST_PRINT_STR</name></decl>,


<decl><name>BC_INST_JUMP</name></decl>,



<decl><name>BC_INST_JUMP_ZERO</name></decl>,


<decl><name>BC_INST_CALL</name></decl>,


<decl><name>BC_INST_RET</name></decl>,


<decl><name>BC_INST_RET0</name></decl>,


<decl><name>BC_INST_RET_VOID</name></decl>,


<decl><name>BC_INST_HALT</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_POP</name></decl>,


<decl><name>BC_INST_SWAP</name></decl>,


<decl><name>BC_INST_MODEXP</name></decl>,


<decl><name>BC_INST_DIVMOD</name></decl>,


<decl><name>BC_INST_PRINT_STREAM</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DC_ENABLED</name></expr></cpp:if>


<decl><name>BC_INST_POP_EXEC</name></decl>,


<decl><name>BC_INST_EXECUTE</name></decl>,


<decl><name>BC_INST_EXEC_COND</name></decl>,


<decl><name>BC_INST_PRINT_STACK</name></decl>,


<decl><name>BC_INST_CLEAR_STACK</name></decl>,


<decl><name>BC_INST_REG_STACK_LEN</name></decl>,


<decl><name>BC_INST_STACK_LEN</name></decl>,



<decl><name>BC_INST_DUPLICATE</name></decl>,



<decl><name>BC_INST_LOAD</name></decl>,



<decl><name>BC_INST_PUSH_VAR</name></decl>,



<decl><name>BC_INST_PUSH_TO_VAR</name></decl>,


<decl><name>BC_INST_QUIT</name></decl>,


<decl><name>BC_INST_NQUIT</name></decl>,


<decl><name>BC_INST_EXEC_STACK_LEN</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_INST_INVALID</name></decl>,

}</block></enum></type> <name>BcInst</name>;</typedef>


<typedef>typedef <type><struct>struct <name>BcId</name> <block>{


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcId</name>;</typedef>


<typedef>typedef <type><struct>struct <name>BcLoc</name> <block>{


<decl_stmt><decl><type><name>size_t</name></type> <name>loc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcLoc</name>;</typedef>


<typedef>typedef <type><struct>struct <name>BcConst</name> <block>{


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcBigDig</name></type> <name>base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcNum</name></type> <name>num</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcConst</name>;</typedef>




<typedef>typedef <type><struct>struct <name>BcFunc</name> <block>{


<decl_stmt><decl><type><name>BcVec</name></type> <name>code</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>



<decl_stmt><decl><type><name>BcVec</name></type> <name>labels</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcVec</name></type> <name>autos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>nparams</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>BcVec</name></type> <name>strs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>consts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>voidfn</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>BcFunc</name>;</typedef>


<typedef>typedef <type><enum>enum <name>BcResultType</name> <block>{


<decl><name>BC_RESULT_VAR</name></decl>,


<decl><name>BC_RESULT_ARRAY_ELEM</name></decl>,



<decl><name>BC_RESULT_ARRAY</name></decl>,


<decl><name>BC_RESULT_STR</name></decl>,



<decl><name>BC_RESULT_TEMP</name></decl>,




<decl><name>BC_RESULT_ZERO</name></decl>,


<decl><name>BC_RESULT_ONE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_RESULT_LAST</name></decl>,


<decl><name>BC_RESULT_VOID</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_RESULT_IBASE</name></decl>,


<decl><name>BC_RESULT_OBASE</name></decl>,


<decl><name>BC_RESULT_SCALE</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_EXTRA_MATH</name></expr></cpp:if>


<decl><name>BC_RESULT_SEED</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></enum></type> <name>BcResultType</name>;</typedef>


<typedef>typedef <type><union>union <name>BcResultData</name> <block>{





<decl_stmt><decl><type><name>BcNum</name></type> <name>n</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcVec</name></type> <name>v</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BcLoc</name></type> <name>loc</name></decl>;</decl_stmt>

}</block></union></type> <name>BcResultData</name>;</typedef>


<typedef>typedef <type><struct>struct <name>BcResult</name> <block>{


<decl_stmt><decl><type><name>BcResultType</name></type> <name>t</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcResultData</name></type> <name>d</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcResult</name>;</typedef>



<typedef>typedef <type><struct>struct <name>BcInstPtr</name> <block>{


<decl_stmt><decl><type><name>size_t</name></type> <name>func</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcInstPtr</name>;</typedef>


<typedef>typedef <type><enum>enum <name>BcType</name> <block>{


<decl><name>BC_TYPE_VAR</name></decl>,


<decl><name>BC_TYPE_ARRAY</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_TYPE_REF</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></enum></type> <name>BcType</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>BcAuto</name> <block>{


<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BcType</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>BcAuto</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct_decl>struct <name>BcProgram</name>;</struct_decl>







<function_decl><type><name>void</name></type> <name>bc_func_init</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>bc_func_insert</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>BcProgram</name></name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>BcType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>bc_func_reset</name><parameter_list>(<parameter><decl><type><name>BcFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function_decl><type><name>void</name></type> <name>bc_func_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function_decl><type><name>void</name></type> <name>bc_array_init</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nums</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_array_copy</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcVec</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_string_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_const_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>constant</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>bc_result_clear</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>bc_result_copy</name><parameter_list>(<parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>BcResult</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>bc_result_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>bc_array_expand</name><parameter_list>(<parameter><decl><type><name>BcVec</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>bc_id_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BcId</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BcId</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_INST_IS_ASSIGN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) == BC_INST_ASSIGN || (i) == BC_INST_ASSIGN_NO_VAL)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_INST_USE_VAL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &lt;= BC_INST_ASSIGN)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_INST_IS_ASSIGN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) == BC_INST_ASSIGN_NO_VAL)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_INST_USE_VAL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>bc_inst_names</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_func_main</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bc_func_read</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
