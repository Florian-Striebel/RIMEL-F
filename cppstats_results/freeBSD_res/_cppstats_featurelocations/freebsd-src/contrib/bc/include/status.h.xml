<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/include/status.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_STATUS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_STATUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BC_TEST_OPENBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> On OpenBSD without _BSD_SOURCE</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLED</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_ENABLED</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_LIBRARY</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_AFL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AFL_HAVE_MANUAL_CONTROL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Must compile with afl-clang-fast or afl-clang-lto for fuzzing</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_ENABLE_MEMCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ENABLE_MEMCHECK</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNUSED</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) (e))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_LIKELY</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LIKELY</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(e)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_UNLIKELY</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNLIKELY</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(e)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BC_UNLIKELY(e)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NO_ERR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BC_LIKELY(s)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEBUG_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEBUG_CODE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201100L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdnoreturn.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NORETURN</name></cpp:macro> <cpp:value>_Noreturn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_C11</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NORETURN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_MUST_RETURN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_C11</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_UNREACHABLE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_COMPUTED_GOTO</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>fallthrough</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FALLTHROUGH</name></cpp:macro> <cpp:value>__attribute__((fallthrough));</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FALLTHROUGH</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_HAS_UNREACHABLE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_UNREACHABLE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__clang_major__</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_HAS_UNREACHABLE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_UNREACHABLE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FALLTHROUGH</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FALLTHROUGH</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_HAS_UNREACHABLE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNREACHABLE</name></cpp:macro> <cpp:value>__builtin_unreachable();</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNREACHABLE</name></cpp:macro> <cpp:value>__assume(0);</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNREACHABLE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_HAS_COMPUTED_GOTO</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_COMPUTED_GOTO</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__clang_major__</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_HAS_COMPUTED_GOTO</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_COMPUTED_GOTO</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BC_NO_COMPUTED_GOTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BC_HAS_COMPUTED_GOTO</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_HAS_COMPUTED_GOTO</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>__SIZE_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINTMAX_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_C</name></cpp:macro> <cpp:value>__UINTMAX_C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINT32_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_C</name></cpp:macro> <cpp:value>__UINT32_C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINT_FAST32_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST32_MAX</name></cpp:macro> <cpp:value>__UINT_FAST32_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINT16_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_MAX</name></cpp:macro> <cpp:value>__UINT16_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIG_ATOMIC_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_MAX</name></cpp:macro> <cpp:value>__SIG_ATOMIC_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcl.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEFAULT_BANNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEFAULT_BANNER</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEFAULT_SIGINT_RESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEFAULT_SIGINT_RESET</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEFAULT_TTY_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEFAULT_TTY_MODE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEFAULT_PROMPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEFAULT_PROMPT</name></cpp:macro> <cpp:value>BC_DEFAULT_TTY_MODE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BC_DEFAULT_EXPR_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_DEFAULT_EXPR_EXIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_DEFAULT_SIGINT_RESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEFAULT_SIGINT_RESET</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_DEFAULT_TTY_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEFAULT_TTY_MODE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_DEFAULT_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEFAULT_HISTORY</name></cpp:macro> <cpp:value>DC_DEFAULT_TTY_MODE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_DEFAULT_PROMPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEFAULT_PROMPT</name></cpp:macro> <cpp:value>DC_DEFAULT_TTY_MODE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DC_DEFAULT_EXPR_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEFAULT_EXPR_EXIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><enum>enum <name>BcStatus</name> <block>{


<decl><name>BC_STATUS_SUCCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>BC_STATUS_ERROR_MATH</name></decl>,


<decl><name>BC_STATUS_ERROR_PARSE</name></decl>,


<decl><name>BC_STATUS_ERROR_EXEC</name></decl>,


<decl><name>BC_STATUS_ERROR_FATAL</name></decl>,


<decl><name>BC_STATUS_EOF</name></decl>,


<decl><name>BC_STATUS_QUIT</name></decl>,

}</block></enum></type> <name>BcStatus</name>;</typedef>


<typedef>typedef <type><enum>enum <name>BcErr</name> <block>{




<decl><name>BC_ERR_MATH_NEGATIVE</name></decl>,


<decl><name>BC_ERR_MATH_NON_INTEGER</name></decl>,


<decl><name>BC_ERR_MATH_OVERFLOW</name></decl>,


<decl><name>BC_ERR_MATH_DIVIDE_BY_ZERO</name></decl>,




<decl><name>BC_ERR_FATAL_ALLOC_ERR</name></decl>,


<decl><name>BC_ERR_FATAL_IO_ERR</name></decl>,


<decl><name>BC_ERR_FATAL_FILE_ERR</name></decl>,


<decl><name>BC_ERR_FATAL_BIN_FILE</name></decl>,


<decl><name>BC_ERR_FATAL_PATH_DIR</name></decl>,


<decl><name>BC_ERR_FATAL_OPTION</name></decl>,


<decl><name>BC_ERR_FATAL_OPTION_NO_ARG</name></decl>,


<decl><name>BC_ERR_FATAL_OPTION_ARG</name></decl>,


<decl><name>BC_ERR_FATAL_ARG</name></decl>,




<decl><name>BC_ERR_EXEC_IBASE</name></decl>,


<decl><name>BC_ERR_EXEC_OBASE</name></decl>,


<decl><name>BC_ERR_EXEC_SCALE</name></decl>,


<decl><name>BC_ERR_EXEC_READ_EXPR</name></decl>,


<decl><name>BC_ERR_EXEC_REC_READ</name></decl>,


<decl><name>BC_ERR_EXEC_TYPE</name></decl>,


<decl><name>BC_ERR_EXEC_STACK</name></decl>,


<decl><name>BC_ERR_EXEC_STACK_REGISTER</name></decl>,


<decl><name>BC_ERR_EXEC_PARAMS</name></decl>,


<decl><name>BC_ERR_EXEC_UNDEF_FUNC</name></decl>,


<decl><name>BC_ERR_EXEC_VOID_VAL</name></decl>,




<decl><name>BC_ERR_PARSE_EOF</name></decl>,


<decl><name>BC_ERR_PARSE_CHAR</name></decl>,


<decl><name>BC_ERR_PARSE_STRING</name></decl>,


<decl><name>BC_ERR_PARSE_COMMENT</name></decl>,


<decl><name>BC_ERR_PARSE_TOKEN</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_ERR_PARSE_EXPR</name></decl>,


<decl><name>BC_ERR_PARSE_EMPTY_EXPR</name></decl>,


<decl><name>BC_ERR_PARSE_PRINT</name></decl>,


<decl><name>BC_ERR_PARSE_FUNC</name></decl>,


<decl><name>BC_ERR_PARSE_ASSIGN</name></decl>,


<decl><name>BC_ERR_PARSE_NO_AUTO</name></decl>,


<decl><name>BC_ERR_PARSE_DUP_LOCAL</name></decl>,


<decl><name>BC_ERR_PARSE_BLOCK</name></decl>,


<decl><name>BC_ERR_PARSE_RET_VOID</name></decl>,


<decl><name>BC_ERR_PARSE_REF_VAR</name></decl>,




<decl><name>BC_ERR_POSIX_NAME_LEN</name></decl>,


<decl><name>BC_ERR_POSIX_COMMENT</name></decl>,


<decl><name>BC_ERR_POSIX_KW</name></decl>,


<decl><name>BC_ERR_POSIX_DOT</name></decl>,


<decl><name>BC_ERR_POSIX_RET</name></decl>,


<decl><name>BC_ERR_POSIX_BOOL</name></decl>,


<decl><name>BC_ERR_POSIX_REL_POS</name></decl>,



<decl><name>BC_ERR_POSIX_MULTIREL</name></decl>,


<decl><name>BC_ERR_POSIX_FOR</name></decl>,



<decl><name>BC_ERR_POSIX_FUNC_AFTER_SEMICOLON</name></decl>,


<decl><name>BC_ERR_POSIX_EXP_NUM</name></decl>,


<decl><name>BC_ERR_POSIX_REF</name></decl>,


<decl><name>BC_ERR_POSIX_VOID</name></decl>,


<decl><name>BC_ERR_POSIX_BRACE</name></decl>,


<decl><name>BC_ERR_POSIX_EXPR_STRING</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl><name>BC_ERR_NELEMS</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<decl><name>BC_ERR_POSIX_START</name> <init>= <expr><name>BC_ERR_POSIX_NAME_LEN</name></expr></init></decl>,


<decl><name>BC_ERR_POSIX_END</name> <init>= <expr><name>BC_ERR_POSIX_EXPR_STRING</name></expr></init></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></enum></type> <name>BcErr</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_MATH</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_PARSE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_EXEC</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_FATAL</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_NELEMS</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLED</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_ERR_IDX_WARN</name></cpp:macro> <cpp:value>(BC_ERR_IDX_NELEMS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_JMP</name></cpp:macro> <cpp:value>bc_vm_jmp(__func__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_JMP</name></cpp:macro> <cpp:value>bc_vm_jmp()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_EXC</name></cpp:macro> <cpp:value>BC_UNLIKELY(vm.status != (sig_atomic_t) BC_STATUS_SUCCESS || vm.sig)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_NO_SIG_EXC</name></cpp:macro> <cpp:value>BC_LIKELY(vm.status == (sig_atomic_t) BC_STATUS_SUCCESS &amp;&amp; !vm.sig)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_ASSERT_LOCKED</name></cpp:macro> <cpp:value>do { assert(vm.sig_lock); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_ASSERT_NOT_LOCKED</name></cpp:macro> <cpp:value>do { assert(vm.sig_lock == 0); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_ASSERT_LOCKED</name></cpp:macro></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_ASSERT_NOT_LOCKED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_LOCK</name></cpp:macro> <cpp:value>do { BC_SIG_ASSERT_NOT_LOCKED; vm.sig_lock = 1; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_UNLOCK</name></cpp:macro> <cpp:value>do { BC_SIG_ASSERT_LOCKED; vm.sig_lock = 0; if (vm.sig) BC_JMP; } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_MAYLOCK</name></cpp:macro> <cpp:value>do { vm.sig_lock = 1; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_MAYUNLOCK</name></cpp:macro> <cpp:value>do { vm.sig_lock = 0; if (vm.sig) BC_JMP; } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_TRYLOCK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { v = vm.sig_lock; vm.sig_lock = 1; } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SIG_TRYUNLOCK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vm.sig_lock = (v); if (!(v) &amp;&amp; vm.sig) BC_JMP; } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SETJMP</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { sigjmp_buf sjb; BC_SIG_LOCK; bc_vec_grow(&amp;vm.jmp_bufs, 1); if (sigsetjmp(sjb, 0)) { assert(BC_SIG_EXC); goto l; } bc_vec_push(&amp;vm.jmp_bufs, &amp;sjb); BC_SIG_UNLOCK; } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_SETJMP_LOCKED</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { sigjmp_buf sjb; BC_SIG_ASSERT_LOCKED; if (sigsetjmp(sjb, 0)) { assert(BC_SIG_EXC); goto l; } bc_vec_push(&amp;vm.jmp_bufs, &amp;sjb); } while (0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LONGJMP_CONT</name></cpp:macro> <cpp:value>do { BC_SIG_ASSERT_LOCKED; if (!vm.sig_pop) bc_vec_pop(&amp;vm.jmp_bufs); vm.sig_lock = 0; if (BC_SIG_EXC) BC_JMP; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_UNSETJMP</name></cpp:macro> <cpp:value>do { BC_SIG_ASSERT_LOCKED; bc_vec_pop(&amp;vm.jmp_bufs); } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_LONGJMP_STOP</name></cpp:macro> <cpp:value>do { vm.sig_pop = 0; vm.sig = 0; } while (0)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_ENABLE_LIBRARY</name></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_error</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_err</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_verr</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_error</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), (l), __VA_ARGS__))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_err</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), 0))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bc_verr</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bc_vm_handleError((e), 0, __VA_ARGS__))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_STATUS_IS_ERROR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) &gt;= BC_STATUS_ERROR_MATH &amp;&amp; (s) &lt;= BC_STATUS_ERROR_FATAL)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BC_DEBUG_CODE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_ENTER</name></cpp:macro> <cpp:value>do { size_t bc_func_enter_i; for (bc_func_enter_i = 0; bc_func_enter_i &lt; vm.func_depth; ++bc_func_enter_i) { bc_file_puts(&amp;vm.ferr, bc_flush_none, " "); } vm.func_depth += 1; bc_file_printf(&amp;vm.ferr, "Entering %s\n", __func__); bc_file_flush(&amp;vm.ferr, bc_flush_none); } while (0);</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_EXIT</name></cpp:macro> <cpp:value>do { size_t bc_func_enter_i; vm.func_depth -= 1; for (bc_func_enter_i = 0; bc_func_enter_i &lt; vm.func_depth; ++bc_func_enter_i) { bc_file_puts(&amp;vm.ferr, bc_flush_none, " "); } bc_file_printf(&amp;vm.ferr, "Leaving %s\n", __func__); bc_file_flush(&amp;vm.ferr, bc_flush_none); } while (0);</cpp:value></cpp:define>











<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_ENTER</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_EXIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
