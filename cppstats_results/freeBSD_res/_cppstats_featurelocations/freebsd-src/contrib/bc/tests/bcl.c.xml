<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bc/tests/bcl.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcl.h&gt;</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name>BclError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>BCL_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BclError</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclContext</name></type> <name>ctxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclNumber</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n5</name></decl>, <decl><type ref="prev"/><name>n6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BclBigDig</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>bcl_abortOnFatalError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bcl_setAbortOnFatalError</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bcl_abortOnFatalError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>bcl_ctxt_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_pushContext</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>bcl_ctxt_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_pushContext</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_ctxt_setScale</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>bcl_ctxt_scale</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_ctxt_setIbase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>bcl_ctxt_ibase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bcl_ctxt_setObase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>bcl_ctxt_obase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bcl_ctxt_setIbase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>bcl_ctxt_ibase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bcl_ctxt_setObase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>bcl_ctxt_obase</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bcl_num_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>bcl_dup</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcl_copy</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n3</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"2938"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"-28390.9108273"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bcl_num_neg</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n3</name> <operator>=</operator> <call><name>bcl_add</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-25452.9108273"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"8937458902.2890347"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_divmod</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-351137.0060159482"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">".00000152374405414"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_sqrt</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"94538.1346457028"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_num_setScale</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"94538.13464570280000000000"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_num_setScale</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"94538"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_bigdig</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">94538</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_bigdig2num</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"94538"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_frand</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_lshift</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><call><name>bcl_bigdig2num</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n3</name> <operator>=</operator> <call><name>bcl_irand</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>bcl_ifrand</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>bcl_rand_seedWithNum</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_rand_seed2num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n5</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n6</name> <operator>=</operator> <call><name>bcl_modexp</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_num_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>bcl_leadingZeroes</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"0.01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"-0.01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n3</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"1.01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n4</name> <operator>=</operator> <call><name>bcl_parse</name><argument_list>(<argument><expr><literal type="string">"-1.01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><call><name>bcl_err</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">".01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_setLeadingZeroes</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bcl_leadingZeroes</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"0.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-0.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><call><name>bcl_dup</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_setLeadingZeroes</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bcl_leadingZeroes</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">".01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bcl_string</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"-1.01"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>BCL_ERROR_FATAL_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_ctxt_freeNums</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_popContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_ctxt_free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>bcl_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_popContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_ctxt_free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bcl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
