<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/lib/siphash.h">





























































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIPHASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIPHASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>__int8</name></type> <name>uint8_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIP_ULL</name><parameter_list>(<parameter><type><name>high</name></type></parameter>, <parameter><type><name>low</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint64_t)high &lt;&lt; 32) | low)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(((x) &lt;&lt; (b)) | ((x) &gt;&gt; (64 - (b))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_U32TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)[0] = (uint8_t)((v) &gt;&gt; 0); (p)[1] = (uint8_t)((v) &gt;&gt; 8); (p)[2] = (uint8_t)((v) &gt;&gt; 16); (p)[3] = (uint8_t)((v) &gt;&gt; 24);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_U64TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIP_U32TO8_LE((p) + 0, (uint32_t)((v) &gt;&gt; 0)); SIP_U32TO8_LE((p) + 4, (uint32_t)((v) &gt;&gt; 32));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_U8TO64_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint64_t)((p)[0]) &lt;&lt; 0) | ((uint64_t)((p)[1]) &lt;&lt; 8) | ((uint64_t)((p)[2]) &lt;&lt; 16) | ((uint64_t)((p)[3]) &lt;&lt; 24) | ((uint64_t)((p)[4]) &lt;&lt; 32) | ((uint64_t)((p)[5]) &lt;&lt; 40) | ((uint64_t)((p)[6]) &lt;&lt; 48) | ((uint64_t)((p)[7]) &lt;&lt; 56))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIPHASH_INITIALIZER</name></cpp:macro> <cpp:value>{ 0, 0, 0, 0, {0}, 0, 0 }</cpp:value></cpp:define>


<struct>struct <name>siphash</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIP_KEYLEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct>struct <name>sipkey</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sip_keyof</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sip_tokey(&amp;(struct sipkey){{0}}, (k))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>sipkey</name></name> <modifier>*</modifier></type>
<name>sip_tokey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sipkey</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SIP_U8TO64_LE</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>SIP_U8TO64_LE</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIPHASH_TOBIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sip_binof</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sip_tobin((unsigned char[8]){0}, (v))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>sip_tobin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>u64</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SIP_U64TO8_LE</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sip_round</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type><name>H</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>+=</operator> <name><name>H</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>^=</operator> <name><name>H</name><operator>-&gt;</operator><name>v0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <name><name>H</name><operator>-&gt;</operator><name>v3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>^=</operator> <name><name>H</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>+=</operator> <name><name>H</name><operator>-&gt;</operator><name>v3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>^=</operator> <name><name>H</name><operator>-&gt;</operator><name>v0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <name><name>H</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>^=</operator> <name><name>H</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>SIP_ROTL</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type>
<name>sip24_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type><name>H</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sipkey</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>=</operator> <call><name>_SIP_ULL</name><argument_list>(<argument><expr><literal type="number">0x736f6d65U</literal></expr></argument>, <argument><expr><literal type="number">0x70736575U</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>_SIP_ULL</name><argument_list>(<argument><expr><literal type="number">0x646f7261U</literal></expr></argument>, <argument><expr><literal type="number">0x6e646f6dU</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>_SIP_ULL</name><argument_list>(<argument><expr><literal type="number">0x6c796765U</literal></expr></argument>, <argument><expr><literal type="number">0x6e657261U</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>_SIP_ULL</name><argument_list>(<argument><expr><literal type="number">0x74656462U</literal></expr></argument>, <argument><expr><literal type="number">0x79746573U</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>H</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sip_endof</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(a)[sizeof(a) / sizeof *(a)])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type>
<name>sip24_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type><name>H</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name> <operator>&amp;&amp;</operator> <name><name>H</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <call><name>sip_endof</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>H</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>H</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <call><name>sip_endof</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>SIP_U8TO64_LE</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sip_round</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition>;</do>

<return>return <expr><name>H</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>sip24_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>siphash</name></name> <modifier>*</modifier></type><name>H</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>H</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>H</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><name><name>H</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>H</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v3</name></name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sip_round</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>^=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sip_round</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>H</name><operator>-&gt;</operator><name>v0</name></name> <operator>^</operator> <name><name>H</name><operator>-&gt;</operator><name>v1</name></name> <operator>^</operator> <name><name>H</name><operator>-&gt;</operator><name>v2</name></name> <operator>^</operator> <name><name>H</name><operator>-&gt;</operator><name>v3</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>siphash24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sipkey</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>siphash</name></name></type> <name>state</name> <init>= <expr><name>SIPHASH_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>sip24_final</name><argument_list>(<argument><expr><call><name>sip24_update</name><argument_list>(<argument><expr><call><name>sip24_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>sip24_valid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vectors</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x74</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x85</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x18</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xab</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x93</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x75</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x14</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x69</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x93</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x17</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xde</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xad</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x32</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x71</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x15</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x02</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xca</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xad</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x18</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xee</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x81</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x24</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xea</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x60</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x66</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x95</literal></expr>, }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sipkey</name></name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sip_tokey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><literal type="string">"\000\001\002\003\004\005\006\007\010\011"</literal>
<literal type="string">"\012\013\014\015\016\017"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <name>in</name></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>siphash24</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>SIP_U8TO64_LE</name><argument_list>(<argument><expr><name><name>vectors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIPHASH_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ok</name> <init>= <expr><call><name>sip24_valid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"FAIL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>!</operator> <name>ok</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
