<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/lib/expat.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Expat_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Expat_INCLUDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expat_external.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>XML_ParserStruct</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>XML_ParserStruct</name></name> <modifier>*</modifier></type><name>XML_Parser</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>XML_Bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_TRUE</name></cpp:macro> <cpp:value>((XML_Bool)1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_FALSE</name></cpp:macro> <cpp:value>((XML_Bool)0)</cpp:value></cpp:define>














<enum>enum <name>XML_Status</name> <block>{
<decl><name>XML_STATUS_ERROR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_STATUS_ERROR</name></cpp:macro> <cpp:value>XML_STATUS_ERROR</cpp:value></cpp:define>
<decl><name>XML_STATUS_OK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_STATUS_OK</name></cpp:macro> <cpp:value>XML_STATUS_OK</cpp:value></cpp:define>
<decl><name>XML_STATUS_SUSPENDED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_STATUS_SUSPENDED</name></cpp:macro> <cpp:value>XML_STATUS_SUSPENDED</cpp:value></cpp:define>
}</block>;</enum>

<enum>enum <name>XML_Error</name> <block>{
<decl><name>XML_ERROR_NONE</name></decl>,
<decl><name>XML_ERROR_NO_MEMORY</name></decl>,
<decl><name>XML_ERROR_SYNTAX</name></decl>,
<decl><name>XML_ERROR_NO_ELEMENTS</name></decl>,
<decl><name>XML_ERROR_INVALID_TOKEN</name></decl>,
<decl><name>XML_ERROR_UNCLOSED_TOKEN</name></decl>,
<decl><name>XML_ERROR_PARTIAL_CHAR</name></decl>,
<decl><name>XML_ERROR_TAG_MISMATCH</name></decl>,
<decl><name>XML_ERROR_DUPLICATE_ATTRIBUTE</name></decl>,
<decl><name>XML_ERROR_JUNK_AFTER_DOC_ELEMENT</name></decl>,
<decl><name>XML_ERROR_PARAM_ENTITY_REF</name></decl>,
<decl><name>XML_ERROR_UNDEFINED_ENTITY</name></decl>,
<decl><name>XML_ERROR_RECURSIVE_ENTITY_REF</name></decl>,
<decl><name>XML_ERROR_ASYNC_ENTITY</name></decl>,
<decl><name>XML_ERROR_BAD_CHAR_REF</name></decl>,
<decl><name>XML_ERROR_BINARY_ENTITY_REF</name></decl>,
<decl><name>XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF</name></decl>,
<decl><name>XML_ERROR_MISPLACED_XML_PI</name></decl>,
<decl><name>XML_ERROR_UNKNOWN_ENCODING</name></decl>,
<decl><name>XML_ERROR_INCORRECT_ENCODING</name></decl>,
<decl><name>XML_ERROR_UNCLOSED_CDATA_SECTION</name></decl>,
<decl><name>XML_ERROR_EXTERNAL_ENTITY_HANDLING</name></decl>,
<decl><name>XML_ERROR_NOT_STANDALONE</name></decl>,
<decl><name>XML_ERROR_UNEXPECTED_STATE</name></decl>,
<decl><name>XML_ERROR_ENTITY_DECLARED_IN_PE</name></decl>,
<decl><name>XML_ERROR_FEATURE_REQUIRES_XML_DTD</name></decl>,
<decl><name>XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING</name></decl>,

<decl><name>XML_ERROR_UNBOUND_PREFIX</name></decl>,

<decl><name>XML_ERROR_UNDECLARING_PREFIX</name></decl>,
<decl><name>XML_ERROR_INCOMPLETE_PE</name></decl>,
<decl><name>XML_ERROR_XML_DECL</name></decl>,
<decl><name>XML_ERROR_TEXT_DECL</name></decl>,
<decl><name>XML_ERROR_PUBLICID</name></decl>,
<decl><name>XML_ERROR_SUSPENDED</name></decl>,
<decl><name>XML_ERROR_NOT_SUSPENDED</name></decl>,
<decl><name>XML_ERROR_ABORTED</name></decl>,
<decl><name>XML_ERROR_FINISHED</name></decl>,
<decl><name>XML_ERROR_SUSPEND_PE</name></decl>,

<decl><name>XML_ERROR_RESERVED_PREFIX_XML</name></decl>,
<decl><name>XML_ERROR_RESERVED_PREFIX_XMLNS</name></decl>,
<decl><name>XML_ERROR_RESERVED_NAMESPACE_URI</name></decl>,

<decl><name>XML_ERROR_INVALID_ARGUMENT</name></decl>
}</block>;</enum>

<enum>enum <name>XML_Content_Type</name> <block>{
<decl><name>XML_CTYPE_EMPTY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>XML_CTYPE_ANY</name></decl>,
<decl><name>XML_CTYPE_MIXED</name></decl>,
<decl><name>XML_CTYPE_NAME</name></decl>,
<decl><name>XML_CTYPE_CHOICE</name></decl>,
<decl><name>XML_CTYPE_SEQ</name></decl>
}</block>;</enum>

<enum>enum <name>XML_Content_Quant</name> <block>{
<decl><name>XML_CQUANT_NONE</name></decl>,
<decl><name>XML_CQUANT_OPT</name></decl>,
<decl><name>XML_CQUANT_REP</name></decl>,
<decl><name>XML_CQUANT_PLUS</name></decl>
}</block>;</enum>



















<typedef>typedef <type><name><name>struct</name> <name>XML_cp</name></name></type> <name>XML_Content</name>;</typedef>

<struct>struct <name>XML_cp</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>XML_Content_Type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>XML_Content_Quant</name></name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numchildren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Content</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_ElementDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>XML_Content</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetElementDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_ElementDeclHandler eldecl</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>









<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_AttlistDeclHandler</name>)<parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>elname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>attname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>att_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isrequired</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetAttlistDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_AttlistDeclHandler attdecl</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>









<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_XmlDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>standalone</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetXmlDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_XmlDeclHandler xmldecl</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc_fcn</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>realloc_fcn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fcn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>XML_Memory_Handling_Suite</name>;</typedef>




<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Parser</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>XML_ParserCreate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>XML_Char</name> <operator>*</operator><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Parser</argument>)</argument_list></macro>
<macro><name>XML_ParserCreateNS</name><argument_list>(<argument>const XML_Char *encoding</argument>, <argument>XML_Char namespaceSeparator</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>










<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Parser</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>XML_ParserCreate_MM</name><argument_list>(<argument><expr><specifier>const</specifier> <name>XML_Char</name> <operator>*</operator><name>encoding</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>XML_Memory_Handling_Suite</name> <operator>*</operator><name>memsuite</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>XML_Char</name> <operator>*</operator><name>namespaceSeparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Bool</argument>)</argument_list></macro>
<macro><name>XML_ParserReset</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>const XML_Char *encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_StartElementHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier><modifier>*</modifier></type><name>atts</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_EndElementHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_CharacterDataHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_ProcessingInstructionHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_CommentHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_StartCdataSectionHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_EndCdataSectionHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>














<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_DefaultHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_StartDoctypeDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>doctypeName</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>sysid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>pubid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>has_internal_subset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_EndDoctypeDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



















<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_EntityDeclHandler</name>)<parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>entityName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_parameter_entity</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>systemId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>publicId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>notationName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetEntityDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_EntityDeclHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>










<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_UnparsedEntityDeclHandler</name>)<parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>entityName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>systemId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>publicId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>notationName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_NotationDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>notationName</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>systemId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>publicId</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_StartNamespaceDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_EndNamespaceDeclHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl></typedef>










<typedef>typedef <function_decl><type><name>int</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_NotStandaloneHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



































<typedef>typedef <function_decl><type><name>int</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_ExternalEntityRefHandler</name>)<parameter_list>(<parameter><decl><type><name>XML_Parser</name></type> <name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>systemId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>publicId</name></decl></parameter>)</parameter_list>;</function_decl></typedef>











<typedef>typedef <function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_SkippedEntityHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>entityName</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_parameter_entity</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





















































<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>map</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>convert</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>release</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>XML_Encoding</name>;</typedef>
















<typedef>typedef <function_decl><type><name>int</name></type>(<name>XMLCALL</name> <modifier>*</modifier><name>XML_UnknownEncodingHandler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>encodingHandlerData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>XML_Encoding</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetElementHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_StartElementHandler start</argument>,
<argument>XML_EndElementHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetStartElementHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_StartElementHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetEndElementHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_EndElementHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetCharacterDataHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_CharacterDataHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetProcessingInstructionHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_ProcessingInstructionHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetCommentHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_CommentHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetCdataSectionHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_StartCdataSectionHandler start</argument>,
<argument>XML_EndCdataSectionHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetStartCdataSectionHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_StartCdataSectionHandler start</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetEndCdataSectionHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_EndCdataSectionHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetDefaultHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_DefaultHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetDefaultHandlerExpand</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_DefaultHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetDoctypeDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_StartDoctypeDeclHandler start</argument>,
<argument>XML_EndDoctypeDeclHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetStartDoctypeDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_StartDoctypeDeclHandler start</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetEndDoctypeDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_EndDoctypeDeclHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetUnparsedEntityDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_UnparsedEntityDeclHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetNotationDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_NotationDeclHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetNamespaceDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_StartNamespaceDeclHandler start</argument>,
<argument>XML_EndNamespaceDeclHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetStartNamespaceDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_StartNamespaceDeclHandler start</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetEndNamespaceDeclHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_EndNamespaceDeclHandler end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetNotStandaloneHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_NotStandaloneHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetExternalEntityRefHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_ExternalEntityRefHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetExternalEntityRefHandlerArg</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>void *arg</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetSkippedEntityHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_SkippedEntityHandler handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetUnknownEncodingHandler</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>XML_UnknownEncodingHandler handler</argument>,
<argument>void *encodingHandlerData</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_DefaultCurrent</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>















<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetReturnNSTriplet</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>int do_nst</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_SetUserData</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>void *userData</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_GetUserData</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(void **)(parser))</cpp:value></cpp:define>







<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_SetEncoding</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>const XML_Char *encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_UseParserAsHandlerArg</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




















<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Error</argument>)</argument_list></macro>
<macro><name>XML_UseForeignDTD</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_Bool useDTD</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>









<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_SetBase</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>const XML_Char *base</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const XML_Char *</argument>)</argument_list></macro>
<macro><name>XML_GetBase</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>







<macro><name>XMLPARSEAPI</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>XML_GetSpecifiedAttributeCount</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>







<macro><name>XMLPARSEAPI</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>XML_GetIdAttributeIndex</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_ATTR_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>XML_Index</name></type> <name>nameStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Index</name></type> <name>nameEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Index</name></type> <name>valueStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Index</name></type> <name>valueEnd</name></decl>;</decl_stmt>
}</block></struct></type> <name>XML_AttrInfo</name>;</typedef>







<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const XML_AttrInfo *</argument>)</argument_list></macro>
<macro><name>XML_GetAttributeInfo</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_Parse</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>const char *s</argument>, <argument>int len</argument>, <argument>int isFinal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>XML_GetBuffer</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_ParseBuffer</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>int len</argument>, <argument>int isFinal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
































<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_StopParser</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_Bool resumable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>













<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Status</argument>)</argument_list></macro>
<macro><name>XML_ResumeParser</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<enum>enum <name>XML_Parsing</name> <block>{ <decl><name>XML_INITIALIZED</name></decl>, <decl><name>XML_PARSING</name></decl>, <decl><name>XML_FINISHED</name></decl>, <decl><name>XML_SUSPENDED</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>XML_Parsing</name></name></type> <name>parsing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Bool</name></type> <name>finalBuffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>XML_ParsingStatus</name>;</typedef>






<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_GetParsingStatus</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_ParsingStatus *status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

















<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Parser</argument>)</argument_list></macro>
<macro><name>XML_ExternalEntityParserCreate</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>const XML_Char *context</argument>,
<argument>const XML_Char *encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<enum>enum <name>XML_ParamEntityParsing</name> <block>{
<decl><name>XML_PARAM_ENTITY_PARSING_NEVER</name></decl>,
<decl><name>XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE</name></decl>,
<decl><name>XML_PARAM_ENTITY_PARSING_ALWAYS</name></decl>
}</block>;</enum>

























<macro><name>XMLPARSEAPI</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>XML_SetParamEntityParsing</name><argument_list>(<argument>XML_Parser parser</argument>,
<argument>enum XML_ParamEntityParsing parsing</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>







<macro><name>XMLPARSEAPI</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>XML_SetHashSalt</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>unsigned long hash_salt</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<macro><name>XMLPARSEAPI</name><argument_list>(<argument>enum XML_Error</argument>)</argument_list></macro>
<macro><name>XML_GetErrorCode</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





















<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Size</argument>)</argument_list></macro> <macro><name>XML_GetCurrentLineNumber</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Size</argument>)</argument_list></macro> <macro><name>XML_GetCurrentColumnNumber</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Index</argument>)</argument_list></macro> <macro><name>XML_GetCurrentByteIndex</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<macro><name>XMLPARSEAPI</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>XML_GetCurrentByteCount</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>











<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>XML_GetInputContext</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>int *offset</argument>, <argument>int *size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_GetErrorLineNumber</name></cpp:macro> <cpp:value>XML_GetCurrentLineNumber</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_GetErrorColumnNumber</name></cpp:macro> <cpp:value>XML_GetCurrentColumnNumber</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_GetErrorByteIndex</name></cpp:macro> <cpp:value>XML_GetCurrentByteIndex</cpp:value></cpp:define>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_FreeContentModel</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>XML_Content *model</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>XML_ATTR_MALLOC</name></type>
<name>XML_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list>
<name>XML_MemMalloc</name><argument_list>(<argument><expr><name>XML_Parser</name> <name>parser</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>XML_ATTR_ALLOC_SIZE</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>XML_MemRealloc</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>void *ptr</argument>, <argument>size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_MemFree</name><argument_list>(<argument>XML_Parser parser</argument>, <argument>void *ptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>XML_ParserFree</name><argument_list>(<argument>XML_Parser parser</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const XML_LChar *</argument>)</argument_list></macro>
<macro><name>XML_ErrorString</name><argument_list>(<argument>enum XML_Error code</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const XML_LChar *</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>XML_ExpatVersion</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>micro</name></decl>;</decl_stmt>
}</block></struct></type> <name>XML_Expat_Version</name>;</typedef>




<macro><name>XMLPARSEAPI</name><argument_list>(<argument>XML_Expat_Version</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>XML_ExpatVersionInfo</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<enum>enum <name>XML_FeatureEnum</name> <block>{
<decl><name>XML_FEATURE_END</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>XML_FEATURE_UNICODE</name></decl>,
<decl><name>XML_FEATURE_UNICODE_WCHAR_T</name></decl>,
<decl><name>XML_FEATURE_DTD</name></decl>,
<decl><name>XML_FEATURE_CONTEXT_BYTES</name></decl>,
<decl><name>XML_FEATURE_MIN_SIZE</name></decl>,
<decl><name>XML_FEATURE_SIZEOF_XML_CHAR</name></decl>,
<decl><name>XML_FEATURE_SIZEOF_XML_LCHAR</name></decl>,
<decl><name>XML_FEATURE_NS</name></decl>,
<decl><name>XML_FEATURE_LARGE_SIZE</name></decl>,
<decl><name>XML_FEATURE_ATTR_INFO</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>XML_FeatureEnum</name></name></type> <name>feature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>XML_LChar</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>XML_Feature</name>;</typedef>

<macro><name>XMLPARSEAPI</name><argument_list>(<argument>const XML_Feature *</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>XML_GetFeatureList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_MAJOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_MINOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_MICRO_VERSION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
