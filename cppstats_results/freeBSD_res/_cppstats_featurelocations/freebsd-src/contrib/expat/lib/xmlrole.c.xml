<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/lib/xmlrole.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"winconfig.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat_config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expat_external.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlrole.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ascii.h"</cpp:file></cpp:include>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ANY</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_A</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_Y</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ATTLIST</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_A</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_L</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_S</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_CDATA</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_C</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_DOCTYPE</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_D</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_C</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_Y</name></expr>, <expr><name>ASCII_P</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ELEMENT</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_E</name></expr>, <expr><name>ASCII_L</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_EMPTY</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_E</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><name>ASCII_P</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_Y</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ENTITIES</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_E</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_T</name></expr>,
<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_S</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ENTITY</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_E</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_Y</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_FIXED</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_F</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_X</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_ID</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_IDREF</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_R</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_F</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_IDREFS</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_R</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_F</name></expr>, <expr><name>ASCII_S</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_IGNORE</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_G</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_R</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_IMPLIED</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><name>ASCII_P</name></expr>, <expr><name>ASCII_L</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_INCLUDE</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_C</name></expr>, <expr><name>ASCII_L</name></expr>, <expr><name>ASCII_U</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_NDATA</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_N</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_NMTOKEN</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_N</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_K</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_NMTOKENS</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_N</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_K</name></expr>,
<expr><name>ASCII_E</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><name>ASCII_S</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_NOTATION</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_N</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><name>ASCII_T</name></expr>,
<expr><name>ASCII_I</name></expr>, <expr><name>ASCII_O</name></expr>, <expr><name>ASCII_N</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_PCDATA</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_P</name></expr>, <expr><name>ASCII_C</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_A</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_PUBLIC</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_P</name></expr>, <expr><name>ASCII_U</name></expr>, <expr><name>ASCII_B</name></expr>, <expr><name>ASCII_L</name></expr>, <expr><name>ASCII_I</name></expr>, <expr><name>ASCII_C</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_REQUIRED</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ASCII_R</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_Q</name></expr>, <expr><name>ASCII_U</name></expr>, <expr><name>ASCII_I</name></expr>,
<expr><name>ASCII_R</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_D</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>KW_SYSTEM</name><index>[]</index></name>
<init>= <expr><block>{<expr><name>ASCII_S</name></expr>, <expr><name>ASCII_Y</name></expr>, <expr><name>ASCII_S</name></expr>, <expr><name>ASCII_T</name></expr>, <expr><name>ASCII_E</name></expr>, <expr><name>ASCII_M</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN_BYTES_PER_CHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BYTES_PER_CHAR</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((enc)-&gt;minBytesPerChar)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setTopLevel</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;handler = ((state)-&gt;documentEntity ? internalSubset : externalSubset1))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setTopLevel</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;handler = internalSubset)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name> <name>PTRCALL</name></type> <name>PROLOG_HANDLER</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PROLOG_HANDLER</name></type> <name>prolog0</name></decl>, <decl><type ref="prev"/><name>prolog1</name></decl>, <decl><type ref="prev"/><name>prolog2</name></decl>, <decl><type ref="prev"/><name>doctype0</name></decl>, <decl><type ref="prev"/><name>doctype1</name></decl>, <decl><type ref="prev"/><name>doctype2</name></decl>,
<decl><type ref="prev"/><name>doctype3</name></decl>, <decl><type ref="prev"/><name>doctype4</name></decl>, <decl><type ref="prev"/><name>doctype5</name></decl>, <decl><type ref="prev"/><name>internalSubset</name></decl>, <decl><type ref="prev"/><name>entity0</name></decl>, <decl><type ref="prev"/><name>entity1</name></decl>, <decl><type ref="prev"/><name>entity2</name></decl>,
<decl><type ref="prev"/><name>entity3</name></decl>, <decl><type ref="prev"/><name>entity4</name></decl>, <decl><type ref="prev"/><name>entity5</name></decl>, <decl><type ref="prev"/><name>entity6</name></decl>, <decl><type ref="prev"/><name>entity7</name></decl>, <decl><type ref="prev"/><name>entity8</name></decl>, <decl><type ref="prev"/><name>entity9</name></decl>, <decl><type ref="prev"/><name>entity10</name></decl>,
<decl><type ref="prev"/><name>notation0</name></decl>, <decl><type ref="prev"/><name>notation1</name></decl>, <decl><type ref="prev"/><name>notation2</name></decl>, <decl><type ref="prev"/><name>notation3</name></decl>, <decl><type ref="prev"/><name>notation4</name></decl>, <decl><type ref="prev"/><name>attlist0</name></decl>, <decl><type ref="prev"/><name>attlist1</name></decl>,
<decl><type ref="prev"/><name>attlist2</name></decl>, <decl><type ref="prev"/><name>attlist3</name></decl>, <decl><type ref="prev"/><name>attlist4</name></decl>, <decl><type ref="prev"/><name>attlist5</name></decl>, <decl><type ref="prev"/><name>attlist6</name></decl>, <decl><type ref="prev"/><name>attlist7</name></decl>, <decl><type ref="prev"/><name>attlist8</name></decl>,
<decl><type ref="prev"/><name>attlist9</name></decl>, <decl><type ref="prev"/><name>element0</name></decl>, <decl><type ref="prev"/><name>element1</name></decl>, <decl><type ref="prev"/><name>element2</name></decl>, <decl><type ref="prev"/><name>element3</name></decl>, <decl><type ref="prev"/><name>element4</name></decl>, <decl><type ref="prev"/><name>element5</name></decl>,
<decl><type ref="prev"/><name>element6</name></decl>, <decl><type ref="prev"/><name>element7</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><type ref="prev"/><name>externalSubset0</name></decl>, <decl><type ref="prev"/><name>externalSubset1</name></decl>, <decl><type ref="prev"/><name>condSect0</name></decl>, <decl><type ref="prev"/><name>condSect1</name></decl>, <decl><type ref="prev"/><name>condSect2</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><type ref="prev"/><name>declClose</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name> <name>FASTCALL</name></type> <name>common</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>prolog0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_XML_DECL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_XML_DECL</name></expr>;</return>
<case>case <expr><name>XML_TOK_PI</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_PI</name></expr>;</return>
<case>case <expr><name>XML_TOK_COMMENT</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_COMMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_BOM</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_OPEN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_DOCTYPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_INSTANCE_START</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_INSTANCE_START</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>prolog1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_PI</name></expr>:</case>
<return>return <expr><name>XML_ROLE_PI</name></expr>;</return>
<case>case <expr><name>XML_TOK_COMMENT</name></expr>:</case>
<return>return <expr><name>XML_ROLE_COMMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_BOM</name></expr>:</case>







<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_OPEN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_DOCTYPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_INSTANCE_START</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_INSTANCE_START</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>prolog2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_PI</name></expr>:</case>
<return>return <expr><name>XML_ROLE_PI</name></expr>;</return>
<case>case <expr><name>XML_TOK_COMMENT</name></expr>:</case>
<return>return <expr><name>XML_ROLE_COMMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_INSTANCE_START</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_INSTANCE_START</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_BRACKET</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>internalSubset</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_INTERNAL_SUBSET</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_CLOSE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_SYSTEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_PUBLIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_PUBLIC_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype3</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_SYSTEM_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype4</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_BRACKET</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>internalSubset</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_INTERNAL_SUBSET</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_CLOSE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>doctype5</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_CLOSE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>internalSubset</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_OPEN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_ENTITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_ATTLIST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_ELEMENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_NOTATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>notation0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_PI</name></expr>:</case>
<return>return <expr><name>XML_ROLE_PI</name></expr>;</return>
<case>case <expr><name>XML_TOK_COMMENT</name></expr>:</case>
<return>return <expr><name>XML_ROLE_COMMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_PARAM_ENTITY_REF</name></expr>:</case>
<return>return <expr><name>XML_ROLE_PARAM_ENTITY_REF</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_BRACKET</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>doctype5</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DOCTYPE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NONE</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>externalSubset0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>externalSubset1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>XML_TOK_XML_DECL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XML_ROLE_TEXT_DECL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>externalSubset1</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>externalSubset1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_COND_SECT_OPEN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>condSect0</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_COND_SECT_CLOSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_BRACKET</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>XML_TOK_NONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>internalSubset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_PERCENT</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GENERAL_ENTITY_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_PARAM_ENTITY_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_SYSTEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_PUBLIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ENTITY_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity3</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_PUBLIC_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity4</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity5</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_SYSTEM_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity5</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>setTopLevel</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_COMPLETE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_NDATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity6</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ENTITY_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NOTATION_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity7</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_SYSTEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity9</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_PUBLIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity8</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ENTITY_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity8</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity9</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_PUBLIC_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity9</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>entity10</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_SYSTEM_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>entity10</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ENTITY_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>setTopLevel</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ENTITY_COMPLETE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>notation0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>notation1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>notation1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_SYSTEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>notation3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_PUBLIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>notation2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>notation2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>notation4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_PUBLIC_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>notation3</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_NOTATION_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_SYSTEM_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>notation4</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NOTATION_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_NOTATION_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_SYSTEM_ID</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>setTopLevel</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NOTATION_NO_SYSTEM_ID</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_ELEMENT_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>setTopLevel</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTRIBUTE_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>KW_CDATA</name></expr>, <expr><name>KW_ID</name></expr>, <expr><name>KW_IDREF</name></expr>, <expr><name>KW_IDREFS</name></expr>,
<expr><name>KW_ENTITY</name></expr>, <expr><name>KW_ENTITIES</name></expr>, <expr><name>KW_NMTOKEN</name></expr>, <expr><name>KW_NMTOKENS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist8</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTRIBUTE_TYPE_CDATA</name> <operator>+</operator> <name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_NOTATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist5</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_OPEN_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist3</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NMTOKEN</name></expr>:</case>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTRIBUTE_ENUM_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist4</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist8</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist5</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist6</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTRIBUTE_NOTATION_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist7</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist8</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist8</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_POUND_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_IMPLIED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_IMPLIED_ATTRIBUTE_VALUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_REQUIRED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_REQUIRED_ATTRIBUTE_VALUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_FIXED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist9</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_DEFAULT_ATTRIBUTE_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>attlist9</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ATTLIST_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_LITERAL</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>attlist1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_FIXED_ATTRIBUTE_VALUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ELEMENT_NAME</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_EMPTY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_ANY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ANY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_OPEN_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_OPEN</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_POUND_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <call><name>MIN_BYTES_PER_CHAR</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>KW_PCDATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element3</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_PCDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_TOK_OPEN_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_OPEN</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_QUESTION</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_OPT</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_ASTERISK</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_REP</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_PLUS</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_PLUS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element3</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN_ASTERISK</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE_REP</name></expr>;</return>
<case>case <expr><name>XML_TOK_OR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element4</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element5</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element5</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN_ASTERISK</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE_REP</name></expr>;</return>
<case>case <expr><name>XML_TOK_OR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element4</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element6</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_OPEN</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<case>case <expr><name>XML_TOK_PREFIXED_NAME</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_QUESTION</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_OPT</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_ASTERISK</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_REP</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME_PLUS</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element7</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_CONTENT_ELEMENT_PLUS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>element7</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_ELEMENT_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN_ASTERISK</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE_REP</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN_QUESTION</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE_OPT</name></expr>;</return>
<case>case <expr><name>XML_TOK_CLOSE_PAREN_PLUS</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>declClose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name> <operator>=</operator> <name>XML_ROLE_ELEMENT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CLOSE_PLUS</name></expr>;</return>
<case>case <expr><name>XML_TOK_COMMA</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_SEQUENCE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>element6</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_GROUP_CHOICE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>condSect0</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_INCLUDE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>condSect1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmlNameMatchesAscii</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>KW_IGNORE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>condSect2</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>condSect1</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_BRACKET</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>externalSubset1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>condSect2</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
<case>case <expr><name>XML_TOK_OPEN_BRACKET</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>externalSubset1</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_IGNORE_SECT</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>declClose</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XML_TOK_PROLOG_S</name></expr>:</case>
<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name></expr>;</return>
<case>case <expr><name>XML_TOK_DECL_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>setTopLevel</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>role_none</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name></type>
<name>error</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_NONE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name> <name>FASTCALL</name></type>
<name>common</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tok</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>state</name><operator>-&gt;</operator><name>documentEntity</name></name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>==</operator> <name>XML_TOK_PARAM_ENTITY_REF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>XML_ROLE_INNER_PARAM_ENTITY_REF</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>XML_ROLE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>XmlPrologStateInit</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>prolog0</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>documentEntity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>inEntityValue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_DTD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>
<name>XmlPrologStateInitExternalEntity</name><parameter_list>(<parameter><decl><type><name>PROLOG_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>externalSubset0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>documentEntity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>includeLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
