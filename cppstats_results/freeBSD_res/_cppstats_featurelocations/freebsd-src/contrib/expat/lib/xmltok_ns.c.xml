<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/lib/xmltok_ns.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_TOK_NS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier>
<name>NS</name></type>(<name>XmlGetUtf8InternalEncoding</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>internal_utf8_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier>
<name>NS</name></type>(<name>XmlGetUtf16InternalEncoding</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTEORDER</name> <operator>==</operator> <literal type="number">1234</literal></expr></cpp:if>
<return>return <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>internal_little2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BYTEORDER</name> <operator>==</operator> <literal type="number">4321</literal></expr></cpp:elif>
<return>return <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>internal_big2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>short</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr> ?</condition><then> <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>internal_little2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>
</then><else>: <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>internal_big2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr></else></ternary><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier><specifier>const</specifier></type> <name>NS</name><argument_list>(<argument><expr><name>encodings</name></expr></argument>)</argument_list>[] <init>= <expr><block>{
<expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>latin1_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>, <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>ascii_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>,
<expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>utf8_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>, <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>big2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>,
<expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>big2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>, <expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>little2_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>,
<expr><operator>&amp;</operator><call><name>ns</name><argument_list>(<argument><expr><name>utf8_encoding</name></expr></argument>)</argument_list></call><operator>.</operator><name>enc</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name>
<name>NS</name></type>(<name>initScanProlog</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextTokPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>initScan</name><argument_list>(<argument><expr><call><name>NS</name><argument_list>(<argument><expr><name>encodings</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>INIT_ENCODING</name> <operator>*</operator><operator>)</operator><name>enc</name></expr></argument>, <argument><expr><name>XML_PROLOG_STATE</name></expr></argument>,
<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>nextTokPtr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>PTRCALL</name>
<name>NS</name></type>(<name>initScanContent</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextTokPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>initScan</name><argument_list>(<argument><expr><call><name>NS</name><argument_list>(<argument><expr><name>encodings</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>INIT_ENCODING</name> <operator>*</operator><operator>)</operator><name>enc</name></expr></argument>, <argument><expr><name>XML_CONTENT_STATE</name></expr></argument>,
<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>nextTokPtr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name>
<name>NS</name></type>(<name>XmlInitEncoding</name>)<parameter_list>(<parameter><decl><type><name>INIT_ENCODING</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier><modifier>*</modifier></type><name>encPtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>getEncodingIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>UNKNOWN_ENC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_INIT_ENC_INDEX</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>initEnc</name><operator>.</operator><name>scanners</name><index>[<expr><name>XML_PROLOG_STATE</name></expr>]</index></name> <operator>=</operator> <call><name>NS</name><argument_list>(<argument><expr><name>initScanProlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>initEnc</name><operator>.</operator><name>scanners</name><index>[<expr><name>XML_CONTENT_STATE</name></expr>]</index></name> <operator>=</operator> <call><name>NS</name><argument_list>(<argument><expr><name>initScanContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>initEnc</name><operator>.</operator><name>updatePosition</name></name> <operator>=</operator> <name>initUpdatePosition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>encPtr</name></name> <operator>=</operator> <name>encPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>encPtr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>initEnc</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier>
<name>NS</name></type>(<name>findEncoding</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_MAX</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>ENCODING_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XmlUtf8Convert</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>ENCODING_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streqci</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>KW_UTF_16</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>minBytesPerChar</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>enc</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getEncodingIndex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>UNKNOWN_ENC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>NS</name><argument_list>(<argument><expr><name>encodings</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name>
<name>NS</name></type>(<name>XmlParseXmlDecl</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>isGeneralTextEntity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>badPtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>versionPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>versionEndPtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>encodingName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ENCODING</name> <modifier>*</modifier><modifier>*</modifier></type><name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>standalone</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>doParseXmlDecl</name><argument_list>(<argument><expr><call><name>NS</name><argument_list>(<argument><expr><name>findEncoding</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isGeneralTextEntity</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>badPtr</name></expr></argument>, <argument><expr><name>versionPtr</name></expr></argument>, <argument><expr><name>versionEndPtr</name></expr></argument>, <argument><expr><name>encodingName</name></expr></argument>,
<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>standalone</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
