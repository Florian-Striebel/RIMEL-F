<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/tests/minicheck.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minicheck.h"</cpp:file></cpp:include>

<function><type><name>Suite</name> <modifier>*</modifier></type>
<name>suite_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name> <init>= <expr><operator>(</operator><name>Suite</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Suite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>suite</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>suite</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>suite</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TCase</name> <modifier>*</modifier></type>
<name>tcase_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>(</operator><name>TCase</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TCase</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>suite_add_tcase</name><parameter_list>(<parameter><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>, <parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>suite</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>next_tcase</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>next_tcase</name></name> <operator>=</operator> <name><name>suite</name><operator>-&gt;</operator><name>tests</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suite</name><operator>-&gt;</operator><name>tests</name></name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcase_add_checked_fixture</name><parameter_list>(<parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>tcase_setup_function</name></type> <name>setup</name></decl></parameter>,
<parameter><decl><type><name>tcase_teardown_function</name></type> <name>teardown</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>setup</name></name> <operator>=</operator> <name>setup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>teardown</name></name> <operator>=</operator> <name>teardown</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcase_add_test</name><parameter_list>(<parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>tcase_test_function</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>allocated</name></name> <operator>==</operator> <name><name>tc</name><operator>-&gt;</operator><name>ntests</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nalloc</name> <init>= <expr><name><name>tc</name><operator>-&gt;</operator><name>allocated</name></name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcase_test_function</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nalloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tcase_test_function</name> <modifier>*</modifier></type><name>new_tests</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_tests</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>tests</name></name> <operator>=</operator> <name>new_tests</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>nalloc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>tests</name><index>[<expr><name><name>tc</name><operator>-&gt;</operator><name>ntests</name></name></expr>]</index></name> <operator>=</operator> <name>test</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>ntests</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcase_free</name><parameter_list>(<parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tc</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>suite_free</name><parameter_list>(<parameter><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>suite</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>suite</name><operator>-&gt;</operator><name>tests</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TCase</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>suite</name><operator>-&gt;</operator><name>tests</name><operator>-&gt;</operator><name>next_tcase</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tcase_free</name><argument_list>(<argument><expr><name><name>suite</name><operator>-&gt;</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suite</name><operator>-&gt;</operator><name>tests</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRunner</name> <modifier>*</modifier></type>
<name>srunner_create</name><parameter_list>(<parameter><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRunner</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>runner</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>runner</name><operator>-&gt;</operator><name>suite</name></name> <operator>=</operator> <name>suite</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>runner</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>jmp_buf</name></type> <name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>_check_current_function</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_check_current_lineno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>_check_current_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>_check_set_test_info</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_check_current_function</name> <operator>=</operator> <name>function</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_check_current_lineno</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_check_current_filename</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_failure</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>runner</name><operator>-&gt;</operator><name>nfailures</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <name>CK_VERBOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d: %s\n"</literal></expr></argument>, <argument><expr><name>_check_current_filename</name></expr></argument>, <argument><expr><name>_check_current_lineno</name></expr></argument>,
<argument><expr><name>_check_current_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>srunner_run_all</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCase</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>tc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>runner</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>suite</name> <operator>=</operator> <name><name>runner</name><operator>-&gt;</operator><name>suite</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tc</name> <operator>=</operator> <name><name>suite</name><operator>-&gt;</operator><name>tests</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tc</name><operator>-&gt;</operator><name>ntests</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>runner</name><operator>-&gt;</operator><name>nchecks</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>setup</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_failure</name><argument_list>(<argument><expr><name>runner</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>tc</name><operator>-&gt;</operator><name>setup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_failure</name><argument_list>(<argument><expr><name>runner</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>teardown</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_failure</name><argument_list>(<argument><expr><name>runner</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>tc</name><operator>-&gt;</operator><name>teardown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>tc</name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>next_tcase</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>verbosity</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>passed</name> <init>= <expr><name><name>runner</name><operator>-&gt;</operator><name>nchecks</name></name> <operator>-</operator> <name><name>runner</name><operator>-&gt;</operator><name>nfailures</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percentage</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>passed</name><operator>)</operator> <operator>/</operator> <name><name>runner</name><operator>-&gt;</operator><name>nchecks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>percentage</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%%: Checks: %d, Failed: %d\n"</literal></expr></argument>, <argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>runner</name><operator>-&gt;</operator><name>nchecks</name></name></expr></argument>,
<argument><expr><name><name>runner</name><operator>-&gt;</operator><name>nfailures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_fail_unless</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>




<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNUSED_P</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>has_newline</name> <init>= <expr><operator>(</operator><name><name>msg</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>has_newline</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>srunner_ntests_failed</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>runner</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>runner</name><operator>-&gt;</operator><name>nfailures</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>srunner_free</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>runner</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>suite_free</name><argument_list>(<argument><expr><name><name>runner</name><operator>-&gt;</operator><name>suite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>runner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
