<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/tests/minicheck.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_NOFORK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_FORK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_SILENT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_NORMAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_VERBOSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__func__</name></cpp:macro> <cpp:value>__FUNCTION__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_TEST</name><parameter_list>(<parameter><type><name>testname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void testname(void) { _check_set_test_info(__func__, __FILE__, __LINE__); {</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_TEST</name></cpp:macro> <cpp:value>} }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_fail_unless(0, __FILE__, __LINE__, msg)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tcase_setup_function</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tcase_teardown_function</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tcase_test_function</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name><name>struct</name> <name>SRunner</name></name></type> <name>SRunner</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Suite</name></name></type> <name>Suite</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TCase</name></name></type> <name>TCase</name>;</typedef>

<struct>struct <name>SRunner</name> <block>{
<decl_stmt><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchecks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfailures</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Suite</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tests</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>TCase</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tcase_setup_function</name></type> <name>setup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tcase_teardown_function</name></type> <name>teardown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tcase_test_function</name> <modifier>*</modifier></type><name>tests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCase</name> <modifier>*</modifier></type><name>next_tcase</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>void</name></type> <name>_check_set_test_info</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>_fail_unless</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TCase</name> <modifier>*</modifier></type><name>tcase_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>suite_add_tcase</name><parameter_list>(<parameter><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>, <parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tcase_add_checked_fixture</name><parameter_list>(<parameter><decl><type><name>TCase</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tcase_setup_function</name></type></decl></parameter>,
<parameter><decl><type><name>tcase_teardown_function</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tcase_add_test</name><parameter_list>(<parameter><decl><type><name>TCase</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>tcase_test_function</name></type> <name>test</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SRunner</name> <modifier>*</modifier></type><name>srunner_create</name><parameter_list>(<parameter><decl><type><name>Suite</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>srunner_run_all</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>srunner_ntests_failed</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>srunner_free</name><parameter_list>(<parameter><decl><type><name>SRunner</name> <modifier>*</modifier></type><name>runner</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
