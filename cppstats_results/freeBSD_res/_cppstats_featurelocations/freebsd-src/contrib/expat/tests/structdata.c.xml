<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/expat/tests/structdata.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXPAT_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expat_config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minicheck.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRUCT_EXTENSION_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XML_UNICODE_WCHAR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_FMT_STR</name></cpp:macro> <cpp:value>"ls"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xcstrlen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcslen(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xcstrcmp</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcscmp((s), (t))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_FMT_STR</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xcstrlen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xcstrcmp</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcmp((s), (t))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>XML_Char</name> <modifier>*</modifier></type>
<name>xmlstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>byte_count</name> <init>= <expr><operator>(</operator><call><name>xcstrlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XML_Char</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>byte_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dup</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>StructData_Init</name><parameter_list>(<parameter><decl><type><name>StructData</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>StructData_AddItem</name><parameter_list>(<parameter><decl><type><name>StructData</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XML_Char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>StructDataEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>max_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StructDataEntry</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>max_count</name></name> <operator>+=</operator> <name>STRUCT_EXTENSION_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>,
<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>max_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StructDataEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>xmlstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data0</name></name> <operator>=</operator> <name>data0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data1</name></name> <operator>=</operator> <name>data1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data2</name></name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>StructData_CheckItems</name><parameter_list>(<parameter><decl><type><name>StructData</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StructDataEntry</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>expected</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name><name>storage</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"wrong number of entries: got %d, expected %d"</literal></expr></argument>,
<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StructData_Dispose</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>StructDataEntry</name> <modifier>*</modifier></type><name>got</name> <init>= <expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>StructDataEntry</name> <modifier>*</modifier></type><name>want</name> <init>= <expr><operator>&amp;</operator><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>got</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>want</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xcstrcmp</name><argument_list>(<argument><expr><name><name>got</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>want</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StructData_Dispose</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"structure got bad string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>got</name><operator>-&gt;</operator><name>data0</name></name> <operator>!=</operator> <name><name>want</name><operator>-&gt;</operator><name>data0</name></name> <operator>||</operator> <name><name>got</name><operator>-&gt;</operator><name>data1</name></name> <operator>!=</operator> <name><name>want</name><operator>-&gt;</operator><name>data1</name></name>
<operator>||</operator> <name><name>got</name><operator>-&gt;</operator><name>data2</name></name> <operator>!=</operator> <name><name>want</name><operator>-&gt;</operator><name>data2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><literal type="string">"struct '%"</literal> <name>XML_FMT_STR</name>
<literal type="string">"' expected (%d,%d,%d), got (%d,%d,%d)"</literal></expr></argument>,
<argument><expr><name><name>got</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>want</name><operator>-&gt;</operator><name>data0</name></name></expr></argument>, <argument><expr><name><name>want</name><operator>-&gt;</operator><name>data1</name></name></expr></argument>, <argument><expr><name><name>want</name><operator>-&gt;</operator><name>data2</name></name></expr></argument>, <argument><expr><name><name>got</name><operator>-&gt;</operator><name>data0</name></name></expr></argument>,
<argument><expr><name><name>got</name><operator>-&gt;</operator><name>data1</name></name></expr></argument>, <argument><expr><name><name>got</name><operator>-&gt;</operator><name>data2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StructData_Dispose</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>StructData_Dispose</name><parameter_list>(<parameter><decl><type><name>StructData</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>storage</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
