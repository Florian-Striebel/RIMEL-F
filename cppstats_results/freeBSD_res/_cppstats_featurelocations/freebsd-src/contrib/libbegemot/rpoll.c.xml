<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libbegemot/rpoll.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpoll.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_POLL_XOPEN_TWIDDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_XOPEN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_POLL_XOPEN_TWIDDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__USE_XOPEN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stropts.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INFTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFTIM</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL</name></cpp:macro> <cpp:value>SIGPOLL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL</name></cpp:macro> <cpp:value>SIGIO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll_in</name></cpp:macro> <cpp:value>(POLLIN | POLLRDNORM | POLLRDBAND | POLLPRI)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll_out</name></cpp:macro> <cpp:value>(POLLOUT | POLLWRNORM | POLLWRBAND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll_except</name></cpp:macro> <cpp:value>(POLLERR | POLLHUP)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROKEN_SELECT_PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_CAST</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int *)P</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_CAST</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>int64_t</name></type> <name>tval_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>tval_t</name></type> <name>GETUSECS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tval_t</name></type>
<name>GETUSECS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tval</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tval_t</name><operator>)</operator><name><name>tval</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>tval</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>_panic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"panic: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>_xrealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ptr</name><operator>=</operator><call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>ptr</name><operator>=</operator><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"out of memory: xrealloc(%lx, %lu)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ptr</name><operator>=</operator><call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name><operator>=</operator><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"out of memory: xrealloc(%lx, %lu)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"out of memory: xrealloc(%lx, %lu)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>poll_f</name></type> <name>func</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>PollReg_t</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>usecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timer_f</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tval_t</name></type> <name>when</name></decl>;</decl_stmt>
}</block></struct></type> <name>PollTim_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_REG_GROW</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type> <name>pfd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>fd_set</name></type> <name>rset</name></decl>, <decl><type ref="prev"/><name>wset</name></decl>, <decl><type ref="prev"/><name>xset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxfd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_dispatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PollReg_t</name> <modifier>*</modifier></type> <name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>regs_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>regs_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sigset_t</name></type> <name>bset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rebuild</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type> <name>tfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>tfd_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>tfd_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PollTim_t</name> <modifier>*</modifier></type> <name>tims</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>tims_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>tims_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rpoll_trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rpoll_policy</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poll_build</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poll_blocksig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poll_unblocksig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sort_timers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>poll_blocksig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>set</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><name>SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"sigprocmask(SIG_BLOCK): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>poll_unblocksig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"sigprocmask(SIG_SETMASK): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>poll_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>poll_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PollReg_t</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>poll_blocksig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>regs</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>func</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>)</condition> <block>{<block_content>



<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>regs</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name>regs_alloc</name> <operator>+</operator> <name>POLL_REG_GROW</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>regs</name> <operator>=</operator> <call><name>_xrealloc</name><argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>newsize</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>regs_alloc</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><name>regs_used</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rebuild</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>poll_unblocksig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"poll_register(%d, %p, %p, %#x)-&gt;%tu"</literal></expr></argument>,
<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name> <operator>-</operator> <name>regs</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>poll_unregister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"poll_unregister(%d)"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>poll_blocksig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regs</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>regs</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>pfd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rebuild</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regs_used</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll_unblocksig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>poll_build</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PollReg_t</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>pfd</name> <operator>=</operator> <call><name>_xrealloc</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>regs_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>regs</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name>poll_in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name>poll_out</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_EXCEPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name>poll_except</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pfd</name></name> <operator>=</operator> <name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <operator>&amp;</operator><name><name>pfd</name><index>[<expr><name>regs_used</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>regs</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>regs</name><index>[<expr><name>regs_alloc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <name>maxfd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>RPOLL_EXCEPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>poll_start_timer</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>msecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>, <parameter><decl><type><name>timer_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>poll_start_utimer</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>msecs</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>poll_start_utimer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>usecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>, <parameter><decl><type><name>timer_f</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PollTim_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>tims</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tims</name><index>[<expr><name>tims_alloc</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name><name>tims</name><index>[<expr><name>tims_alloc</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>tims_alloc</name> <operator>==</operator> <name>tims_used</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name>tims_alloc</name> <operator>+</operator> <name>POLL_REG_GROW</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tims</name> <operator>=</operator> <call><name>_xrealloc</name><argument_list>(<argument><expr><name>tims</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>tims</name><index>[<expr><name>tims_alloc</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tims</name><index>[<expr><name>newsize</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>tims</name><index>[<expr><name>tims_alloc</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tims_alloc</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>usecs</name></name> <operator>=</operator> <name>usecs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>repeat</name></name> <operator>=</operator> <name>repeat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <call><name>GETUSECS</name><argument_list>()</argument_list></call> <operator>+</operator> <name>usecs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tims_used</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>resort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"poll_start_utimer(%llu, %d, %p, %p)-&gt;%tu"</literal></expr></argument>,
<argument><expr><name>usecs</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>tims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name> <operator>-</operator> <name>tims</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>poll_stop_timer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"poll_stop_timer(%d)"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tims</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tims_used</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>resort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_dispatch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tfd_used</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>tim_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>tims</name><index>[<expr><name>t1</name></expr>]</index></name><operator>.</operator><name>when</name> <operator>&lt;</operator> <name><name>tims</name><index>[<expr><name>t2</name></expr>]</index></name><operator>.</operator><name>when</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr>
</then><else>: <expr><ternary><condition><expr><name><name>tims</name><index>[<expr><name>t1</name></expr>]</index></name><operator>.</operator><name>when</name> <operator>&gt;</operator> <name><name>tims</name><index>[<expr><name>t2</name></expr>]</index></name><operator>.</operator><name>when</name></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>sort_timers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tims_used</name> <operator>&gt;</operator> <name>tfd_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tfd_alloc</name> <operator>=</operator> <name>tims_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tfd</name> <operator>=</operator> <call><name>_xrealloc</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tfd_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>tfd</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tims_alloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>tims</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name><operator>++</operator> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pp</name> <operator>-</operator> <name>tfd</name> <operator>==</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>tims_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tfd_used</name> <operator>=</operator> <name>tims_used</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tfd_used</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>, <argument><expr><name>tfd_used</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tim_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>poll_dispatch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tval_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tval_t</name></type> <name>tout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>last_index</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>fd_set</name></type> <name>nrset</name></decl>, <decl><type ref="prev"/><name>nwset</name></decl>, <decl><type ref="prev"/><name>nxset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>in_dispatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rebuild</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rebuild</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>resort</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>resort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sort_timers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>wait</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>tfd_used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GETUSECS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"now=%llu"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tims_used</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"timers[%2d] = %lld"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>when</name> <operator>-</operator> <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tout</name> <operator>=</operator> <name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>when</name> <operator>-</operator> <name>now</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <name>INFTIM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rpoll -- selecting with tout=%u"</literal></expr></argument>, <argument><expr><name>tout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>regs_used</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tout</name> <operator>==</operator> <name>INFTIM</name></expr> ?</condition><then> <expr><name>INFTIM</name></expr> </then><else>: <expr><operator>(</operator><name>tout</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>nrset</name> <operator>=</operator> <name>rset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwset</name> <operator>=</operator> <name>wset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nxset</name> <operator>=</operator> <name>xset</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tout</name> <operator>!=</operator> <name>INFTIM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>tout</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>tout</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>SELECT_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SELECT_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nwset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SELECT_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nxset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>tout</name><operator>==</operator><name>INFTIM</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>tv</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"poll/select: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>regs_alloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <ternary><condition><expr><name>rpoll_policy</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>last_index</name><operator>+</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>regs_alloc</name><operator>)</operator></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name>regs_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pfd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_IN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>&amp;</operator> <name>poll_in</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_OUT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>&amp;</operator> <name>poll_out</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_EXCEPT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>&amp;</operator> <name>poll_except</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_EXCEPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_IN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_OUT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nwset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_OUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>RPOLL_EXCEPT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>RPOLL_EXCEPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name>regs_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"poll_dispatch() -- "</literal>
<literal type="string">"file %d/%d %x"</literal></expr></argument>,
<argument><expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name><operator>,</operator> <name>mask</name><operator>,</operator> <name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><name>last_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>tfd_used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GETUSECS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tfd_used</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>when</name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>rpoll_trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rpoll_dispatch() -- timeout %d"</literal></expr></argument>,<argument><expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator> <name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>arg</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>repeat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>when</name> <operator>=</operator> <name>now</name> <operator>+</operator> <name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>usecs</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tims</name><index>[<expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tims_used</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>resort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_dispatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TESTME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> <name>elaps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>infunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>double</name></type>
<name>elaps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">100000</literal> <operator>-</operator>
<literal type="number">10</literal> <operator>*</operator> <name><name>start</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">100000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>infunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_panic</name><argument_list>(<argument><expr><literal type="string">"read: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stdin:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>tfunc0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tfunc1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>tfunc0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.1f -- %d: %s\n"</literal></expr></argument>, <argument><expr><call><name>elaps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tfunc1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.1f -- %d: %s\n"</literal></expr></argument>, <argument><expr><call><name>elaps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tfunc2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.1f -- %d\n"</literal></expr></argument>, <argument><expr><call><name>elaps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>first</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>second</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>second</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.1f -- %d: %s\n"</literal></expr></argument>, <argument><expr><call><name>elaps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_start_utimer</name><argument_list>(<argument><expr><literal type="number">5500000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_stop_timer</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>poll_start_timer</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tfunc0</name></expr></argument>, <argument><expr><literal type="string">"1 second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>first</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.1f -- %d: %s\n"</literal></expr></argument>, <argument><expr><call><name>elaps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_start_timer</name><argument_list>(<argument><expr><literal type="number">3700</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_stop_timer</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>poll_start_timer</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tfunc1</name></expr></argument>, <argument><expr><literal type="string">"1/4 second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_register</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>infunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RPOLL_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>poll_start_timer</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tfunc0</name></expr></argument>, <argument><expr><literal type="string">"1 second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poll_start_timer</name><argument_list>(<argument><expr><literal type="number">2500</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>poll_start_utimer</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tfunc2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>poll_dispatch</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
