<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/cortex-strings/benchmarks/dhry/dhry_1.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dhry.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Win386"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" -otexan -zp8 -5r -ms"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CNW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Win386"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" No optimisation"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Dos4GW"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" -otexan -zp8 -5r -ms"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Dos4GW"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" No optimisation"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Win32NT"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" -otexan -zp8 -5r -ms"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CNNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 Win32NT"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" No optimisation"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COO2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 OS/2-32"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" -otexan -zp8 -5r -ms"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CNO2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compiler</name></cpp:macro> <cpp:value>"Watcom C/C++ 10.5 OS/2-32"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>options</name></cpp:macro> <cpp:value>" No optimisation"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>Rec_Pointer</name></type> <name>Ptr_Glob</name></decl>,
<decl><type ref="prev"/><name>Next_Ptr_Glob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Int_Glob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>Bool_Glob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>Ch_1_Glob</name></decl>,
<decl><type ref="prev"/><name>Ch_2_Glob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Arr_1_Glob</name> <index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Arr_2_Glob</name> <index>[<expr><literal type="number">50</literal></expr>]</index> <index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getinput</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>Reg_Define</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><literal type="string">"Register option Selected."</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>Enumeration</name></type> <name>Func_1</name> <parameter_list>(<parameter><decl><type><name>Capital_Letter</name></type> <name>Ch_1_Par_Val</name></decl></parameter>,
<parameter><decl><type><name>Capital_Letter</name></type> <name>Ch_2_Par_Val</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>Proc_1</name> <parameter_list>(<parameter><decl><type><name>REG</name> <name>Rec_Pointer</name></type> <name>Ptr_Val_Par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_2</name> <parameter_list>(<parameter><decl><type><name>One_Fifty</name> <modifier>*</modifier></type><name>Int_Par_Ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_3</name> <parameter_list>(<parameter><decl><type><name>Rec_Pointer</name> <modifier>*</modifier></type><name>Ptr_Ref_Par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_4</name> <parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_5</name> <parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_6</name> <parameter_list>(<parameter><decl><type><name>Enumeration</name></type> <name>Enum_Val_Par</name></decl></parameter>, <parameter><decl><type><name>Enumeration</name> <modifier>*</modifier></type><name>Enum_Ref_Par</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_7</name> <parameter_list>(<parameter><decl><type><name>One_Fifty</name></type> <name>Int_1_Par_Val</name></decl></parameter>, <parameter><decl><type><name>One_Fifty</name></type> <name>Int_2_Par_Val</name></decl></parameter>,
<parameter><decl><type><name>One_Fifty</name> <modifier>*</modifier></type><name>Int_Par_Ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Proc_8</name> <parameter_list>(<parameter><decl><type><name>Arr_1_Dim</name></type> <name>Arr_1_Par_Ref</name></decl></parameter>, <parameter><decl><type><name>Arr_2_Dim</name></type> <name>Arr_2_Par_Ref</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>Int_1_Par_Val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Int_2_Par_Val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Boolean</name></type> <name>Func_2</name> <parameter_list>(<parameter><decl><type><name>Str_30</name></type> <name>Str_1_Par_Ref</name></decl></parameter>, <parameter><decl><type><name>Str_30</name></type> <name>Str_2_Par_Ref</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Too_Small_Time</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<decl_stmt><decl><type><name>double</name></type> <name>Begin_Time</name></decl>,
<decl><type ref="prev"/><name>End_Time</name></decl>,
<decl><type ref="prev"/><name>User_Time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>Microseconds</name></decl>,
<decl><type ref="prev"/><name>Dhrystones_Per_Second</name></decl>,
<decl><type ref="prev"/><name>Vax_Mips</name></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>




<block>{<block_content>
<function_decl><type><name>double</name></type> <name>dtime</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>One_Fifty</name></type> <name>Int_1_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REG</name> <name>One_Fifty</name></type> <name>Int_2_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>One_Fifty</name></type> <name>Int_3_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REG</name> <name>char</name></type> <name>Ch_Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Enumeration</name></type> <name>Enum_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str_30</name></type> <name>Str_1_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str_30</name></type> <name>Str_2_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REG</name> <name>int</name></type> <name>Run_Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REG</name> <name>int</name></type> <name>Number_Of_Runs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endit</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>Ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>general</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">" "</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>getinput</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>getinput</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Ap</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"Dhry.txt"</literal></expr></argument>,<argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Can not open Dhry.txt\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Press any key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>Next_Ptr_Glob</name> <operator>=</operator> <operator>(</operator><name>Rec_Pointer</name><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Rec_Type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Ptr_Glob</name> <operator>=</operator> <operator>(</operator><name>Rec_Pointer</name><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Rec_Type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name> <operator>=</operator> <name>Next_Ptr_Glob</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name> <operator>=</operator> <name>Ident_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name> <operator>=</operator> <name>Ident_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>,
<argument><expr><literal type="string">"DHRYSTONE PROGRAM, SOME STRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>Str_1_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 1'ST STRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Arr_2_Glob</name> <index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>





<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Dhrystone Benchmark, Version 2.1 (Language: C or C++)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getinput</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"No run time input data\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"With run time input data\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Compiler %s\n"</literal></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Optimisation %s\n"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ROPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Register option selected\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Register option not selected\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>Reg_Define</name></expr></argument>, <argument><expr><literal type="string">"Register option Not selected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
























<expr_stmt><expr><name>Number_Of_Runs</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

<do>do
<block>{<block_content>

<expr_stmt><expr><name>Number_Of_Runs</name> <operator>=</operator> <name>Number_Of_Runs</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Arr_2_Glob</name> <index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>Begin_Time</name> <operator>=</operator> <call><name>dtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>Run_Index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>Run_Index</name> <operator>&lt;=</operator> <name>Number_Of_Runs</name></expr>;</condition> <incr><expr><operator>++</operator><name>Run_Index</name></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>Proc_5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Proc_4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Int_1_Loc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_2_Loc</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>Str_2_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 2'ND STRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Enum_Loc</name> <operator>=</operator> <name>Ident_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bool_Glob</name> <operator>=</operator> <operator>!</operator> <call><name>Func_2</name> <argument_list>(<argument><expr><name>Str_1_Loc</name></expr></argument>, <argument><expr><name>Str_2_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>Int_1_Loc</name> <operator>&lt;</operator> <name>Int_2_Loc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Int_3_Loc</name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name>Int_1_Loc</name> <operator>-</operator> <name>Int_2_Loc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Proc_7</name> <argument_list>(<argument><expr><name>Int_1_Loc</name></expr></argument>, <argument><expr><name>Int_2_Loc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Int_3_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Int_1_Loc</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>Proc_8</name> <argument_list>(<argument><expr><name>Arr_1_Glob</name></expr></argument>, <argument><expr><name>Arr_2_Glob</name></expr></argument>, <argument><expr><name>Int_1_Loc</name></expr></argument>, <argument><expr><name>Int_3_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Proc_1</name> <argument_list>(<argument><expr><name>Ptr_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>Ch_Index</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</init> <condition><expr><name>Ch_Index</name> <operator>&lt;=</operator> <name>Ch_2_Glob</name></expr>;</condition> <incr><expr><operator>++</operator><name>Ch_Index</name></expr></incr>)</control>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Enum_Loc</name> <operator>==</operator> <call><name>Func_1</name> <argument_list>(<argument><expr><name>Ch_Index</name></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><call><name>Proc_6</name> <argument_list>(<argument><expr><name>Ident_1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Enum_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>Str_2_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 3'RD STRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_2_Loc</name> <operator>=</operator> <name>Run_Index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_Glob</name> <operator>=</operator> <name>Run_Index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>Int_2_Loc</name> <operator>=</operator> <name>Int_2_Loc</name> <operator>*</operator> <name>Int_1_Loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_1_Loc</name> <operator>=</operator> <name>Int_2_Loc</name> <operator>/</operator> <name>Int_3_Loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_2_Loc</name> <operator>=</operator> <literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name>Int_2_Loc</name> <operator>-</operator> <name>Int_3_Loc</name><operator>)</operator> <operator>-</operator> <name>Int_1_Loc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Proc_2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Int_1_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></for>





<expr_stmt><expr><name>End_Time</name> <operator>=</operator> <call><name>dtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>User_Time</name> <operator>=</operator> <name>End_Time</name> <operator>-</operator> <name>Begin_Time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%12.0f runs %6.2f seconds \n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>Number_Of_Runs</name></expr></argument>, <argument><expr><name>User_Time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>User_Time</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>User_Time</name> <operator>&lt;</operator> <literal type="number">0.1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Number_Of_Runs</name> <operator>=</operator> <name>Number_Of_Runs</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
while <condition>(<expr><name>count</name> <operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Final values (* implementation-dependent):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Int_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_Glob</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>Int_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Bool_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Bool_Glob</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Bool_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Ch_1_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_1_Glob</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c "</literal></expr></argument>, <argument><expr><name>Ch_1_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Ch_2_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_2_Glob</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>Ch_2_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Arr_1_Glob[8]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Arr_1_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>Arr_1_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Arr_2_Glob8/7: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Arr_2_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>Number_Of_Runs</name> <operator>+</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%10d\n"</literal></expr></argument>, <argument><expr><name><name>Arr_2_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Ptr_Glob-&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Ptr_Comp: * %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Discr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Enum_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Int_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Str_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>,
<argument><expr><literal type="string">"DHRYSTONE PROGRAM, SOME STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Next_Ptr_Glob-&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Ptr_Comp: * %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" same as above\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Discr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Enum_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" Int_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Str_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>,
<argument><expr><literal type="string">"DHRYSTONE PROGRAM, SOME STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Int_1_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_1_Loc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>Int_1_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Int_2_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_2_Loc</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Int_2_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Int_3_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_3_Loc</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>Int_3_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Enum_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Enum_Loc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Enum_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Str_1_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>Str_1_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 1'ST STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>Str_1_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Str_2_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>Str_2_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 2'ND STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>Str_2_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>User_Time</name> <operator>&lt;</operator> <name>Too_Small_Time</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Measured time too small to obtain meaningful results\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Please increase number of runs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Microseconds</name> <operator>=</operator> <name>User_Time</name> <operator>*</operator> <name>Mic_secs_Per_Second</name>
<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>Number_Of_Runs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Dhrystones_Per_Second</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>Number_Of_Runs</name> <operator>/</operator> <name>User_Time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Vax_Mips</name> <operator>=</operator> <name>Dhrystones_Per_Second</name> <operator>/</operator> <literal type="number">1757.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Microseconds for one run through Dhrystone: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%12.2lf \n"</literal></expr></argument>, <argument><expr><name>Microseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Dhrystones per Second: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%10.0lf \n"</literal></expr></argument>, <argument><expr><name>Dhrystones_Per_Second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"VAX MIPS rating = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%12.2lf \n"</literal></expr></argument>,<argument><expr><name>Vax_Mips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>getinput</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Enter the following which will be added with results to file DHRY.TXT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"When submitting a number of results you need only provide details once\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"but a cross reference such as an abbreviated CPU type would be useful.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"You can kill (exit or close) the program now and no data will be added.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"PC Supplier/model ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"CPU chip ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Clock MHz ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Cache size ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Chipset &amp; H/W options ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"OS/DOS version ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Your name ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Company/Location ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"E-mail address ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name><name>general</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"-------------------- -----------------------------------"</literal>
<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Dhrystone Benchmark Version 2.1 (Language: C++)\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"PC model %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"CPU %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Clock MHz %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Cache %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Options %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"OS/DOS %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Compiler %s\n"</literal></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"OptLevel %s\n"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Run by %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"From %s\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Mail %s\n\n"</literal></expr></argument>, <argument><expr><name><name>general</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Final values (* implementation-dependent):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Int_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_Glob</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Int_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Bool_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Bool_Glob</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Bool_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Ch_1_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_1_Glob</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>Ch_1_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Ch_2_Glob: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_2_Glob</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>Ch_2_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Arr_1_Glob[8]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Arr_1_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Arr_1_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Arr_2_Glob8/7: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Arr_2_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>Number_Of_Runs</name> <operator>+</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%10d\n"</literal></expr></argument>, <argument><expr><name><name>Arr_2_Glob</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Ptr_Glob-&gt; \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Ptr_Comp: * %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Discr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Enum_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Int_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Str_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>,
<argument><expr><literal type="string">"DHRYSTONE PROGRAM, SOME STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Next_Ptr_Glob-&gt; \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Ptr_Comp: * %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" same as above\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Discr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>Discr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Enum_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Int_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">" Str_Comp: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>,
<argument><expr><literal type="string">"DHRYSTONE PROGRAM, SOME STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>Next_Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Str_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Int_1_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_1_Loc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Int_1_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Int_2_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_2_Loc</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Int_2_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Int_3_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Int_3_Loc</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Int_3_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Enum_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Enum_Loc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Enum_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Str_1_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>Str_1_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 1'ST STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>Str_1_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"Str_2_Loc: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>Str_2_Loc</name></expr></argument>, <argument><expr><literal type="string">"DHRYSTONE PROGRAM, 2'ND STRING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"O.K. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"WRONG "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>Str_2_Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>Reg_Define</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>,<argument><expr><literal type="string">"Microseconds 1 loop: %12.2lf\n"</literal></expr></argument>,<argument><expr><name>Microseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>,<argument><expr><literal type="string">"Dhrystones / second: %10.0lf\n"</literal></expr></argument>,<argument><expr><name>Dhrystones_Per_Second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>,<argument><expr><literal type="string">"VAX MIPS rating: %12.2lf\n\n"</literal></expr></argument>,<argument><expr><name>Vax_Mips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"A new results file will have been created in the same directory as the\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">".EXE files if one did not already exist. If you made a mistake on input, \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"you can use a text editor to correct it, delete the results or copy \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"them to a different file name. If you intend to run multiple tests you\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"you may wish to rename DHRY.TXT with a more informative title.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Please submit feedback and results files as a posting in Section 12\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"or to Roy_Longbottom@compuserve.com\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getinput</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Press any key to exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nIf this is displayed you must close the window in the normal way\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_1</name> <parameter_list>(<parameter><decl><type><name>REG</name> <name>Rec_Pointer</name></type> <name>Ptr_Val_Par</name></decl></parameter>)</parameter_list>



<block>{<block_content>
<decl_stmt><decl><type><name>REG</name> <name>Rec_Pointer</name></type> <name>Next_Record</name> <init>= <expr><name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>structassign</name> <argument_list>(<argument><expr><operator>*</operator><name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>, <argument><expr><operator>*</operator><name>Ptr_Glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Next_Record</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name>
<operator>=</operator> <name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Next_Record</name><operator>-&gt;</operator><name>Ptr_Comp</name></name> <operator>=</operator> <name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Proc_3</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>Next_Record</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>Next_Record</name><operator>-&gt;</operator><name>Discr</name></name> <operator>==</operator> <name>Ident_1</name></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><name><name>Next_Record</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Proc_6</name> <argument_list>(<argument><expr><name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Next_Record</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Enum_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Next_Record</name><operator>-&gt;</operator><name>Ptr_Comp</name></name> <operator>=</operator> <name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Proc_7</name> <argument_list>(<argument><expr><name><name>Next_Record</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Next_Record</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>structassign</name> <argument_list>(<argument><expr><operator>*</operator><name>Ptr_Val_Par</name></expr></argument>, <argument><expr><operator>*</operator><name><name>Ptr_Val_Par</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_2</name> <parameter_list>(<parameter><decl><type><name>One_Fifty</name> <modifier>*</modifier></type><name>Int_Par_Ref</name></decl></parameter>)</parameter_list>




<block>{<block_content>
<decl_stmt><decl><type><name>One_Fifty</name></type> <name>Int_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Enumeration</name></type> <name>Enum_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Int_Loc</name> <operator>=</operator> <operator>*</operator><name>Int_Par_Ref</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>Ch_1_Glob</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><name>Int_Loc</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Int_Par_Ref</name> <operator>=</operator> <name>Int_Loc</name> <operator>-</operator> <name>Int_Glob</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Enum_Loc</name> <operator>=</operator> <name>Ident_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block>
while <condition>(<expr><name>Enum_Loc</name> <operator>!=</operator> <name>Ident_1</name></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_3</name> <parameter_list>(<parameter><decl><type><name>Rec_Pointer</name> <modifier>*</modifier></type><name>Ptr_Ref_Par</name></decl></parameter>)</parameter_list>




<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Ptr_Glob</name> <operator>!=</operator> <name>Null</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>Ptr_Ref_Par</name> <operator>=</operator> <name><name>Ptr_Glob</name><operator>-&gt;</operator><name>Ptr_Comp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Proc_7</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>Int_Glob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Ptr_Glob</name><operator>-&gt;</operator><name>variant</name><operator>.</operator><name>var_1</name><operator>.</operator><name>Int_Comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_4</name> <parameter_list>()</parameter_list>


<block>{<block_content>
<decl_stmt><decl><type><name>Boolean</name></type> <name>Bool_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Bool_Loc</name> <operator>=</operator> <name>Ch_1_Glob</name> <operator>==</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Bool_Glob</name> <operator>=</operator> <name>Bool_Loc</name> <operator>|</operator> <name>Bool_Glob</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Ch_2_Glob</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_5</name> <parameter_list>()</parameter_list>


<block>{<block_content>
<expr_stmt><expr><name>Ch_1_Glob</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Bool_Glob</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOSTRUCTASSIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call>
<specifier>register</specifier> <name>char</name> <operator>*</operator><name>d</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>l</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>double</name></type> <name>dtime</name><parameter_list>()</parameter_list>
<block>{<block_content>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HZ</name></cpp:macro> <cpp:value>CLOCKS_PER_SEC</cpp:value></cpp:define>
<decl_stmt><decl><type><name>clock_t</name></type> <name>tnow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tnow</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>tnow</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>HZ</name></expr>;</expr_stmt>
<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>
</unit>
