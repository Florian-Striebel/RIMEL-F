<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/cortex-strings/benchmarks/dhry/dhry_2.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dhry.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Int_Glob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>Ch_1_Glob</name></decl>;</decl_stmt>

<function_decl><type><name>Boolean</name></type> <name>Func_3</name> <parameter_list>(<parameter><decl><type><name>Enumeration</name></type> <name>Enum_Par_Val</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Proc_6</name> <parameter_list>(<parameter><decl><type><name>Enumeration</name></type> <name>Enum_Val_Par</name></decl></parameter>, <parameter><decl><type><name>Enumeration</name> <modifier>*</modifier></type><name>Enum_Ref_Par</name></decl></parameter>)</parameter_list>




<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Enum_Val_Par</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>Func_3</name> <argument_list>(<argument><expr><name>Enum_Val_Par</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>Enum_Val_Par</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>Ident_1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Ident_2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>Int_Glob</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>Ident_3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Ident_4</name></expr>:</case> <break>break;</break>
<case>case <expr><name>Ident_5</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Enum_Ref_Par</name> <operator>=</operator> <name>Ident_3</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_7</name> <parameter_list>(<parameter><decl><type><name>One_Fifty</name></type> <name>Int_1_Par_Val</name></decl></parameter>, <parameter><decl><type><name>One_Fifty</name></type> <name>Int_2_Par_Val</name></decl></parameter>,
<parameter><decl><type><name>One_Fifty</name> <modifier>*</modifier></type><name>Int_Par_Ref</name></decl></parameter>)</parameter_list>









<block>{<block_content>
<decl_stmt><decl><type><name>One_Fifty</name></type> <name>Int_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Int_Loc</name> <operator>=</operator> <name>Int_1_Par_Val</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Int_Par_Ref</name> <operator>=</operator> <name>Int_2_Par_Val</name> <operator>+</operator> <name>Int_Loc</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Proc_8</name> <parameter_list>(<parameter><decl><type><name>Arr_1_Dim</name></type> <name>Arr_1_Par_Ref</name></decl></parameter>, <parameter><decl><type><name>Arr_2_Dim</name></type> <name>Arr_2_Par_Ref</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>Int_1_Par_Val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Int_2_Par_Val</name></decl></parameter>)</parameter_list>





<block>{<block_content>
<decl_stmt><decl><type><name>REG</name> <name>One_Fifty</name></type> <name>Int_Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REG</name> <name>One_Fifty</name></type> <name>Int_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Int_Loc</name> <operator>=</operator> <name>Int_1_Par_Val</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Arr_1_Par_Ref</name> <index>[<expr><name>Int_Loc</name></expr>]</index></name> <operator>=</operator> <name>Int_2_Par_Val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Arr_1_Par_Ref</name> <index>[<expr><name>Int_Loc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Arr_1_Par_Ref</name> <index>[<expr><name>Int_Loc</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Arr_1_Par_Ref</name> <index>[<expr><name>Int_Loc</name><operator>+</operator><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name>Int_Loc</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>Int_Index</name> <operator>=</operator> <name>Int_Loc</name></expr>;</init> <condition><expr><name>Int_Index</name> <operator>&lt;=</operator> <name>Int_Loc</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>Int_Index</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Arr_2_Par_Ref</name> <index>[<expr><name>Int_Loc</name></expr>]</index> <index>[<expr><name>Int_Index</name></expr>]</index></name> <operator>=</operator> <name>Int_Loc</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>Arr_2_Par_Ref</name> <index>[<expr><name>Int_Loc</name></expr>]</index> <index>[<expr><name>Int_Loc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Arr_2_Par_Ref</name> <index>[<expr><name>Int_Loc</name><operator>+</operator><literal type="number">20</literal></expr>]</index> <index>[<expr><name>Int_Loc</name></expr>]</index></name> <operator>=</operator> <name><name>Arr_1_Par_Ref</name> <index>[<expr><name>Int_Loc</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_Glob</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Enumeration</name></type> <name>Func_1</name> <parameter_list>(<parameter><decl><type><name>Capital_Letter</name></type> <name>Ch_1_Par_Val</name></decl></parameter>,
<parameter><decl><type><name>Capital_Letter</name></type> <name>Ch_2_Par_Val</name></decl></parameter>)</parameter_list>






<block>{<block_content>
<decl_stmt><decl><type><name>Capital_Letter</name></type> <name>Ch_1_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Capital_Letter</name></type> <name>Ch_2_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Ch_1_Loc</name> <operator>=</operator> <name>Ch_1_Par_Val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Ch_2_Loc</name> <operator>=</operator> <name>Ch_1_Loc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_2_Loc</name> <operator>!=</operator> <name>Ch_2_Par_Val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>Ident_1</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Ch_1_Glob</name> <operator>=</operator> <name>Ch_1_Loc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Ident_2</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>Boolean</name></type> <name>Func_2</name> <parameter_list>(<parameter><decl><type><name>Str_30</name></type> <name>Str_1_Par_Ref</name></decl></parameter>, <parameter><decl><type><name>Str_30</name></type> <name>Str_2_Par_Ref</name></decl></parameter>)</parameter_list>





<block>{<block_content>
<decl_stmt><decl><type><name>REG</name> <name>One_Thirty</name></type> <name>Int_Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Capital_Letter</name></type> <name>Ch_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Int_Loc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>Int_Loc</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>Func_1</name> <argument_list>(<argument><expr><name><name>Str_1_Par_Ref</name><index>[<expr><name>Int_Loc</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>Str_2_Par_Ref</name><index>[<expr><name>Int_Loc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Ident_1</name></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><name>Ch_Loc</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_Loc</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>Ch_Loc</name> <operator>&gt;=</operator> <literal type="char">'W'</literal> <operator>&amp;&amp;</operator> <name>Ch_Loc</name> <operator>&lt;</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Int_Loc</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Ch_Loc</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>Str_1_Par_Ref</name></expr></argument>, <argument><expr><name>Str_2_Par_Ref</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>
<expr_stmt><expr><name>Int_Loc</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Int_Glob</name> <operator>=</operator> <name>Int_Loc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>Boolean</name></type> <name>Func_3</name> <parameter_list>(<parameter><decl><type><name>Enumeration</name></type> <name>Enum_Par_Val</name></decl></parameter>)</parameter_list>




<block>{<block_content>
<decl_stmt><decl><type><name>Enumeration</name></type> <name>Enum_Loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Enum_Loc</name> <operator>=</operator> <name>Enum_Par_Val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Enum_Loc</name> <operator>==</operator> <name>Ident_3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
