<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/cortex-strings/benchmarks/dhry/dhry.h">









































































































































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mic_secs_Per_Second</name></cpp:macro> <cpp:value>1000000.0</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOSTRUCTASSIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>structassign</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(&amp;(d), &amp;(s), sizeof(d))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>structassign</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOENUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ident_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ident_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ident_3</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ident_4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ident_5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>Enumeration</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><enum>enum <block>{<decl><name>Ident_1</name></decl>, <decl><name>Ident_2</name></decl>, <decl><name>Ident_3</name></decl>, <decl><name>Ident_4</name></decl>, <decl><name>Ident_5</name></decl>}</block></enum></type>
<name>Enumeration</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Null</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>One_Thirty</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>One_Fifty</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>Capital_Letter</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>Boolean</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name><name>Str_30</name> <index>[<expr><literal type="number">31</literal></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name><name>Arr_1_Dim</name> <index>[<expr><literal type="number">50</literal></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name><name>Arr_2_Dim</name> <index>[<expr><literal type="number">50</literal></expr>]</index> <index>[<expr><literal type="number">50</literal></expr>]</index></name>;</typedef>

<typedef>typedef <type><struct>struct <name>record</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>record</name></name> <modifier>*</modifier></type><name>Ptr_Comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Enumeration</name></type> <name>Discr</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>Enumeration</name></type> <name>Enum_Comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Int_Comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Str_Comp</name> <index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>var_1</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>Enumeration</name></type> <name>E_Comp_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Str_2_Comp</name> <index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>var_2</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name>Ch_1_Comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>Ch_2_Comp</name></decl>;</decl_stmt>
}</block> <decl><name>var_3</name></decl>;</struct>
}</block> <decl><name>variant</name></decl>;</union>
}</block></struct></type> <name>Rec_Type</name><operator>,</operator> *<name>Rec_Pointer</name>;</typedef>



</unit>
