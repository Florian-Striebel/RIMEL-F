<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/refresh.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)refresh.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: refresh.c,v 1.58 2021/09/09 20:24:07 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_nextline</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_addc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_update_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_insert</name> <parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_delete</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_fastputc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_clear_eol</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re__strncopy</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re__copy_and_pad</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFRESH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>re_printstr</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__F</name></cpp:macro> <cpp:value>el-&gt;el_errfile</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELRE_ASSERT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do if ( a) { (void) fprintf b; c; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELRE_DEBUG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ELRE_ASSERT(a,b,;)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_printstr</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"%s:\""</literal><operator>,</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>f</name> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"%c"</literal><operator>,</operator> <operator>*</operator><name>f</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0177</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"\"\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELRE_ASSERT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELRE_DEBUG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_nextline</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lins</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier></type><name>firstline</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>firstline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>firstline</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ELRE_ASSERT</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"\r\nre_putc: overflow! r_cursor.v == %d &gt; %d\r\n"</literal><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name><operator>,</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>abort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_addc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>ct_chr_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHTYPE_TAB</name></expr>:</case>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CHTYPE_NL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oldv</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldv</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_nextline</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CHTYPE_PRINT</name></expr>:</case>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>visbuf</name><index>[<expr><name>VISUAL_WIDTH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>=
<expr><call><name>ct_visual_char</name><argument_list>(<argument><expr><name>visbuf</name></expr></argument>, <argument><expr><name>VISUAL_WIDTH_MAX</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>visbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_putliteral</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>coord_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizeh</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>literal_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>sizeh</name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>sizeh</name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>MB_FILL_CHAR</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <name>sizeh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name>sizeh</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_nextline</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_putc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>coord_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizeh</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"printing %5x '%lc'\r\n"</literal><operator>,</operator> <name>c</name><operator>,</operator> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>shift</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name>sizeh</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>MB_FILL_CHAR</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <name>sizeh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>v</name></name></expr>]</index><index>[<expr><name>sizeh</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_nextline</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_refresh</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rhdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>coord_t</name></type> <name>cur</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>termsz</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"el-&gt;el_line.buffer = :%ls:\r\n"</literal><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>literal_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>prompt_print</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EL_RPROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name>
<operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prompt_print</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EL_PROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>notyet</name></expr></cpp:if>
<expr_stmt><expr><name>termsz</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>*</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>&gt;</operator> <name>termsz</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>size_t</name></type> <name>rem</name> <init>= <expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>-</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator><operator>%</operator><name>termsz</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name>rem</name>
<operator>-</operator> <operator>(</operator><name>termsz</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rem</name> <operator>/</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>*</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>st</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>+</operator> <name>w</name> <operator>&gt;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>v</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>re_addc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>h</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rhdiff</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name> <operator>-</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name> <operator>&amp;&amp;</operator> <name>rhdiff</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<while>while <condition>(<expr><operator>--</operator><name>rhdiff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>prompt_print</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EL_RPROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_newcv</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"term.h=%d vcur.h=%d vcur.v=%d vdisplay[0]=\r\n:%80.80s:\r\n"</literal><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name><operator>,</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"updating %d lines.\r\n"</literal><operator>,</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_newcv</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_newcv</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>re_update_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>re__copy_and_pad</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"\r\nel-&gt;el_refresh.r_cursor.v=%d,el-&gt;el_refresh.r_oldcv=%d i=%d\r\n"</literal><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name><operator>,</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_newcv</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_clear_EOL</name><argument_list>(<argument><expr><name>el</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>wcslen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFRESH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">L"C\b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_newcv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"\r\ncursor.h = %d, cursor.v = %d, cur.h = %d, cur.v = %d\r\n"</literal><operator>,</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name><operator>,</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name><operator>,</operator>
<name><name>cur</name><operator>.</operator><name>h</name></name><operator>,</operator> <name><name>cur</name><operator>.</operator><name>v</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_goto_bottom</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>re_insert</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wchar_t</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>int</name> <name>dat</name></expr></argument>, <argument><expr><name>int</name> <name>dlen</name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>dlen</name> <operator>-</operator> <name>dat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>dlen</name> <operator>-</operator> <name>dat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_insert() starting: %d at %d max %d, d == \"%s\"\n"</literal><operator>,</operator>
<name>num</name><operator>,</operator> <name>dat</name><operator>,</operator> <name>dlen</name><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"s == \"%s\"\n"</literal><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>num</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>d</name><index>[<expr><name>dat</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"re_insert() after insert: %d at %d max %d, d == \"%s\"\n"</literal><operator>,</operator>
<name>num</name><operator>,</operator> <name>dat</name><operator>,</operator> <name>dlen</name><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"s == \"%s\"\n"</literal><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>dat</name></expr>;</init> <condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>d</name> <operator>+</operator> <name>dlen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>num</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_insert() after copy: %d at %d max %d, %s == \"%s\"\n"</literal><operator>,</operator>
<name>num</name><operator>,</operator> <name>dat</name><operator>,</operator> <name>dlen</name><operator>,</operator> <name>d</name><operator>,</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"s == \"%s\"\n"</literal><operator>,</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>re_delete</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wchar_t</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>int</name> <name>dat</name></expr></argument>, <argument><expr><name>int</name> <name>dlen</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dat</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name>dlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>dat</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_delete() starting: %d at %d max %d, d == \"%s\"\n"</literal><operator>,</operator>
<name>num</name><operator>,</operator> <name>dat</name><operator>,</operator> <name>dlen</name><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>dat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>num</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>d</name><index>[<expr><name>dlen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_delete() after delete: %d at %d max %d, d == \"%s\"\n"</literal><operator>,</operator>
<name>num</name><operator>,</operator> <name>dat</name><operator>,</operator> <name>dlen</name><operator>,</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>re__strncopy</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_clear_eol</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_clear_eol sx %d, fx %d, diff %d\n"</literal><operator>,</operator>
<name>sx</name><operator>,</operator> <name>fx</name><operator>,</operator> <name>diff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>-</operator><name>fx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>-</operator><name>sx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&gt;</operator> <name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>fx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;</operator> <name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>sx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"re_clear_eol %d\n"</literal><operator>,</operator> <name>diff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_clear_EOL</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_END_KEEP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_update_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ofd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ols</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nfd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nls</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ne</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>osb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ose</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nsb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fx</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>old</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>new</name></expr>;</init> <condition><expr><operator>*</operator><name>o</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>o</name> <operator>==</operator> <operator>*</operator><name>n</name><operator>)</operator></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><name>ofd</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfd</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>




<while>while <condition>(<expr><name>ofd</name> <operator>&lt;</operator> <name>o</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>oe</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>oe</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<while>while <condition>(<expr><name>nfd</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ne</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ne</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ofd</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nfd</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"no difference.\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>o</name> <operator>&gt;</operator> <name>ofd</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <name>nfd</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>o</name> <operator>==</operator> <operator>*</operator><operator>--</operator><name>n</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <operator>++</operator><name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <operator>++</operator><name>n</name></expr>;</expr_stmt>




<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ofd</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ofd</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>nfd</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nls</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>n</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>ofd</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</init>
<condition><expr><name>p</name> <operator>&lt;</operator> <name>nls</name> <operator>&amp;&amp;</operator> <name>o</name> <operator>&lt;</operator> <name>ols</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>o</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>;</condition>
<incr><expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>nse</name> <operator>-</operator> <name>nsb</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>ofd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nfd</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>nfd</name></expr><operator>,</operator> <expr><name>o</name> <operator>=</operator> <name>ofd</name></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>ols</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>o</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nfd</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>o</name></expr>;</init>
<condition><expr><name>p</name> <operator>&lt;</operator> <name>ols</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>nls</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>n</name></expr>;</condition>
<incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ose</name> <operator>-</operator> <name>osb</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>o</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>o</name><operator>)</operator> <operator>&gt;</operator> <name>o</name> <operator>-</operator> <name>ofd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>nfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oe</name> <operator>-</operator> <name>ols</name><operator>)</operator> <operator>&lt;</operator> <name>MIN_END_KEEP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <name>oe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>osb</name> <operator>-</operator> <name>ofd</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ols</name> <operator>-</operator> <name>ose</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_INSERT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <name>oe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ols</name> <operator>-</operator> <name>ofd</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>nls</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <name>oe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_DELETE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <name>oe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ols</name> <operator>-</operator> <name>ofd</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>nls</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ols</name> <operator>=</operator> <name>oe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nls</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ose</name> <operator>-</operator> <name>osb</name><operator>)</operator> <operator>&lt;</operator> <name>MIN_END_KEEP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>osb</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ose</name> <operator>=</operator> <name>ols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsb</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nse</name> <operator>=</operator> <name>nls</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>osb</name> <operator>-</operator> <name>ofd</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ols</name> <operator>-</operator> <name>ose</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"fx %d, sx %d\n"</literal><operator>,</operator> <name>fx</name><operator>,</operator> <name>sx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"ofd %td, osb %td, ose %td, ols %td, oe %td\n"</literal><operator>,</operator>
<name>ofd</name> <operator>-</operator> <name>old</name><operator>,</operator> <name>osb</name> <operator>-</operator> <name>old</name><operator>,</operator> <name>ose</name> <operator>-</operator> <name>old</name><operator>,</operator> <name>ols</name> <operator>-</operator> <name>old</name><operator>,</operator> <name>oe</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"nfd %td, nsb %td, nse %td, nls %td, ne %td\n"</literal><operator>,</operator>
<name>nfd</name> <operator>-</operator> <name>new</name><operator>,</operator> <name>nsb</name> <operator>-</operator> <name>new</name><operator>,</operator> <name>nse</name> <operator>-</operator> <name>new</name><operator>,</operator> <name>nls</name> <operator>-</operator> <name>new</name><operator>,</operator> <name>ne</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"xxx-xxx:\"00000000001111111111222222222233333333334\"\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"xxx-xxx:\"01234567890123456789012345678901234567890\"\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFRESH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"old- oe"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>oe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"new- ne"</literal></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"old-ofd"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>ofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"new-nfd"</literal></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"ofd-osb"</literal></expr></argument>, <argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>osb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"nfd-nsb"</literal></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>nsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"osb-ose"</literal></expr></argument>, <argument><expr><name>osb</name></expr></argument>, <argument><expr><name>ose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"nsb-nse"</literal></expr></argument>, <argument><expr><name>nsb</name></expr></argument>, <argument><expr><name>nse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"ose-ols"</literal></expr></argument>, <argument><expr><name>ose</name></expr></argument>, <argument><expr><name>ols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"nse-nls"</literal></expr></argument>, <argument><expr><name>nse</name></expr></argument>, <argument><expr><name>nls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"ols- oe"</literal></expr></argument>, <argument><expr><name>ols</name></expr></argument>, <argument><expr><name>oe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_printstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">"nls- ne"</literal></expr></argument>, <argument><expr><name>nls</name></expr></argument>, <argument><expr><name>ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
































<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ols</name> <operator>!=</operator> <name>oe</name><operator>)</operator></expr> ?</condition><then> <expr><name>oe</name></expr> </then><else>: <expr><name>ose</name></expr></else></ternary></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsb</name> <operator>!=</operator> <name>nfd</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>fx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>+</operator> <name>fx</name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"first diff insert at %td...\r\n"</literal><operator>,</operator> <name>nfd</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nfd</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>nsb</name> <operator>!=</operator> <name>ne</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"with stuff to keep at end\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><operator>!</operator><name>EL_CAN_INSERT</name></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"ERROR: cannot insert in early first diff\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_insertwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ofd</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>-</operator> <name>fx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>nfd</name> <operator>+</operator> <name>fx</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re__strncopy</name><argument_list>(<argument><expr><name>ofd</name> <operator>+</operator> <name>fx</name></expr></argument>, <argument><expr><name>nfd</name> <operator>+</operator> <name>fx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"without anything to save\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re__strncopy</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"first diff delete at %td...\r\n"</literal><operator>,</operator> <name>ofd</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ofd</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>osb</name> <operator>!=</operator> <name>oe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"with stuff to save at end\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><operator>!</operator><name>EL_CAN_DELETE</name></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"ERROR: cannot delete in first diff\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_deletechars</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>-</operator><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_delete</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ofd</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><operator>-</operator><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re__strncopy</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"but with nothing left to save\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_eol</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>oe</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ne</name> <operator>-</operator> <name>new</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ose</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>+</operator> <name>fx</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"second diff delete at %td...\r\n"</literal><operator>,</operator> <operator>(</operator><name>ose</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>+</operator> <name>fx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ose</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>+</operator> <name>fx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>ols</name> <operator>!=</operator> <name>oe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"with stuff to save at end\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><operator>!</operator><name>EL_CAN_DELETE</name></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"ERROR: cannot delete in second diff\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_deletechars</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>-</operator><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nse</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"but with nothing left to save\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nse</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_eol</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>oe</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ne</name> <operator>-</operator> <name>new</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsb</name> <operator>!=</operator> <name>nfd</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>osb</name> <operator>-</operator> <name>ofd</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"late first diff insert at %td...\r\n"</literal><operator>,</operator>
<name>nfd</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nfd</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>nsb</name> <operator>!=</operator> <name>ne</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"with stuff to keep at end\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>osb</name> <operator>-</operator> <name>ofd</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><operator>!</operator><name>EL_CAN_INSERT</name></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"ERROR: cannot insert in late first diff\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_insertwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ofd</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator> <operator>-</operator> <name>fx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>nfd</name> <operator>+</operator> <name>fx</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re__strncopy</name><argument_list>(<argument><expr><name>ofd</name> <operator>+</operator> <name>fx</name></expr></argument>, <argument><expr><name>nfd</name> <operator>+</operator> <name>fx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"without anything to save\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>nsb</name> <operator>-</operator> <name>nfd</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re__strncopy</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"second diff insert at %d...\r\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nse</name> <operator>-</operator> <name>new</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nse</name> <operator>-</operator> <name>new</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ols</name> <operator>!=</operator> <name>oe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"with stuff to keep at end\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><operator>!</operator><name>EL_CAN_INSERT</name></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator>
<literal type="string">"ERROR: cannot insert in second diff\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_insertwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nse</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>nse</name> <operator>+</operator> <name>sx</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator> <operator>-</operator> <name>sx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"without anything to save\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nse</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nls</name> <operator>-</operator> <name>nse</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>






</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ELRE_DEBUG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>__F</name><operator>,</operator> <literal type="string">"done.\r\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>re__copy_and_pad</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_refresh_cursor</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>th</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name>
<operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>ct_chr_class</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHTYPE_NL</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHTYPE_TAB</name></expr>:</case>
<while>while <condition>(<expr><operator>++</operator><name>h</name> <operator>&amp;</operator> <literal type="number">07</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <call><name>ct_visual_width</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;=</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>-=</operator> <name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>cp</name> <argument_list type="generic">&lt; <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>w</name> <operator>=</operator> <name>wcwidth</name><operator>(</operator><operator>*</operator><name>cp</name><operator>)</operator><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>re_fastputc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier></type><name>lastline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_fastputc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>++</operator></expr>]</index></name>
<operator>=</operator> <name>MB_FILL_CHAR</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lins</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lastline</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lastline</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lastline</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><operator>++</operator><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>re__copy_and_pad</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>lastline</name></expr></argument>, <argument><expr><literal type="string">L""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>EL_HAS_AUTO_MARGINS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>EL_HAS_MAGIC_MARGINS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_fastaddc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rhdiff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rhdiff</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>-</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name>rhdiff</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>ct_chr_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHTYPE_TAB</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CHTYPE_NL</name></expr>:</case>
<case>case <expr><name>CHTYPE_PRINT</name></expr>:</case>
<expr_stmt><expr><call><name>re_fastputc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHTYPE_ASCIICTL</name></expr>:</case>
<case>case <expr><name>CHTYPE_NONPRINT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>visbuf</name><index>[<expr><name>VISUAL_WIDTH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>=
<expr><call><name>ct_visual_char</name><argument_list>(<argument><expr><name>visbuf</name></expr></argument>, <argument><expr><name>VISUAL_WIDTH_MAX</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_fastputc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>visbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_clear_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>re_clear_lines</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>EL_CAN_CEOL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_move_to_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_clear_EOL</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminal_move_to_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_oldcv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
