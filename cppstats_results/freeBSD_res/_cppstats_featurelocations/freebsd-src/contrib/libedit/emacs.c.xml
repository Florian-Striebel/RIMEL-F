<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/emacs.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)emacs.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: emacs.c,v 1.36 2016/05/09 21:46:56 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emacs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_delete_or_list</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_writec</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_EOF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_delafter</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_delafter1</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_delete_next_word</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cp</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>c_delafter</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cp</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_yank</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_NORM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>+</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name><operator>)</operator> <operator>&gt;=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>c_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><name>kp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name></expr>;</condition> <incr><expr><name>kp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>kp</name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_kill_line</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_kill_region</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_delafter</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cp</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_delbefore</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cp</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_copy_region</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>em_gosmacs_transpose</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_next_word</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>,
<argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_upper_case</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswlower</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>towupper</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_capitol_case</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswalpha</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswlower</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>towupper</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswupper</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>towlower</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_lower_case</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswupper</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>towlower</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_set_mark</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_exchange_mark</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_universal_argument</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>CC_ARGHACK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_meta_next</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>metanext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>CC_ARGHACK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_toggle_overwrite</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>inputmode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>inputmode</name></name> <operator>==</operator> <name>MODE_INSERT</name><operator>)</operator></expr> ?</condition><then>
<expr><name>MODE_REPLACE</name></expr> </then><else>: <expr><name>MODE_INSERT</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_copy_prev_word</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldc</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>c__prev_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>c_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>oldc</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name>oldc</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>oldc</name> <operator>&amp;&amp;</operator> <name>dp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_inc_search_next</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ce_inc_search</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ED_SEARCH_NEXT_HISTORY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_inc_search_prev</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ce_inc_search</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ED_SEARCH_PREV_HISTORY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>em_delete_prev_char</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_delbefore</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_delbefore1</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>-=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
