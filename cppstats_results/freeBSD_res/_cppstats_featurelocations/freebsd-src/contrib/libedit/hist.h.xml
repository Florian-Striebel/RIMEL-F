<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/hist.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_h_el_hist</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_h_el_hist</name></cpp:macro></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hist_fun_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HistEventW</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>el_history_t</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hist_fun_t</name></type> <name>fun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HistEventW</name></type> <name>ev</name></decl>;</decl_stmt>
}</block></struct></type> <name>el_history_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_FUN_INTERNAL</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((*(el)-&gt;el_history.fun) ((el)-&gt;el_history.ref, &amp;(el)-&gt;el_history.ev, fn, arg)) == -1) ? NULL : (el)-&gt;el_history.ev.str)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_FUN</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((el)-&gt;el_flags &amp; NARROW_HISTORY) ? hist_convert(el, fn, arg) : HIST_FUN_INTERNAL(el, fn, arg))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_NEXT</name><parameter_list>(<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_NEXT, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_FIRST</name><parameter_list>(<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_FIRST, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_LAST</name><parameter_list>(<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_LAST, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_PREV</name><parameter_list>(<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_PREV, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_SET</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_SET, num)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_LOAD</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_LOAD fname)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_SAVE</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_SAVE fname)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_SAVE_FP</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_SAVE_FP, fp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIST_NSAVE_FP</name><parameter_list>(<parameter><type><name>el</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIST_FUN(el, H_NSAVE_FP, n, fp)</cpp:value></cpp:define>

<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>hist_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>hist_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>el_action_t</name></type> <name>hist_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>hist_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hist_fun_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>hist_command</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>hist_enlargebuf</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>hist_convert</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
