<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/history.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)history.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: history.c,v 1.63 2019/10/08 19:17:57 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vis.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hist_cookie</name><index>[]</index></name> <init>= <expr><literal type="string">"_HiStOrY_V2_\n"</literal></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histedit.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NARROWCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>rest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prefix ##_ ##rest</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNW</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strlen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strdup</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strdup(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strcmp</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcmp(d, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncmp</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncmp(d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncpy</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncpy(d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncat</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncat(d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct_decode_string</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct_encode_string</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chartype.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>rest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prefix ##_w ##rest</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNW</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type ##_w</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type ##W</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L ##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strlen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcslen(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strdup</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcsdup(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strcmp</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcscmp(d, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncmp</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcsncmp(d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncpy</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcsncpy(d, s, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strncat</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcsncat(d, s, n)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <expr_stmt><expr><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>history_gfun_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>history_efun_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>history_vfun_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>history_sfun_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<function><type><name><name>struct</name> <name>TYPE</name></name></type>(<name>history</name>) <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_gfun_t</name></type> <name>h_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_gfun_t</name></type> <name>h_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_gfun_t</name></type> <name>h_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_gfun_t</name></type> <name>h_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_gfun_t</name></type> <name>h_curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_sfun_t</name></type> <name>h_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_sfun_t</name></type> <name>h_del</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_vfun_t</name></type> <name>h_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_efun_t</name></type> <name>h_enter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>history_efun_t</name></type> <name>h_add</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HNEXT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_next)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HFIRST</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_first)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPREV</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_prev)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLAST</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_last)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCURR</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_curr)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSET</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_set)((h)-&gt;h_ref, ev, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCLEAR</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_clear)((h)-&gt;h_ref, ev)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HENTER</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_enter)((h)-&gt;h_ref, ev, str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HADD</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_add)((h)-&gt;h_ref, ev, str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDEL</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(h)-&gt;h_del)((h)-&gt;h_ref, ev, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h_strdup</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Strdup(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h_malloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h_realloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc((a), (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h_free</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(a)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block></struct></type> <name>HistEventPrivate</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_setsize</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_getsize</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_setunique</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_getunique</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_set_fun</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_load</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_save</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_save_fp</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_prev_event</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_next_event</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_next_string</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_prev_string</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <name>hentry_t</name> <block>{
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr_stmt><expr><name>ev</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hentry_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hentry_t</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>hentry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>history_t</name> <block>{
<decl_stmt><decl><type><name>hentry_t</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hentry_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eventid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_UNIQUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
}</block></struct></type> <name>history_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_next</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_first</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_prev</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_last</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_curr</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_set</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>history_def_clear</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_enter</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_add</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_del</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_init</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_def_insert</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>history_def_delete</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>hentry_t</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_deldata_nth</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_set_nth</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>history_def_setsize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(void) (((history_t *)p)-&gt;max = (num))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>history_def_getsize</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((history_t *)p)-&gt;cur)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>history_def_getunique</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((history_t *)p)-&gt;flags) &amp; H_UNIQUE) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>history_def_setunique</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>uni</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (uni) (((history_t *)p)-&gt;flags) |= H_UNIQUE; else (((history_t *)p)-&gt;flags) &amp;= ~H_UNIQUE</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>he_strerror</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>he_errlist[code]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>he_seterrev</name><parameter_list>(<parameter><type><name>evp</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{evp-&gt;num = code;evp-&gt;str = he_strerror(code);}</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>he_errlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"unknown error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"first event not found"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"last event not found"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"empty list"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"no next event"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"no previous event"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"current event is invalid"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"event not found"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"can't read history from file"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"can't write history"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"required parameter(s) not supplied"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"history size negative"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"function not allowed with other history-functions-set the default"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>STR</name><argument_list>(<argument><literal type="string">"bad parameters"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_UNKNOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_MALLOC_FAILED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_FIRST_NOTFOUND</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_LAST_NOTFOUND</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_EMPTY_LIST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_END_REACHED</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_START_REACHED</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_CURR_INVALID</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_NOT_FOUND</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_HIST_READ</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_HIST_WRITE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_PARAM_MISSING</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_SIZE_NEGATIVE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_NOT_ALLOWED</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HE_BAD_PARAM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_first</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_FIRST_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_last</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_LAST_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_next</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_EMPTY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_END_REACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_prev</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>_HE_END_REACHED</name></expr> </then><else>: <expr><name>_HE_EMPTY_LIST</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_START_REACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_curr</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>_HE_CURR_INVALID</name></expr> </then><else>: <expr><name>_HE_EMPTY_LIST</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_set</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_EMPTY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</condition>
<incr><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_set_nth</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_EMPTY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr>;</init> <condition><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</condition>
<incr><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_add</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>elen</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HistEventPrivate</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>history_def_enter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>Strlen</name><argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>Strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>elen</name> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_MALLOC_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>elen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>elen</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evp</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_deldata_nth</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>,
<argument><expr><name>int</name> <name>num</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>history_set_nth</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>history_def_delete</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_del</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>history_def_set</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>history_def_delete</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>history_def_delete</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator><name>h</name></expr></argument>,
<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hentry_t</name> <operator>*</operator><name>hp</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HistEventPrivate</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hp</name><operator>-&gt;</operator><name>ev</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name>hp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_insert</name><argument_list>(<argument><expr><name>history_t</name> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hentry_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>h_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>oomem</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>num</name></name> <operator>=</operator> <operator>++</operator><name><name>h</name><operator>-&gt;</operator><name>eventid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ev</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>oomem</name>:</label>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_MALLOC_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_enter</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>H_UNIQUE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name> <operator>&amp;&amp;</operator>
<call><name>Strcmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>history_def_insert</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>history_def_delete</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_def_init</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>eventid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>ev</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>ev</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>history_def_clear</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>history_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>history_def_delete</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>eventid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>









<expr_stmt><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator>
<macro><name>FUN</name><argument_list>(<argument>history</argument>,<argument>init</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator>
<block>{
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr><name>ev</name></expr>;
<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>history_def_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_ent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name>history_def_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_first</name></name> <operator>=</operator> <name>history_def_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_last</name></name> <operator>=</operator> <name>history_def_last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name>history_def_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_curr</name></name> <operator>=</operator> <name>history_def_curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_set</name></name> <operator>=</operator> <name>history_def_set</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_clear</name></name> <operator>=</operator> <name>history_def_clear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_enter</name></name> <operator>=</operator> <name>history_def_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_add</name></name> <operator>=</operator> <name>history_def_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_del</name></name> <operator>=</operator> <name>history_def_del</name></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>
}





void
<macro><name>FUN</name><argument_list>(<argument>history</argument>,<argument>end</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name><operator>)</operator>
<block>{
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr><name>ev</name></expr>;

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>==</operator> <name>history_def_next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>history_def_clear</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<call><name>h_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}






static <decl_stmt><decl><type><name>int</name></type>
<name>history_setsize</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>!=</operator> <name>history_def_next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>history_def_setsize</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_getsize</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>!=</operator> <name>history_def_next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <call><name>history_def_getsize</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_SIZE_NEGATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_setunique</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>uni</name></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>!=</operator> <name>history_def_next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>history_def_setunique</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><name>uni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_getunique</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>!=</operator> <name>history_def_next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <call><name>history_def_getunique</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_set_fun</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>nh</name></expr></argument>)</argument_list>
<block>{<block_content>
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr_stmt><expr><name>ev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nh</name><operator>-&gt;</operator><name>h_first</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_last</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>nh</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_curr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_set</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>nh</name><operator>-&gt;</operator><name>h_enter</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_add</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_clear</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>nh</name><operator>-&gt;</operator><name>h_del</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>!=</operator> <name>history_def_next</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>history_def_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_first</name></name> <operator>=</operator> <name>history_def_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name>history_def_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_last</name></name> <operator>=</operator> <name>history_def_last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name>history_def_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_curr</name></name> <operator>=</operator> <name>history_def_curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_set</name></name> <operator>=</operator> <name>history_def_set</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_clear</name></name> <operator>=</operator> <name>history_def_clear</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_enter</name></name> <operator>=</operator> <name>history_def_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_add</name></name> <operator>=</operator> <name>history_def_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_del</name></name> <operator>=</operator> <name>history_def_del</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>==</operator> <name>history_def_next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>history_def_clear</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_ent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_first</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_last</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_curr</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_curr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_set</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_clear</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_clear</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_enter</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_enter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_add</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_add</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_del</name></name> <operator>=</operator> <name><name>nh</name><operator>-&gt;</operator><name>h_del</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_load</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr_stmt><expr><name>ev</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>decode_result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NARROWCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ct_buffer_t</name></type> <name>conv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>hist_cookie</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>max_size</name> <operator>=</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><operator>--</operator><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>~</operator><literal type="number">1023</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>h_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>max_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>oomem</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strunvis</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decode_result</name> <operator>=</operator> <call><name>ct_decode_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decode_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HENTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>decode_result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>oomem</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>oomem</name>:</label>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_save_fp</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><name>size_t</name> <name>nelem</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>fp</name></expr></argument>)</argument_list>
<block>{<block_content>
<macro><name>TYPE</name><argument_list>(<argument>HistEvent</argument>)</argument_list></macro> <expr_stmt><expr><name>ev</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>max_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NARROWCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ct_buffer_t</name></type> <name>conv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>fchmod</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S_IRUSR</name><operator>|</operator><name>S_IWUSR</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><name>hist_cookie</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>h_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>max_size</name> <operator>=</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nelem</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HFIRST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nelem</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>retval</name> <operator>=</operator> <call><name>HNEXT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HLAST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HPREV</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>ev</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>max_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>~</operator><literal type="number">1023</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name> <operator>=</operator> <call><name>h_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>max_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>oomem</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strvis</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>VIS_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>oomem</name>:</label>
<expr_stmt><expr><call><name>h_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_save</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>history_save_fp</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_prev_event</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HPREV</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_next_evdata</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>d</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HPREV</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name><operator>)</operator><operator>-&gt;</operator><name><name>cursor</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_next_event</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HNEXT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_prev_string</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>Strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HNEXT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>Strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>history_next_string</name><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>Strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>retval</name> <operator>=</operator> <call><name>HPREV</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>Strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>int</name>
<name>FUNW</name></type><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>History</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>HistEvent</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ev</name></expr></argument>, <argument><expr><name>int</name> <name>fun</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fun</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H_GETSIZE</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_getsize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_SETSIZE</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_setsize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_GETUNIQUE</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_getunique</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_SETUNIQUE</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_setunique</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_ADD</name></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HADD</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_DEL</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HDEL</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_ENTER</name></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>HENTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_ent</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H_APPEND</name></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>HSET</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_ent</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HADD</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H_FIRST</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HFIRST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_NEXT</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HNEXT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_LAST</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HLAST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_PREV</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HPREV</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_CURR</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HCURR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_SET</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>HSET</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_CLEAR</name></expr>:</case>
<expr_stmt><expr><call><name>HCLEAR</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_LOAD</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_load</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_HIST_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H_SAVE</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_save</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_HIST_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H_SAVE_FP</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_save_fp</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_HIST_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H_NSAVE_FP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_save_fp</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_HIST_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>H_PREV_EVENT</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_prev_event</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_NEXT_EVENT</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_next_event</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_PREV_STR</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_prev_string</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_NEXT_STR</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_next_string</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_FUNC</name></expr>:</case>
<block>{<block_content>
<macro><name>TYPE</name><argument_list>(<argument>History</argument>)</argument_list></macro> <expr_stmt><expr><name>hf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_ref</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_ent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_first</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_gfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_next</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_gfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_last</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_gfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_prev</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_gfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_curr</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_gfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_set</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_sfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_clear</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_vfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_enter</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_efun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_add</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_efun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hf</name><operator>.</operator><name>h_del</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>history_sfun_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>history_set_fun</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_PARAM_MISSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>H_END</name></expr>:</case>
<expr_stmt><expr><call><call><name>FUN</name><argument_list>(<argument><expr><name>history</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H_NEXT_EVDATA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_next_evdata</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>H_DELDATA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>history_deldata_nth</name><argument_list>(<argument><expr><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>H_REPLACE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name><operator>)</operator><operator>-&gt;</operator><name><name>cursor</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>history_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_ref</name></name><operator>)</operator><operator>-&gt;</operator><name><name>cursor</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>he_seterrev</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>_HE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
