<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/common.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)common.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: common.c,v 1.49 2020/03/30 06:54:37 ryo Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vi.h"</cpp:file></cpp:include>





<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_end_of_file</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>re_goto_bottom</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>CC_EOF</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ed_insert</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>+</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ch_enlargebufs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>inputmode</name></name> <operator>==</operator> <name>MODE_INSERT</name>
<operator>||</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_fastaddc</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>inputmode</name></name> <operator>!=</operator> <name>MODE_REPLACE_1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>c_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>inputmode</name></name> <operator>==</operator> <name>MODE_REPLACE_1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vi_command_mode</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_delete_prev_word</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>c__prev_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>, <argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cp</name></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>c_delbefore</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_delete_next_char</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_EDIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name></cpp:macro> <cpp:value>el-&gt;el_line</cpp:value></cpp:define>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"\nD(b: %p(%ls) c: %p(%ls) last: %p(%ls) limit: %p(%ls)\n"</literal></expr></argument>,
<argument><expr><name><name>EL</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>lastchar</name></name></expr></argument>,
<argument><expr><name><name>EL</name><operator>.</operator><name>lastchar</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>limit</name></name></expr></argument>, <argument><expr><name><name>EL</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KSHVI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>terminal_writec</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_EOF</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KSHVI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_delafter</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_kill_line</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>kp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_kill</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_move_to_end</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VI_MOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_move_to_beg</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>iswspace</name><argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ed_transpose_chars</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_next_char</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>lim</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;=</operator> <name>lim</name> <operator>||</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name>lim</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>+=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_prev_word</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>c__prev_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>,
<argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_prev_char</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>-=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_quoted_insert</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tty_quotemode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>el_wgetc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tty_noquotemode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ed_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>ed_end_of_file</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ed_digit</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>==</operator> <name>EM_UNIVERSAL_ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>=</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CC_ARGHACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ed_insert</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ed_argument_digit</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>=</operator> <operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CC_ARGHACK</name></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_unassigned</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_ignore</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_newline</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>re_goto_bottom</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>CC_NEWLINE</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_delete_prev_char</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>c_delbefore</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>-=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_clear_screen</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>terminal_clear_screen</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_redisplay</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<return>return <expr><name>CC_REDISPLAY</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_start_over</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>ch_reset</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_sequence_lead_in</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>

<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_prev_history</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>beep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sv_event</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_undo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name>EL_BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>+</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>+=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <name>sv_event</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>beep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>beep</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_REFRESH_BEEP</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_next_history</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>beep</name> <init>= <expr><name>CC_REFRESH</name></expr></init></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_undo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>-=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>beep</name> <operator>=</operator> <name>CC_REFRESH_BEEP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <name>CC_REFRESH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>beep</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>rval</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_search_prev_history</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_undo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_EDIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"e_prev_search_hist(): eventno &lt; 0;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name>EL_BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>+</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_FIRST</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>c_setpat</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_NEXT</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"Comparing with \"%ls\"\n"</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>hp</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>c_hmatch</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_NEXT</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_search_next_history</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_undo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_FIRST</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>c_setpat</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>&amp;&amp;</operator> <name>hp</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"Comparing with \"%ls\"\n"</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>hp</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>c_hmatch</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_NEXT</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_hmatch</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>

<return>return <expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_prev_line</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><call><name>c_hpos</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</condition> <incr><expr><name>ptr</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>ptr</name><operator>--</operator></expr>;</init> <condition><expr><name>ptr</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>




<for>for <control>(<init><expr><name>ptr</name><operator>++</operator></expr>;</init>
<condition><expr><name>nchars</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition>
<incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_next_line</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><call><name>c_hpos</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>ptr</name><operator>++</operator></expr>;</init>
<condition><expr><name>nchars</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition>
<incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>libedit_private</name> <name>el_action_t</name></type>

<name>ed_command</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>wint_t</name> <name>c</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>tmpbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmplen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <call><name>c_gets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="string">L"\n: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmplen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>tmpbuf</name><index>[<expr><name>tmplen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal><operator>,</operator> <call><name>parse_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
