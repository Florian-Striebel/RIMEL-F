<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/terminal.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_h_el_terminal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_h_el_terminal</name></cpp:macro></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>keymacro_value_t</name></type> <name>fun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>funckey_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>coord_t</name></type> <name>t_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_INSERT</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_DELETE</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_CEOL</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_TAB</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_ME</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_CAN_UP</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_HAS_META</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_HAS_AUTO_MARGINS</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_HAS_MAGIC_MARGINS</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>t_loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>t_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>t_fkey</name></decl>;</decl_stmt>
}</block></struct></type> <name>el_terminal_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_DN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_UP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_LT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_RT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_HO</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_EN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_DE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_K_NKEYS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_move_to_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_move_to_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_clear_EOL</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_overwrite</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_insertwrite</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_deletechars</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_clear_screen</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_beep</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_change_size</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_get_size</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_bind_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_print_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_clear_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_set_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>keymacro_value_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_settc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_gettc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_telltc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal_echotc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal_writec</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>terminal__putc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>terminal__flush</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_FLAGS</name></cpp:macro> <cpp:value>(el)-&gt;el_terminal.t_flags</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_INSERT</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_INSERT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_DELETE</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_DELETE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_CEOL</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_CEOL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_TAB</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_TAB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_ME</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_ME)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CAN_UP</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_CAN_UP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_HAS_META</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_HAS_META)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_HAS_AUTO_MARGINS</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_HAS_AUTO_MARGINS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_HAS_MAGIC_MARGINS</name></cpp:macro> <cpp:value>(EL_FLAGS &amp; TERM_HAS_MAGIC_MARGINS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
