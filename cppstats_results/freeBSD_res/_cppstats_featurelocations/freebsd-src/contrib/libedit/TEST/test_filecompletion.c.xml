<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/TEST/test_filecompletion.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;histedit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filecomplete.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>user_typed_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>completion_function_input</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>expanded_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>escaped_output</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_input</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>test_input</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{

<expr><literal type="string">L"ls ang"</literal></expr>,
<expr><literal type="string">"ang"</literal></expr>,
<expr><block>{<expr><literal type="string">"ang&lt;ular&gt;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls ang\\&lt;ular\\&gt;test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dq_ang"</literal></expr>,
<expr><literal type="string">"dq_ang"</literal></expr>,
<expr><block>{<expr><literal type="string">"dq_ang&lt;ular&gt;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dq_ang&lt;ular&gt;test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sq_ang"</literal></expr>,
<expr><literal type="string">"sq_ang"</literal></expr>,
<expr><block>{<expr><literal type="string">"sq_ang&lt;ular&gt;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sq_ang&lt;ular&gt;test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls back"</literal></expr>,
<expr><literal type="string">"back"</literal></expr>,
<expr><block>{<expr><literal type="string">"backslash\\test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls backslash\\\\test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sback"</literal></expr>,
<expr><literal type="string">"sback"</literal></expr>,
<expr><block>{<expr><literal type="string">"sbackslash\\test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sbackslash\\test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dback"</literal></expr>,
<expr><literal type="string">"dback"</literal></expr>,
<expr><block>{<expr><literal type="string">"dbackslash\\test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dbackslash\\\\test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls br"</literal></expr>,
<expr><literal type="string">"br"</literal></expr>,
<expr><block>{<expr><literal type="string">"braces{test}"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls braces\\{test\\} "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sbr"</literal></expr>,
<expr><literal type="string">"sbr"</literal></expr>,
<expr><block>{<expr><literal type="string">"sbraces{test}"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sbraces{test}'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dbr"</literal></expr>,
<expr><literal type="string">"dbr"</literal></expr>,
<expr><block>{<expr><literal type="string">"dbraces{test}"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dbraces{test}\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls doll"</literal></expr>,
<expr><literal type="string">"doll"</literal></expr>,
<expr><block>{<expr><literal type="string">"doll$artest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls doll\\$artest "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sdoll"</literal></expr>,
<expr><literal type="string">"sdoll"</literal></expr>,
<expr><block>{<expr><literal type="string">"sdoll$artest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sdoll$artest'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"ddoll"</literal></expr>,
<expr><literal type="string">"ddoll"</literal></expr>,
<expr><block>{<expr><literal type="string">"ddoll$artest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"ddoll\\$artest\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls eq"</literal></expr>,
<expr><literal type="string">"eq"</literal></expr>,
<expr><block>{<expr><literal type="string">"equals==test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls equals\\=\\=test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'seq"</literal></expr>,
<expr><literal type="string">"seq"</literal></expr>,
<expr><block>{<expr><literal type="string">"sequals==test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sequals==test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"deq"</literal></expr>,
<expr><literal type="string">"deq"</literal></expr>,
<expr><block>{<expr><literal type="string">"dequals==test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dequals==test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls new"</literal></expr>,
<expr><literal type="string">"new"</literal></expr>,
<expr><block>{<expr><literal type="string">"new\\nline"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls new\\\\nline "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'snew"</literal></expr>,
<expr><literal type="string">"snew"</literal></expr>,
<expr><block>{<expr><literal type="string">"snew\nline"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'snew\nline'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dnew"</literal></expr>,
<expr><literal type="string">"dnew"</literal></expr>,
<expr><block>{<expr><literal type="string">"dnew\nline"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dnew\nline\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls spac"</literal></expr>,
<expr><literal type="string">"spac"</literal></expr>,
<expr><block>{<expr><literal type="string">"space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls space\\ test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 's_spac"</literal></expr>,
<expr><literal type="string">"s_spac"</literal></expr>,
<expr><block>{<expr><literal type="string">"s_space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 's_space test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"d_spac"</literal></expr>,
<expr><literal type="string">"d_spac"</literal></expr>,
<expr><block>{<expr><literal type="string">"d_space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"d_space test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls multi"</literal></expr>,
<expr><literal type="string">"multi"</literal></expr>,
<expr><block>{<expr><literal type="string">"multi space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls multi\\ space\\ \\ test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 's_multi"</literal></expr>,
<expr><literal type="string">"s_multi"</literal></expr>,
<expr><block>{<expr><literal type="string">"s_multi space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 's_multi space test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"d_multi"</literal></expr>,
<expr><literal type="string">"d_multi"</literal></expr>,
<expr><block>{<expr><literal type="string">"d_multi space test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"d_multi space test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls doub"</literal></expr>,
<expr><literal type="string">"doub"</literal></expr>,
<expr><block>{<expr><literal type="string">"doub\"quotes"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls doub\\\"quotes "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 's_doub"</literal></expr>,
<expr><literal type="string">"s_doub"</literal></expr>,
<expr><block>{<expr><literal type="string">"s_doub\"quotes"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 's_doub\"quotes'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"d_doub"</literal></expr>,
<expr><literal type="string">"d_doub"</literal></expr>,
<expr><block>{<expr><literal type="string">"d_doub\"quotes"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"d_doub\\\"quotes\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls mud"</literal></expr>,
<expr><literal type="string">"mud"</literal></expr>,
<expr><block>{<expr><literal type="string">"mud\"qu\"otes\""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls mud\\\"qu\\\"otes\\\" "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'smud"</literal></expr>,
<expr><literal type="string">"smud"</literal></expr>,
<expr><block>{<expr><literal type="string">"smud\"qu\"otes\""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'smud\"qu\"otes\"'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dmud"</literal></expr>,
<expr><literal type="string">"dmud"</literal></expr>,
<expr><block>{<expr><literal type="string">"dmud\"qu\"otes\""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dmud\\\"qu\\\"otes\\\"\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls sing"</literal></expr>,
<expr><literal type="string">"sing"</literal></expr>,
<expr><block>{<expr><literal type="string">"single'quote"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls single\\'quote "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'ssing"</literal></expr>,
<expr><literal type="string">"ssing"</literal></expr>,
<expr><block>{<expr><literal type="string">"ssingle'quote"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'ssingle'\\''quote'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dsing"</literal></expr>,
<expr><literal type="string">"dsing"</literal></expr>,
<expr><block>{<expr><literal type="string">"dsingle'quote"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dsingle'quote\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls mu_sing"</literal></expr>,
<expr><literal type="string">"mu_sing"</literal></expr>,
<expr><block>{<expr><literal type="string">"mu_single''quotes''"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls mu_single\\'\\'quotes\\'\\' "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'smu_sing"</literal></expr>,
<expr><literal type="string">"smu_sing"</literal></expr>,
<expr><block>{<expr><literal type="string">"smu_single''quotes''"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'smu_single'\\'''\\''quotes'\\\'''\\'''"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dmu_sing"</literal></expr>,
<expr><literal type="string">"dmu_sing"</literal></expr>,
<expr><block>{<expr><literal type="string">"dmu_single''quotes''"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dmu_single''quotes''\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls paren"</literal></expr>,
<expr><literal type="string">"paren"</literal></expr>,
<expr><block>{<expr><literal type="string">"paren(test)"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls paren\\(test\\) "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sparen"</literal></expr>,
<expr><literal type="string">"sparen"</literal></expr>,
<expr><block>{<expr><literal type="string">"sparen(test)"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sparen(test)'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dparen"</literal></expr>,
<expr><literal type="string">"dparen"</literal></expr>,
<expr><block>{<expr><literal type="string">"dparen(test)"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dparen(test)\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls pip"</literal></expr>,
<expr><literal type="string">"pip"</literal></expr>,
<expr><block>{<expr><literal type="string">"pipe|test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls pipe\\|test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'spip"</literal></expr>,
<expr><literal type="string">"spip"</literal></expr>,
<expr><block>{<expr><literal type="string">"spipe|test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'spipe|test'"</literal></expr>,
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dpip"</literal></expr>,
<expr><literal type="string">"dpip"</literal></expr>,
<expr><block>{<expr><literal type="string">"dpipe|test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dpipe|test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls ta"</literal></expr>,
<expr><literal type="string">"ta"</literal></expr>,
<expr><block>{<expr><literal type="string">"tab\ttest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls tab\\\ttest "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sta"</literal></expr>,
<expr><literal type="string">"sta"</literal></expr>,
<expr><block>{<expr><literal type="string">"stab\ttest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'stab\ttest'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dta"</literal></expr>,
<expr><literal type="string">"dta"</literal></expr>,
<expr><block>{<expr><literal type="string">"dtab\ttest"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dtab\ttest\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls tic"</literal></expr>,
<expr><literal type="string">"tic"</literal></expr>,
<expr><block>{<expr><literal type="string">"tick`test`"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls tick\\`test\\` "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'stic"</literal></expr>,
<expr><literal type="string">"stic"</literal></expr>,
<expr><block>{<expr><literal type="string">"stick`test`"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'stick`test`'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dtic"</literal></expr>,
<expr><literal type="string">"dtic"</literal></expr>,
<expr><block>{<expr><literal type="string">"dtick`test`"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dtick\\`test\\`\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls at"</literal></expr>,
<expr><literal type="string">"at"</literal></expr>,
<expr><block>{<expr><literal type="string">"atthe@rate"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls atthe\\@rate "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'sat"</literal></expr>,
<expr><literal type="string">"sat"</literal></expr>,
<expr><block>{<expr><literal type="string">"satthe@rate"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'satthe@rate'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dat"</literal></expr>,
<expr><literal type="string">"dat"</literal></expr>,
<expr><block>{<expr><literal type="string">"datthe@rate"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"datthe@rate\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls semi"</literal></expr>,
<expr><literal type="string">"semi"</literal></expr>,
<expr><block>{<expr><literal type="string">"semi;colon;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls semi\\;colon\\;test "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'ssemi"</literal></expr>,
<expr><literal type="string">"ssemi"</literal></expr>,
<expr><block>{<expr><literal type="string">"ssemi;colon;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'ssemi;colon;test'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"dsemi"</literal></expr>,
<expr><literal type="string">"dsemi"</literal></expr>,
<expr><block>{<expr><literal type="string">"dsemi;colon;test"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dsemi;colon;test\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls amp"</literal></expr>,
<expr><literal type="string">"amp"</literal></expr>,
<expr><block>{<expr><literal type="string">"ampers&amp;and"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls ampers\\&amp;and "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls 'samp"</literal></expr>,
<expr><literal type="string">"samp"</literal></expr>,
<expr><block>{<expr><literal type="string">"sampers&amp;and"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls 'sampers&amp;and'"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls \"damp"</literal></expr>,
<expr><literal type="string">"damp"</literal></expr>,
<expr><block>{<expr><literal type="string">"dampers&amp;and"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls \"dampers&amp;and\""</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls foo\\"</literal></expr>,
<expr><literal type="string">"foo"</literal></expr>,
<expr><block>{<expr><literal type="string">"foo bar"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls foo\\ bar "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls foo'"</literal></expr>,
<expr><literal type="string">"foo'"</literal></expr>,
<expr><block>{<expr><literal type="string">"foo bar"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls foo\\ bar "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls foo\""</literal></expr>,
<expr><literal type="string">"foo\""</literal></expr>,
<expr><block>{<expr><literal type="string">"foo bar"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><literal type="string">L"ls foo\\ bar "</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="string">L"ls fo"</literal></expr>,
<expr><literal type="string">"fo"</literal></expr>,
<expr><block>{<expr><literal type="string">"foo bar"</literal></expr>, <expr><literal type="string">"foo baz"</literal></expr>}</block></expr>,
<expr><literal type="string">L"ls foo\\ ba"</literal></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">L"ls ba"</literal></expr>,
<expr><literal type="string">"ba"</literal></expr>,
<expr><block>{<expr><literal type="string">"bar &lt;bar&gt;"</literal></expr>, <expr><literal type="string">"bar &lt;baz&gt;"</literal></expr>}</block></expr>,
<expr><literal type="string">L"ls bar\\ \\&lt;ba"</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>break_chars</name><index>[]</index></name> <init>= <expr><literal type="string">L" \t\n\"\\'`@$&gt;&lt;=;|&amp;{("</literal></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>mycomplet_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last_index</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>completion_function_input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>expanded_text</name><index>[<expr><name>last_index</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>expanded_text</name><index>[<expr><name>last_index</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>last_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><call><name>el_init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>input_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_line_t</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user_typed_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmemcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user_typed_text</name></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>input_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name>input_len</name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>line</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn_complete</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>mycomplet_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>break_chars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"User input: %ls\t Expected output: %ls\t Generated output: %ls\n"</literal></expr></argument>,
<argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user_typed_text</name></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>escaped_output</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>escaped_output</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>el_end</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
