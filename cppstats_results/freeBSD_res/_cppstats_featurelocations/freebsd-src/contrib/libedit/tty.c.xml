<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/tty.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)tty.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: tty.c,v 1.70 2021/07/14 07:47:23 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ttymodes_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>ttymodes_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ttymap_t</name> <block>{
<decl_stmt><decl><type><name>wint_t</name></type> <name>nch</name></decl>, <name>och</name>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name><name>bind</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ttymap_t</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ttyperm_t</name></type> <name>ttyperm</name> <init>= <expr><block>{
<expr><block>{
<expr><block>{<expr><literal type="string">"iflag:"</literal></expr>, <expr><name>ICRNL</name></expr>, <expr><operator>(</operator><name>INLCR</name> <operator>|</operator> <name>IGNCR</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oflag:"</literal></expr>, <expr><operator>(</operator><name>OPOST</name> <operator>|</operator> <name>ONLCR</name><operator>)</operator></expr>, <expr><name>ONLRET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lflag:"</literal></expr>, <expr><operator>(</operator><name>ISIG</name> <operator>|</operator> <name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ECHOE</name> <operator>|</operator> <name>ECHOCTL</name> <operator>|</operator> <name>IEXTEN</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>NOFLSH</name> <operator>|</operator> <name>ECHONL</name> <operator>|</operator> <name>EXTPROC</name> <operator>|</operator> <name>FLUSHO</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chars:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="string">"iflag:"</literal></expr>, <expr><operator>(</operator><name>INLCR</name> <operator>|</operator> <name>ICRNL</name><operator>)</operator></expr>, <expr><name>IGNCR</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oflag:"</literal></expr>, <expr><operator>(</operator><name>OPOST</name> <operator>|</operator> <name>ONLCR</name><operator>)</operator></expr>, <expr><name>ONLRET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lflag:"</literal></expr>, <expr><name>ISIG</name></expr>,
<expr><operator>(</operator><name>NOFLSH</name> <operator>|</operator> <name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ECHOK</name> <operator>|</operator> <name>ECHONL</name> <operator>|</operator> <name>EXTPROC</name> <operator>|</operator> <name>IEXTEN</name> <operator>|</operator> <name>FLUSHO</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chars:"</literal></expr>, <expr><operator>(</operator><call><name>C_SH</name><argument_list>(<argument><expr><name>C_MIN</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_TIME</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_SWTCH</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_DSWTCH</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>C_SH</name><argument_list>(<argument><expr><name>C_SUSP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_DSUSP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_EOL</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_DISCARD</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>C_SH</name><argument_list>(<argument><expr><name>C_PGOFF</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_PAGE</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>C_STATUS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="string">"iflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXON</name> <operator>|</operator> <name>IXOFF</name> <operator>|</operator> <name>INLCR</name> <operator>|</operator> <name>ICRNL</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lflag:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ISIG</name> <operator>|</operator> <name>IEXTEN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chars:"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ttychar_t</name></type> <name>ttychar</name> <init>= <expr><block>{
<expr><block>{
<expr><name>CINTR</name></expr>, <expr><name>CQUIT</name></expr>, <expr><name>CERASE</name></expr>, <expr><name>CKILL</name></expr>,
<expr><name>CEOF</name></expr>, <expr><name>CEOL</name></expr>, <expr><name>CEOL2</name></expr>, <expr><name>CSWTCH</name></expr>,
<expr><name>CDSWTCH</name></expr>, <expr><name>CERASE2</name></expr>, <expr><name>CSTART</name></expr>, <expr><name>CSTOP</name></expr>,
<expr><name>CWERASE</name></expr>, <expr><name>CSUSP</name></expr>, <expr><name>CDSUSP</name></expr>, <expr><name>CREPRINT</name></expr>,
<expr><name>CDISCARD</name></expr>, <expr><name>CLNEXT</name></expr>, <expr><name>CSTATUS</name></expr>, <expr><name>CPAGE</name></expr>,
<expr><name>CPGOFF</name></expr>, <expr><name>CKILL2</name></expr>, <expr><name>CBRK</name></expr>, <expr><name>CMIN</name></expr>,
<expr><name>CTIME</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>CINTR</name></expr>, <expr><name>CQUIT</name></expr>, <expr><name>CERASE</name></expr>, <expr><name>CKILL</name></expr>,
<expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>,
<expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>CERASE2</name></expr>, <expr><name>CSTART</name></expr>, <expr><name>CSTOP</name></expr>,
<expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>CSUSP</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>,
<expr><name>CDISCARD</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>,
<expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><name>_POSIX_VDISABLE</name></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ttymap_t</name></type> <name><name>tty_map</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_ERASE</name></expr>, <expr><name>VERASE</name></expr>,
<expr><block>{<expr><name>EM_DELETE_PREV_CHAR</name></expr>, <expr><name>VI_DELETE_PREV_CHAR</name></expr>, <expr><name>ED_PREV_CHAR</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_ERASE2</name></expr>, <expr><name>VERASE2</name></expr>,
<expr><block>{<expr><name>EM_DELETE_PREV_CHAR</name></expr>, <expr><name>VI_DELETE_PREV_CHAR</name></expr>, <expr><name>ED_PREV_CHAR</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_KILL</name></expr>, <expr><name>VKILL</name></expr>,
<expr><block>{<expr><name>EM_KILL_LINE</name></expr>, <expr><name>VI_KILL_LINE_PREV</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_KILL2</name></expr>, <expr><name>VKILL2</name></expr>,
<expr><block>{<expr><name>EM_KILL_LINE</name></expr>, <expr><name>VI_KILL_LINE_PREV</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_EOF</name></expr>, <expr><name>VEOF</name></expr>,
<expr><block>{<expr><name>EM_DELETE_OR_LIST</name></expr>, <expr><name>VI_LIST_OR_EOF</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_WERASE</name></expr>, <expr><name>VWERASE</name></expr>,
<expr><block>{<expr><name>ED_DELETE_PREV_WORD</name></expr>, <expr><name>ED_DELETE_PREV_WORD</name></expr>, <expr><name>ED_PREV_WORD</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_REPRINT</name></expr>, <expr><name>VREPRINT</name></expr>,
<expr><block>{<expr><name>ED_REDISPLAY</name></expr>, <expr><name>ED_INSERT</name></expr>, <expr><name>ED_REDISPLAY</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>C_LNEXT</name></expr>, <expr><name>VLNEXT</name></expr>,
<expr><block>{<expr><name>ED_QUOTED_INSERT</name></expr>, <expr><name>ED_QUOTED_INSERT</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>}</block></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><operator>(</operator><name>wint_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>(</operator><name>wint_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>,
<expr><block>{<expr><name>ED_UNASSIGNED</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>, <expr><name>ED_UNASSIGNED</name></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ttymodes_t</name></type> <name><name>ttymodes</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IGNBRK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ignbrk"</literal></expr>, <expr><name>IGNBRK</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BRKINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"brkint"</literal></expr>, <expr><name>BRKINT</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IGNPAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ignpar"</literal></expr>, <expr><name>IGNPAR</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARMRK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"parmrk"</literal></expr>, <expr><name>PARMRK</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"inpck"</literal></expr>, <expr><name>INPCK</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ISTRIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"istrip"</literal></expr>, <expr><name>ISTRIP</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INLCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"inlcr"</literal></expr>, <expr><name>INLCR</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IGNCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"igncr"</literal></expr>, <expr><name>IGNCR</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ICRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"icrnl"</literal></expr>, <expr><name>ICRNL</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IUCLC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"iuclc"</literal></expr>, <expr><name>IUCLC</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IXON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ixon"</literal></expr>, <expr><name>IXON</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IXANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ixany"</literal></expr>, <expr><name>IXANY</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IXOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ixoff"</literal></expr>, <expr><name>IXOFF</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IMAXBEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"imaxbel"</literal></expr>, <expr><name>IMAXBEL</name></expr>, <expr><name>MD_INP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"opost"</literal></expr>, <expr><name>OPOST</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OLCUC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"olcuc"</literal></expr>, <expr><name>OLCUC</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"onlcr"</literal></expr>, <expr><name>ONLCR</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OCRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ocrnl"</literal></expr>, <expr><name>OCRNL</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONOCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"onocr"</literal></expr>, <expr><name>ONOCR</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONOEOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"onoeot"</literal></expr>, <expr><name>ONOEOT</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"onlret"</literal></expr>, <expr><name>ONLRET</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OFILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ofill"</literal></expr>, <expr><name>OFILL</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OFDEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ofdel"</literal></expr>, <expr><name>OFDEL</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NLDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"nldly"</literal></expr>, <expr><name>NLDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"crdly"</literal></expr>, <expr><name>CRDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TABDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"tabdly"</literal></expr>, <expr><name>TABDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"xtabs"</literal></expr>, <expr><name>XTABS</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"bsdly"</literal></expr>, <expr><name>BSDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"vtdly"</literal></expr>, <expr><name>VTDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ffdly"</literal></expr>, <expr><name>FFDLY</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PAGEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"pageout"</literal></expr>, <expr><name>PAGEOUT</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WRAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"wrap"</literal></expr>, <expr><name>WRAP</name></expr>, <expr><name>MD_OUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CIGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cignore"</literal></expr>, <expr><name>CIGNORE</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CBAUD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cbaud"</literal></expr>, <expr><name>CBAUD</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSTOPB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cstopb"</literal></expr>, <expr><name>CSTOPB</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cread"</literal></expr>, <expr><name>CREAD</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARENB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"parenb"</literal></expr>, <expr><name>PARENB</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PARODD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"parodd"</literal></expr>, <expr><name>PARODD</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HUPCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"hupcl"</literal></expr>, <expr><name>HUPCL</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"clocal"</literal></expr>, <expr><name>CLOCAL</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOBLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"loblk"</literal></expr>, <expr><name>LOBLK</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CIBAUD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cibaud"</literal></expr>, <expr><name>CIBAUD</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRTSCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CCTS_OFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ccts_oflow"</literal></expr>, <expr><name>CCTS_OFLOW</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"crtscts"</literal></expr>, <expr><name>CRTSCTS</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRTS_IFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"crts_iflow"</literal></expr>, <expr><name>CRTS_IFLOW</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDTRCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cdtrcts"</literal></expr>, <expr><name>CDTRCTS</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MDMBUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"mdmbuf"</literal></expr>, <expr><name>MDMBUF</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RCV1EN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"rcv1en"</literal></expr>, <expr><name>RCV1EN</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XMT1EN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"xmt1en"</literal></expr>, <expr><name>XMT1EN</name></expr>, <expr><name>MD_CTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ISIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"isig"</literal></expr>, <expr><name>ISIG</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ICANON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"icanon"</literal></expr>, <expr><name>ICANON</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XCASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"xcase"</literal></expr>, <expr><name>XCASE</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echo"</literal></expr>, <expr><name>ECHO</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echoe"</literal></expr>, <expr><name>ECHOE</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echok"</literal></expr>, <expr><name>ECHOK</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHONL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echonl"</literal></expr>, <expr><name>ECHONL</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOFLSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"noflsh"</literal></expr>, <expr><name>NOFLSH</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"tostop"</literal></expr>, <expr><name>TOSTOP</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echoctl"</literal></expr>, <expr><name>ECHOCTL</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOPRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echoprt"</literal></expr>, <expr><name>ECHOPRT</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"echoke"</literal></expr>, <expr><name>ECHOKE</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFECHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"defecho"</literal></expr>, <expr><name>DEFECHO</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLUSHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"flusho"</literal></expr>, <expr><name>FLUSHO</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PENDIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"pendin"</literal></expr>, <expr><name>PENDIN</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEXTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"iexten"</literal></expr>, <expr><name>IEXTEN</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOKERNINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"nokerninfo"</literal></expr>, <expr><name>NOKERNINFO</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALTWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"altwerase"</literal></expr>, <expr><name>ALTWERASE</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"extproc"</literal></expr>, <expr><name>EXTPROC</name></expr>, <expr><name>MD_LIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"intr"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_INTR</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"quit"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_QUIT</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"erase"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_ERASE</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"kill"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_KILL</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"eof"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_EOF</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"eol"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_EOL</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"eol2"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_EOL2</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"swtch"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_SWTCH</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"dswtch"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_DSWTCH</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"erase2"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_ERASE2</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"start"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_START</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"stop"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_STOP</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"werase"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_WERASE</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"susp"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_SUSP</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"dsusp"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_DSUSP</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"reprint"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_REPRINT</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISCARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"discard"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_DISCARD</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"lnext"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_LNEXT</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"status"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_STATUS</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"page"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_PAGE</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPGOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"pgoff"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_PGOFF</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"kill2"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_KILL2</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VBRK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"brk"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_BRK</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"min"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_MIN</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"time"</literal></expr>, <expr><call><name>C_SH</name><argument_list>(<argument><expr><name>C_TIME</name></expr></argument>)</argument_list></call></expr>, <expr><name>MD_CHAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tty__gettabs</name><parameter_list>(<parameter><type><name>td</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((td)-&gt;c_oflag &amp; TAB3) == TAB3) ? 0 : 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tty__geteightbit</name><parameter_list>(<parameter><type><name>td</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((td)-&gt;c_cflag &amp; CSIZE) == CS8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tty__cooked_mode</name><parameter_list>(<parameter><type><name>td</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((td)-&gt;c_lflag &amp; ICANON)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tty_getty</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tty_setty</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tty__getcharindex</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tty__getchar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tty__setchar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>speed_t</name></type> <name>tty__getspeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tty_setup</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tty_setup_flags</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_qu</name></cpp:macro> <cpp:value>t_ts</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>tty_getty</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>tcgetattr</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>tty_setty</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>tcsetattr</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>tty_setup</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rst</name> <init>= <expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>NO_RESET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>EDIT_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: isatty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tty_getty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_or</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_getty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_or</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name> <operator>=</operator> <call><name>tty__getspeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_tabs</name></name> <operator>=</operator> <call><name>tty__gettabs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_eight</name></name> <operator>=</operator> <call><name>tty__geteightbit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tty_setup_flags</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name>EX_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>rst</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tty__cooked_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tty__getchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>rst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rst</name> <operator>&lt;</operator> <name>C_NCC</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>rst</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name> <operator>!=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name>
<operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name> <operator>!=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name> <operator>=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>rst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rst</name> <operator>&lt;</operator> <name>C_NCC</name></expr>;</condition> <incr><expr><name>rst</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name> <operator>!=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>EX_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name> <operator>=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>rst</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tty__setchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>EX_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tty_setup_flags</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name>ED_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tty__setchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tty_bind_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>=</operator> <name>EX_IO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name> <operator>=</operator> <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name></name></expr></argument>, <argument><expr><name>ttyperm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttyperm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name></name></expr></argument>, <argument><expr><name>ttychar</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttychar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tty_setup</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>

<name>tty_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>EDIT_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>how</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_or</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>speed_t</name></type>
<name>tty__getspeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>speed_t</name></type> <name>spd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>spd</name> <operator>=</operator> <call><name>cfgetispeed</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spd</name> <operator>=</operator> <call><name>cfgetospeed</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>spd</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>tty__getcharindex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_INTR</name></expr>:</case>
<return>return <expr><name>VINTR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_QUIT</name></expr>:</case>
<return>return <expr><name>VQUIT</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_ERASE</name></expr>:</case>
<return>return <expr><name>VERASE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_KILL</name></expr>:</case>
<return>return <expr><name>VKILL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_EOF</name></expr>:</case>
<return>return <expr><name>VEOF</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_EOL</name></expr>:</case>
<return>return <expr><name>VEOL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_EOL2</name></expr>:</case>
<return>return <expr><name>VEOL2</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_SWTCH</name></expr>:</case>
<return>return <expr><name>VSWTCH</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_DSWTCH</name></expr>:</case>
<return>return <expr><name>VDSWTCH</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_ERASE2</name></expr>:</case>
<return>return <expr><name>VERASE2</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_START</name></expr>:</case>
<return>return <expr><name>VSTART</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_STOP</name></expr>:</case>
<return>return <expr><name>VSTOP</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_WERASE</name></expr>:</case>
<return>return <expr><name>VWERASE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_SUSP</name></expr>:</case>
<return>return <expr><name>VSUSP</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_DSUSP</name></expr>:</case>
<return>return <expr><name>VDSUSP</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_REPRINT</name></expr>:</case>
<return>return <expr><name>VREPRINT</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISCARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_DISCARD</name></expr>:</case>
<return>return <expr><name>VDISCARD</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_LNEXT</name></expr>:</case>
<return>return <expr><name>VLNEXT</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_STATUS</name></expr>:</case>
<return>return <expr><name>VSTATUS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_PAGE</name></expr>:</case>
<return>return <expr><name>VPAGE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPGOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_PGOFF</name></expr>:</case>
<return>return <expr><name>VPGOFF</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_KILL2</name></expr>:</case>
<return>return <expr><name>VKILL2</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_MIN</name></expr>:</case>
<return>return <expr><name>VMIN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>C_TIME</name></expr>:</case>
<return>return <expr><name>VTIME</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty__getchar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_INTR</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_QUIT</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VQUIT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_ERASE</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_KILL</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_EOF</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOF</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_EOL</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_EOL2</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_SWTCH</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSWTCH</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_DSWTCH</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDSWTCH</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_ERASE2</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VERASE2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_START</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTART</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_STOP</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTOP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_WERASE</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VWERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_SUSP</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSUSP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_DSUSP</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDSUSP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_REPRINT</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VREPRINT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISCARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_DISCARD</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDISCARD</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_LNEXT</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VLNEXT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_STATUS</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTATUS</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_PAGE</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VPAGE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPGOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_PGOFF</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VPGOFF</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_KILL2</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VKILL2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_MIN</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>C_TIME</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty__setchar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_INTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VQUIT</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_QUIT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_ERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_KILL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOF</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_EOF</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_EOL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL2</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_EOL2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSWTCH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_SWTCH</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDSWTCH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_DSWTCH</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VERASE2</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_ERASE2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTART</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_START</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTOP</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_STOP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VWERASE</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_WERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSUSP</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_SUSP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDSUSP</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_DSUSP</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VREPRINT</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_REPRINT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISCARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VDISCARD</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_DISCARD</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VLNEXT</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_LNEXT</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTATUS</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_STATUS</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VPAGE</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_PAGE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPGOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VPGOFF</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_PGOFF</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VKILL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VKILL2</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_KILL2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_MIN</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>C_TIME</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>tty_bind_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>t_n</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>t_o</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name><operator>.</operator><name>c_cc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>new</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>old</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ttymap_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>el_action_t</name> <modifier>*</modifier></type><name>dmap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dalt</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>old</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dmap</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vii</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dalt</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vic</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dmap</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>emacs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dalt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>tty_map</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>nch</name></name> <operator>!=</operator> <operator>(</operator><name>wint_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name><name>t_n</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>nch</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name><name>t_o</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>och</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>dmap</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>bind</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dalt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>alt</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alt</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>
<name><name>dalt</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>alt</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alt</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>
<name><name>tp</name><operator>-&gt;</operator><name>bind</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>tcflag_t</name> <modifier>*</modifier></type>
<name>tty__get_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MD_INP</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>c_iflag</name></name></expr>;</return>
<case>case <expr><name>MD_OUT</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>c_oflag</name></name></expr>;</return>
<case>case <expr><name>MD_CTL</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>c_cflag</name></name></expr>;</return>
<case>case <expr><name>MD_LIN</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>c_lflag</name></name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>tcflag_t</name></type>
<name>tty_update_flag</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>tcflag_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <operator>~</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><name>t_clrmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>|=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><name>t_setmask</name></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty_update_flags</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tcflag_t</name> <modifier>*</modifier></type><name>tt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ed</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ex</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>tty__get_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ed</name> <operator>=</operator> <call><name>tty__get_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <call><name>tty__get_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tt</name> <operator>!=</operator> <operator>*</operator><name>ex</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>kind</name> <operator>!=</operator> <name>MD_CTL</name> <operator>||</operator> <operator>*</operator><name>tt</name> <operator>!=</operator> <operator>*</operator><name>ed</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ed</name> <operator>=</operator> <call><name>tty_update_flag</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>tt</name></expr></argument>, <argument><expr><name>ED_IO</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ex</name> <operator>=</operator> <call><name>tty_update_flag</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>tt</name></expr></argument>, <argument><expr><name>EX_IO</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty_update_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>MD_CHAR</name></expr>]</index></name><operator>.</operator><name>t_setmask</name> <operator>&amp;</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>EX_IO</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>MD_CHAR</name></expr>]</index></name><operator>.</operator><name>t_clrmask</name> <operator>&amp;</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_rawmode</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>ED_IO</name> <operator>||</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>QU_IO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>EDIT_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tty_getty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_getty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_eight</name></name> <operator>=</operator> <call><name>tty__geteightbit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name> <operator>=</operator> <call><name>tty__getspeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tty__getspeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name> <operator>||</operator>
<call><name>tty__getspeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cfsetispeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cfsetospeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cfsetispeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cfsetospeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tty__cooked_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>MD_INP</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MD_LIN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tty_update_flags</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>tty__gettabs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_tabs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_tabs</name></name> <operator>=</operator> <ternary><condition><expr><name>EL_CAN_TAB</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>tty__getchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>C_NCC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>TS_IO</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>EX_IO</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>C_NCC</name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>C_NCC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tty_update_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ED_IO</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tty_bind_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tty__setchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>C_NCC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tty_update_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EX_IO</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tty__setchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>EX_IO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>=</operator> <name>ED_IO</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_cookedmode</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>EX_IO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>EDIT_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>=</operator> <name>EX_IO</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_quotemode</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>QU_IO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_qu</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tty_setup_flags</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_qu</name></name></expr></argument>, <argument><expr><name>QU_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_qu</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>=</operator> <name>QU_IO</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_noquotemode</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>!=</operator> <name>QU_IO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>=</operator> <name>ED_IO</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>libedit_private</name> <name>int</name></type>

<name>tty_stty</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ttymodes_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>tios</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>EX_IO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>aflag</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tios</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>ED_IO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tios</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>EX_IO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tios</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>QU_IO</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: Unknown switch `%lc'.\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cu</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>ttymodes</name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>len</name> <operator>=</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t_setmask</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>m_value</name></name><operator>)</operator></expr>
?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'\0'</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t_clrmask</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>aflag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>x</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>cu</name> <operator>&gt;=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\n%*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>st</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>st</name> <operator>+</operator> <name>cu</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>cu</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"%c%s "</literal></expr></argument>,
<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>argv</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wcschr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>ttymodes</name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>MD_CHAR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: Invalid argument `%ls'.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>ffs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><ternary><condition><expr><operator>*</operator><operator>++</operator><name>p</name></expr> ?</condition><then> <expr><call><name>parse__escape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_vdisable</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tty__getcharindex</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cc_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_setmask</name> <operator>|=</operator> <name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_clrmask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_setmask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_clrmask</name> <operator>|=</operator> <name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_setmask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name></expr>]</index></name><operator>.</operator><name>t_clrmask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>tty_setup_flags</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>tios</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tty_setty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><name>tios</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s: tty_setty: %s\n"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty_printchar</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ttyperm_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>C_NCC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_t</name></name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>MD_CHAR</name> <operator>&amp;&amp;</operator> <call><name>C_SH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>m_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s ^%c "</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>tty_setup_flags</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>tios</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>kind</name> <operator>=</operator> <name>MD_INP</name></expr>;</init> <condition><expr><name>kind</name> <operator>&lt;=</operator> <name>MD_LIN</name></expr>;</condition> <incr><expr><name>kind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>tcflag_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>tty__get_flag</name><argument_list>(<argument><expr><name>tios</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <call><name>tty_update_flag</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>libedit_private</name> <name>int</name></type>
<name>tty_get_signal_character</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>tcflag_t</name> <modifier>*</modifier></type><name>ed</name> <init>= <expr><call><name>tty__get_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_ed</name></name></expr></argument>, <argument><expr><name>MD_INP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ed</name> <operator>&amp;</operator> <name>ECHOCTL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGINT</name></expr>:</case>
<return>return <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>VINTR</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGQUIT</name></expr>:</case>
<return>return <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>VQUIT</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VSTATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGINFO</name></expr>:</case>
<return>return <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>VSTATUS</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGTSTP</name></expr>:</case>
<return>return <expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_c</name><index>[<expr><name>ED_IO</name></expr>]</index><index>[<expr><name>VSUSP</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
