<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/tokenizer.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)tokenizer.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: tokenizer.c,v 1.28 2016/04/11 18:56:31 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histedit.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>Q_none</name></decl>, <decl><name>Q_single</name></decl>, <decl><name>Q_double</name></decl>, <decl><name>Q_one</name></decl>, <decl><name>Q_doubleone</name></decl>
}</block></enum></type> <name>quote_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_KEEP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK_EAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINCR</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AINCR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFS</name></cpp:macro> <cpp:value>STR("\t \n")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_malloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_free</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_realloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(a, b)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NARROWCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>rest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prefix ##_ ##rest</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strchr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strchr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_strdup</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strdup(s)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>rest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prefix ##_w ##rest</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type ##W</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L ##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Strchr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcschr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tok_strdup</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wcsdup(s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>TYPE</name></name></type>(<name>tokenizer</name>) <block>{<block_content>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>ifs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>amax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>wptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>wstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>wspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quote_t</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>FUN</name><argument_list>(<argument><expr><name>tok</name></expr></argument>,<argument><expr><name>finish</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>FUN</name><argument_list>(<argument><expr><name>tok</name></expr></argument>,<argument><expr><name>finish</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TOK_KEEP</name><operator>)</operator> <operator>||</operator> <name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>!=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name> <operator>=</operator> <operator>++</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_KEEP</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator>
<macro><name>FUN</name><argument_list>(<argument>tok</argument>,<argument>init</argument>)</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>ifs</name><operator>)</operator>
<block>{
<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name> <operator>=</operator> <call><name>tok_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tok</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name> <operator>=</operator> <call><name>tok_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>ifs</name></expr> ?</condition><then> <expr><name>ifs</name></expr> </then><else>: <expr><name>IFS</name></expr></else></ternary></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>amax</name></name> <operator>=</operator> <name>AINCR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>tok_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tok</name><operator>-&gt;</operator><name>amax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name> <operator>=</operator> <call><name>tok_malloc</name><argument_list>(<argument><expr><name>WINCR</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tok_free</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wmax</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name> <operator>+</operator> <name>WINCR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>

<return>return <expr><name>tok</name></expr>;</return>
}





void
<macro><name>FUN</name><argument_list>(<argument>tok</argument>,<argument>reset</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name><operator>)</operator>
<block>{

<expr><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr>;
<expr><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr>;
<expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;
}</block>





<name>void</name>
<macro><name>FUN</name><argument_list>(<argument>tok</argument>,<argument>end</argument>)</argument_list></macro><operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name><operator>)</operator>
<block>{

<expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>tok_free</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>tok_free</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;
}</block>




















<name>int</name>
<macro><name>FUN</name><argument_list>(<argument>tok</argument>,<argument>line</argument>)</argument_list></macro><operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name><operator>,</operator> <specifier>const</specifier> <call><name>TYPE</name><argument_list>(<argument><expr><name>LineInfo</name></expr></argument>)</argument_list></call> <operator>*</operator><name>line</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>argc</name><operator>,</operator> <specifier>const</specifier> <name>Char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>argv</name><operator>,</operator> <name>int</name> <operator>*</operator><name>cursorc</name><operator>,</operator> <name>int</name> <operator>*</operator><name>cursoro</name><operator>)</operator>
<block>{
<expr><specifier>const</specifier> <name>Char</name> <operator>*</operator><name>ptr</name></expr>;
<expr><name>int</name> <name>cc</name></expr>, <expr><name>co</name></expr>;

<expr><name>cc</name> <operator>=</operator> <name>co</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
<expr><name>ptr</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name></name></expr>;
<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</init> <condition>;</condition><incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name><name>line</name><operator>-&gt;</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name><name>line</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TOK_KEEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_single</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Q_single</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_double</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TOK_KEEP</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_double</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_single</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TOK_KEEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_one</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_double</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_doubleone</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_single</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>
<goto>goto <name>tok_line_outok</name>;</goto>

<case>case <expr><name>Q_single</name></expr>:</case>
<case>case <expr><name>Q_double</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TOK_EAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TOK_EAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TOK_EAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>tok_line_outok</name>;</goto>

<case>case <expr><name>Q_single</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>Q_double</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TOK_EAT</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Q_none</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>Strchr</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>ifs</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUN</name><argument_list>(<argument><expr><name>tok</name></expr></argument>,<argument><expr><name>finish</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>Q_single</name></expr>:</case>
<case>case <expr><name>Q_double</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Q_doubleone</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_double</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Q_one</name></expr>:</case>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>Q_none</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>&gt;=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wmax</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>wmax</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name> <operator>+</operator> <name>WINCR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tok_realloc</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr></argument>,
<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tok</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name><operator>)</operator> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name><operator>)</operator> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name> <operator>=</operator> <operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name><operator>)</operator> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wspace</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>wmax</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name><name>tok</name><operator>-&gt;</operator><name>amax</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>amax</name></name> <operator>+=</operator> <name>AINCR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tok_realloc</name><argument_list>(<argument><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>tok</name><operator>-&gt;</operator><name>amax</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>amax</name></name> <operator>-=</operator> <name>AINCR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
}
tok_line_outok:
<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>co</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>wptr</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>wstart</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cursorc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cursorc</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cursoro</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cursoro</name> <operator>=</operator> <name>co</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><call><name>FUN</name><argument_list>(<argument><expr><name>tok</name></expr></argument>,<argument><expr><name>finish</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>argv</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>Char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>tok</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>tok</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}





int
<macro><name>FUN</name><argument_list>(<argument>tok</argument>,<argument>str</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><call><name>TYPE</name><argument_list>(<argument><expr><name>Tokenizer</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tok</name><operator>,</operator> <specifier>const</specifier> <name>Char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>int</name> <operator>*</operator><name>argc</name><operator>,</operator>
<specifier>const</specifier> <name>Char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>argv</name><operator>)</operator>
<block>{
<macro><name>TYPE</name><argument_list>(<argument>LineInfo</argument>)</argument_list></macro> <expr><name>li</name></expr>;

<expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><name><name>li</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>line</name></expr>;
<expr><name><name>li</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <call><name>Strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><call><name>FUN</name><argument_list>(<argument><expr><name>tok</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</unit>
