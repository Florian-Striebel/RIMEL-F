<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/terminal.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)term.c 8.2 (Berkeley) 4/30/95";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: terminal.c,v 1.44 2021/09/09 20:24:07 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMCAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termcap.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curses.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_NCURSES_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERM_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMCAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;term.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_BUFSIZE</name></cpp:macro> <cpp:value>((size_t)2048)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GoodStr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(el-&gt;el_terminal.t_str[a] != NULL &amp;&amp; el-&gt;el_terminal.t_str[a][0] != '\0')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Str</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>el-&gt;el_terminal.t_str[a]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Val</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>el-&gt;el_terminal.t_val[a]</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>termcapstr</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>tstr</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_al</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"add new blank line"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_bl</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"bl"</literal></expr>, <expr><literal type="string">"audible bell"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_cd</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"cd"</literal></expr>, <expr><literal type="string">"clear to bottom"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ce</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ce"</literal></expr>, <expr><literal type="string">"clear to end of line"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ch</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ch"</literal></expr>, <expr><literal type="string">"cursor to horiz pos"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_cl</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"cl"</literal></expr>, <expr><literal type="string">"clear screen"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_dc</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"dc"</literal></expr>, <expr><literal type="string">"delete a character"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_dl</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"dl"</literal></expr>, <expr><literal type="string">"delete a line"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_dm</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"dm"</literal></expr>, <expr><literal type="string">"start delete mode"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ed</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ed"</literal></expr>, <expr><literal type="string">"end delete mode"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ei</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ei"</literal></expr>, <expr><literal type="string">"end insert mode"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_fs</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"fs"</literal></expr>, <expr><literal type="string">"cursor from status line"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ho</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ho"</literal></expr>, <expr><literal type="string">"home cursor"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ic</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ic"</literal></expr>, <expr><literal type="string">"insert character"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_im</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"im"</literal></expr>, <expr><literal type="string">"start insert mode"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ip</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ip"</literal></expr>, <expr><literal type="string">"insert padding"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_kd</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"kd"</literal></expr>, <expr><literal type="string">"sends cursor down"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_kl</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"kl"</literal></expr>, <expr><literal type="string">"sends cursor left"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_kr</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"kr"</literal></expr>, <expr><literal type="string">"sends cursor right"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ku</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ku"</literal></expr>, <expr><literal type="string">"sends cursor up"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_md</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"md"</literal></expr>, <expr><literal type="string">"begin bold"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_me</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"me"</literal></expr>, <expr><literal type="string">"end attributes"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_nd</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"nd"</literal></expr>, <expr><literal type="string">"non destructive space"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_se</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"se"</literal></expr>, <expr><literal type="string">"end standout"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_so</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"so"</literal></expr>, <expr><literal type="string">"begin standout"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ts</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ts"</literal></expr>, <expr><literal type="string">"cursor to status line"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_up</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"up"</literal></expr>, <expr><literal type="string">"cursor up one"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_us</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"us"</literal></expr>, <expr><literal type="string">"begin underline"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ue</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"ue"</literal></expr>, <expr><literal type="string">"end underline"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_vb</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"vb"</literal></expr>, <expr><literal type="string">"visible bell"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DC</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"DC"</literal></expr>, <expr><literal type="string">"delete multiple chars"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DO</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"DO"</literal></expr>, <expr><literal type="string">"cursor down multiple"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_IC</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"IC"</literal></expr>, <expr><literal type="string">"insert multiple chars"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LE</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"LE"</literal></expr>, <expr><literal type="string">"cursor left multiple"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_RI</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"RI"</literal></expr>, <expr><literal type="string">"cursor right multiple"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UP</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"UP"</literal></expr>, <expr><literal type="string">"cursor up multiple"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_kh</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"kh"</literal></expr>, <expr><literal type="string">"send cursor home"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_at7</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"@7"</literal></expr>, <expr><literal type="string">"send cursor end"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_kD</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"kD"</literal></expr>, <expr><literal type="string">"send cursor delete"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_str</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>termcapval</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>tval</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_am</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"am"</literal></expr>, <expr><literal type="string">"has automatic margins"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_pt</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"pt"</literal></expr>, <expr><literal type="string">"has physical tabs"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_li</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"li"</literal></expr>, <expr><literal type="string">"Number of lines"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_co</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"co"</literal></expr>, <expr><literal type="string">"Number of columns"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_km</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"km"</literal></expr>, <expr><literal type="string">"Has meta key"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_xt</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"xt"</literal></expr>, <expr><literal type="string">"Tab chars destructive"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_xn</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"xn"</literal></expr>, <expr><literal type="string">"newline ignored at right margin"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"MT"</literal></expr>, <expr><literal type="string">"Has meta key"</literal></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_val</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>
}</block></expr></init></decl>;</struct>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_setflags</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>terminal_rebuffer_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_free_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>terminal_alloc_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_alloc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_init_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_reset_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>terminal_putc</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminal_tputs</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>terminal_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>terminal_outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_setflags</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_tabs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>Val</name><argument_list>(<argument><expr><name>T_pt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Val</name><argument_list>(<argument><expr><name>T_xt</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TERM_CAN_TAB</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>Val</name><argument_list>(<argument><expr><name>T_km</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_MT</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TERM_HAS_META</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ce</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TERM_CAN_CEOL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_dc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_DC</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TERM_CAN_DELETE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_im</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ic</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_IC</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TERM_CAN_INSERT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_up</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_UP</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TERM_CAN_UP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_am</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TERM_HAS_AUTO_MARGINS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_xn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TERM_HAS_MAGIC_MARGINS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_me</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_me</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>TERM_CAN_ME</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>&amp;=</operator> <operator>~</operator><name>TERM_CAN_ME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_me</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_se</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EL_FLAGS</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_me</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_se</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>TERM_CAN_ME</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"WARNING: Your terminal cannot move up.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"Editing may be odd for long lines.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_CEOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"no clear EOL capability.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"no delete char capability.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"no insert char capability.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>TC_BUFSIZE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>TC_BUFSIZE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>A_K_NKEYS</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail3</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>T_str</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail4</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>T_val</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail5</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>terminal_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_init_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail5</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>fail4</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>fail3</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>fail2</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>fail1</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_free_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_alloc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>termbuf</name><index>[<expr><name>TC_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tlen</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tlist</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>str</name> <init>= <expr><operator>&amp;</operator><name><name>tlist</name><index>[<expr><name>t</name> <operator>-</operator> <name>tstr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name>termbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>termbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cap</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>cap</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tlen</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&lt;=</operator> <name>tlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>TC_BUFSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name><index>[
<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>+=</operator> <name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>tlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>tlist</name></expr>;</init> <condition><expr><name>tmp</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>tlist</name><index>[<expr><name>T_str</name></expr>]</index></name></expr>;</condition> <incr><expr><name>tmp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp</name> <operator>!=</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>termbuf</name><index>[<expr><name>tlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><name><name>termbuf</name><index>[<expr><name>tlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name></expr></argument>, <argument><expr><name>termbuf</name></expr></argument>, <argument><expr><name>TC_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>TC_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"Out of termcap string space.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_loc</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>terminal_rebuffer_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>coord_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>terminal_free_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>terminal_alloc_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>terminal_alloc_buffer</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>coord_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>v</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>v</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_free_buffer</name><parameter_list>(<parameter><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bufp</name> <operator>=</operator> <name>b</name></expr>;</init> <condition><expr><operator>*</operator><name>bufp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>bufp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>terminal_alloc_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name></name> <operator>=</operator> <call><name>terminal_alloc_buffer</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name></name> <operator>=</operator> <call><name>terminal_alloc_buffer</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>terminal_free_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_free_display</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>terminal_free_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_free_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_vdisplay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_move_to_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>del</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: where is ridiculous: %d\r\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>del</name> <operator>=</operator> <name>where</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<for>for <control>(<init>;</init> <condition><expr><name>del</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>del</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_UP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>-</operator><name>del</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_up</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_UP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>del</name></expr></argument>, <argument><expr><operator>-</operator><name>del</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_up</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name>del</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>del</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_up</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>where</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_move_to_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>del</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<label><name>mc_again</name>:</label>
<if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>where</name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: where is ridiculous: %d\r\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>where</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>del</name> <operator>=</operator> <name>where</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>del</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">4</literal> <operator>||</operator> <name>del</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>del</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>del</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_RI</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_RI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>EL_CAN_TAB</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">0370</literal><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name>where</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[
<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index><index>[<expr><name>where</name> <operator>&amp;</operator> <literal type="number">0370</literal></expr>]</index></name> <operator>!=</operator>
<name>MB_FILL_CHAR</name><operator>)</operator></expr>
)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">0370</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>where</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>,
<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>where</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>,
<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[
<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>where</name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>-</operator><name>del</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>del</name></expr></argument>, <argument><expr><operator>-</operator><name>del</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>-</operator><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>EL_CAN_TAB</name></expr> ?</condition><then>
<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>-</operator><name>del</name> <operator>&gt;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>where</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>where</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><operator>-</operator><name>del</name> <operator>&gt;</operator> <name>where</name><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>mc_again</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>-</operator><name>del</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>where</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_overwrite</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: n is ridiculous: %zu\r\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>EL_HAS_AUTO_MARGINS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>EL_HAS_MAGIC_MARGINS</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>wchar_t</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index>
<index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_display</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>v</name></name></expr>]</index>
<index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name></expr>]</index></name> <operator>==</operator> <name>MB_FILL_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_deletechars</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_DELETE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_EDIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">" ERROR: cannot delete \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: num is ridiculous: %d\r\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_DC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_DC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_dm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_dm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>num</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_dc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_insertwrite</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EL_CAN_INSERT</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_EDIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">" ERROR: cannot insert \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s: num is ridiculous: %d\r\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_IC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_IC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_im</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ei</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>--</operator><name>num</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ei</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ic</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block> while <condition>(<expr><operator>--</operator><name>num</name></expr>)</condition>;</do>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_clear_EOL</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>EL_CAN_CEOL</name> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ce</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_clear_screen</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_cl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_cl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_ho</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GoodStr</name><argument_list>(<argument><expr><name>T_cd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_ho</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_beep</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GoodStr</name><argument_list>(<argument><expr><name>T_bl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Str</name><argument_list>(<argument><expr><name>T_bl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="char">'\007'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>term</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_name</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TC_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>oset</name></decl>, <decl><type ref="prev"/><name>nset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lins</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>area</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>term</name> <operator>||</operator> <operator>!</operator><name><name>term</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term</name> <operator>=</operator> <literal type="string">"dumb"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"emacs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>|=</operator> <name>EDIT_DISABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TC_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>tgetent</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_cap</name></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"Cannot read termcap database;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"No entry for terminal type \"%s\";\n"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"using dumb terminal settings.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_pt</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_km</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_xt</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tstr</name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_alloc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_am</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"am"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_xn</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"xn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_pt</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"pt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_xt</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"xt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_km</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"km"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_MT</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"MT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tstr</name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_alloc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>tgetstr</name><argument_list>(<argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_setflags</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>terminal_get_size</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>terminal_change_size</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>lins</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_bind_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_name</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_get_size</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lins</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lins</name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lins</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ttysize</name></name></type> <name>ts</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>TIOCGSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>.</operator><name>ts_cols</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>ts_cols</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>.</operator><name>ts_lines</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lins</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>ts_lines</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>*</operator><name>cols</name> <operator>||</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>*</operator><name>lins</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_change_size</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>coord_t</name></type> <name>cur</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cols</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">80</literal></expr> </then><else>: <expr><name>cols</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>lins</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><name>lins</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>terminal_rebuffer_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_cursor</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_init_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"down"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_kd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_NEXT_HISTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"up"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_ku</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_PREV_HISTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"left"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_kl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_PREV_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"right"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_kr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_NEXT_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"home"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_kh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_MOVE_TO_BEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"end"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_at7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_MOVE_TO_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DE</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">L"delete"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DE</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>T_kD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DE</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ED_DELETE_NEXT_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>A_K_DE</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_reset_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strA</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[A"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strB</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[B"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strC</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[C"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strD</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[D"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strH</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[H"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>strF</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033[F"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOA</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OA"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOB</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OB"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOC</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OC"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOD</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OD"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOH</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OH"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>stOF</name><index>[]</index></name> <init>= <expr><literal type="string">L"\033OF"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>strF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>stOF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strC</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strH</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_UP</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_DN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOC</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_RT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_LT</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOH</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_HO</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stOF</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>A_K_EN</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_set_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>keymacro_value_t</name> <modifier>*</modifier></type><name>fun</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_K_NKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fun</name> <operator>=</operator> <operator>*</operator><name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal_clear_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_K_NKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>XK_NOD</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_print_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_K_NKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>wcscmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>XK_NOD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keymacro_kprint</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>, <argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_bind_arrow</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>el_action_t</name> <modifier>*</modifier></type><name>dmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funckey_t</name> <modifier>*</modifier></type><name>arrow</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_fkey</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <ternary><condition><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr> ?</condition><then> <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr> </then><else>: <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dmap</name> <operator>=</operator> <ternary><condition><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr> ?</condition><then> <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vic</name></name></expr> </then><else>: <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>emacs</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_reset_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_K_NKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wt_str</name><index>[<expr><name>VISUAL_WIDTH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>px</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name><index>[<expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>VISUAL_WIDTH_MAX</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wt_str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>VISUAL_WIDTH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wt_str</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>px</name> <operator>=</operator> <name>wt_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>XK_NOD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dmap</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator>
<name><name>map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>ED_SEQUENCE_LEAD_IN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>px</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>,
<argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>ED_UNASSIGNED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>XK_CMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fun</name><operator>.</operator><name>cmd</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>px</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fun</name></expr></argument>,
<argument><expr><name><name>arrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>terminal_putc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>terminal_outfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>fputc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>terminal_outfile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminal_tputs</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>affcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>terminal_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>terminal_outfile</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tputs</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>terminal_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>terminal_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>int</name></type>
<name>terminal__putc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_LEN_MAX</name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>MB_FILL_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <name>EL_LITERAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>literal_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ct_encode_char</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>MB_LEN_MAX</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal__flush</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>terminal_writec</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>visbuf</name><index>[<expr><name>VISUAL_WIDTH_MAX</name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>vcnt</name> <init>= <expr><call><name>ct_visual_char</name><argument_list>(<argument><expr><name>visbuf</name></expr></argument>, <argument><expr><name>VISUAL_WIDTH_MAX</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vcnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>visbuf</name><index>[<expr><name>vcnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_overwrite</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>visbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>vcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><name>libedit_private</name> <name>int</name></type>

<name>terminal_telltc</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>*</operator><name>argv</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\n\tYour terminal has the\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\tfollowing characteristics:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\tIt has %d columns and %d lines\n"</literal></expr></argument>,
<argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"\tIt has %s meta key\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>EL_HAS_META</name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"\tIt can%suse tabs\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>EL_CAN_TAB</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"not "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\tIt %s automatic margins\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>EL_HAS_AUTO_MARGINS</name></expr> ?</condition><then> <expr><literal type="string">"has"</literal></expr> </then><else>: <expr><literal type="string">"does not have"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>EL_HAS_AUTO_MARGINS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\tIt %s magic margins\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>EL_HAS_MAGIC_MARGINS</name></expr> ?</condition><then> <expr><literal type="string">"has"</literal></expr> </then><else>: <expr><literal type="string">"does not have"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tstr</name></expr><operator>,</operator> <expr><name>ts</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr><operator>,</operator> <expr><name>ts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ub</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ts</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>ts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ub</name> <operator>=</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><call><name>ct_visual_string</name><argument_list>(
<argument><expr><call><name>ct_decode_string</name><argument_list>(<argument><expr><operator>*</operator><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_visual</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ub</name> <operator>=</operator> <literal type="string">"(empty)"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"\t%25s (%s) == %s\n"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>int</name></type>

<name>terminal_settc</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapval</name></name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>what</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>how</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>how</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>ts</name> <operator>=</operator> <name>tstr</name></expr>;</init> <condition><expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ts</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_alloc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_setflags</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>tv</name> <operator>=</operator> <name>tval</name></expr>;</init> <condition><expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tv</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Bad capability `%s'.\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_pt</name></expr>]</index></name> <operator>||</operator> <name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_km</name></expr>]</index></name> <operator>||</operator>
<name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_am</name></expr>]</index></name> <operator>||</operator> <name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_xn</name></expr>]</index></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name><index>[<expr><name>tv</name> <operator>-</operator> <name>tval</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name><index>[<expr><name>tv</name> <operator>-</operator> <name>tval</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Bad value `%s'.\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>terminal_setflags</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Bad value `%s'.\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name><index>[<expr><name>tv</name> <operator>-</operator> <name>tval</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_co</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_li</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_size</name><operator>.</operator><name>h</name></name> <operator>=</operator> <call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <call><name>terminal_change_size</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>libedit_private</name> <name>int</name></type>

<name>terminal_gettc</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapval</name></name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>how</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>how</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>ts</name> <operator>=</operator> <name>tstr</name></expr>;</init> <condition><expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ts</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>how</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name><index>[<expr><name>ts</name> <operator>-</operator> <name>tstr</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>tv</name> <operator>=</operator> <name>tval</name></expr>;</init> <condition><expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tv</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_pt</name></expr>]</index></name> <operator>||</operator> <name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_km</name></expr>]</index></name> <operator>||</operator>
<name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_am</name></expr>]</index></name> <operator>||</operator> <name>tv</name> <operator>==</operator> <operator>&amp;</operator><name><name>tval</name><index>[<expr><name>T_xn</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>yes</name><index>[]</index></name> <init>= <expr><literal type="string">"yes"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>no</name><index>[]</index></name> <init>= <expr><literal type="string">"no"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name><index>[<expr><name>tv</name> <operator>-</operator> <name>tval</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>how</name> <operator>=</operator> <name>yes</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>how</name> <operator>=</operator> <name>no</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>how</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_val</name><index>[<expr><name>tv</name> <operator>-</operator> <name>tval</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>libedit_private</name> <name>int</name></type>

<name>terminal_echotc</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>wchar_t</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg_need</name></decl>, <decl><type ref="prev"/><name>arg_cols</name></decl>, <decl><type ref="prev"/><name>arg_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>silent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>fmts</name><index>[]</index></name> <init>= <expr><literal type="string">"%s\n"</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>fmtd</name><index>[]</index></name> <init>= <expr><literal type="string">"%d\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>termcapstr</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TC_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>area</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>silent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name> <operator>||</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"tabs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>, <argument><expr><ternary><condition><expr><name>EL_CAN_TAB</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"meta"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_km</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"xn"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>, <argument><expr><ternary><condition><expr><name>EL_HAS_MAGIC_MARGINS</name></expr> ?</condition><then>
<expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"am"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmts</name></expr></argument>, <argument><expr><ternary><condition><expr><name>EL_HAS_AUTO_MARGINS</name></expr> ?</condition><then>
<expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"baud"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmtd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"rows"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"lines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmtd</name></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_li</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">L"cols"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><name>fmtd</name></expr></argument>, <argument><expr><call><name>Val</name><argument_list>(<argument><expr><name>T_co</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>scap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tstr</name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scap</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_terminal</name><operator>.</operator><name>t_str</name><index>[<expr><name>t</name> <operator>-</operator> <name>tstr</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scap</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scap</name> <operator>||</operator> <name><name>scap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Termcap parameter `%ls' not found.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>cap</name> <operator>=</operator> <name>scap</name></expr><operator>,</operator> <expr><name>arg_need</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>cap</name></expr>;</condition> <incr><expr><name>cap</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cap</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>cap</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name>arg_need</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>



<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: unknown termcap %% `%c'.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt></block_content></block></for>

<switch>switch <condition>(<expr><name>arg_need</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Extra argument `%ls'.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>scap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name> <operator>||</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Missing argument.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Bad value `%ls' for rows.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_rows</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Extra argument `%ls"</literal>
<literal type="string">"'.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>scap</name></expr></argument>, <argument><expr><name>arg_cols</name></expr></argument>, <argument><expr><name>arg_rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Too many required arguments (%d).\n"</literal></expr></argument>,
<argument><expr><name>arg_need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name> <operator>||</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Missing argument.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Bad value `%ls' for cols.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_cols</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name> <operator>||</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Missing argument.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Bad value `%ls' for rows.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_rows</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Bad value `%ls'.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"echotc: Warning: Extra argument `%ls"</literal>
<literal type="string">"'.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminal_tputs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>scap</name></expr></argument>, <argument><expr><name>arg_cols</name></expr></argument>, <argument><expr><name>arg_rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
