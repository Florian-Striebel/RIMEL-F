<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/el.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_h_el</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_h_el</name></cpp:macro></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KSHVI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEFAULT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"histedit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chartype.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_BUFSIZ</name></cpp:macro> <cpp:value>((size_t)1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_SIGNALS</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_TTY</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_DISABLED</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNBUFFERED</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NARROW_HISTORY</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_RESET</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXIO</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>el_action_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>coord_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
}</block></struct></type> <name>coord_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>el_line_t</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>lastchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>el_line_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>el_state_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>inputmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doingarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>metanext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>lastcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>thiscmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>thisch</name></decl>;</decl_stmt>
}</block></struct></type> <name>el_state_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el_malloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el_calloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el_realloc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el_free</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(a)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"literal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"keymacro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"terminal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refresh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sig.h"</cpp:file></cpp:include>

<struct_decl>struct <name>el_read_t</name>;</struct_decl>

<struct>struct <name>editline</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>el_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>el_infile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>el_outfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>el_errfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>el_infd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>el_outfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>el_errfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>el_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>coord_t</name></type> <name>el_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>el_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>el_vdisplay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>el_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_line_t</name></type> <name>el_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_state_t</name></type> <name>el_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_terminal_t</name></type> <name>el_terminal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_tty_t</name></type> <name>el_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_refresh_t</name></type> <name>el_refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_prompt_t</name></type> <name>el_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_prompt_t</name></type> <name>el_rprompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_literal_t</name></type> <name>el_literal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_chared_t</name></type> <name>el_chared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_map_t</name></type> <name>el_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_keymacro_t</name></type> <name>el_keymacro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_history_t</name></type> <name>el_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_search_t</name></type> <name>el_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_signal_t</name></type> <name>el_signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>el_read_t</name></name> <modifier>*</modifier></type><name>el_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ct_buffer_t</name></type> <name>el_visual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ct_buffer_t</name></type> <name>el_scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ct_buffer_t</name></type> <name>el_lgcyconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineInfo</name></type> <name>el_lgcylinfo</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>el_editmode</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>EditLine</name> <modifier>*</modifier></type><name>el_init_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_ABORT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(el-&gt;el_errfile, "%s, %d: ", __FILE__, __LINE__); fprintf a; abort(); } while( 0);</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_ABORT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>abort()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
