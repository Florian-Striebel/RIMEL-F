<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/eln.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: eln.c,v 1.36 2021/08/15 10:08:41 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>el_getc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_read</name> <operator>=</operator> <call><name>el_wgetc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>num_read</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num_read</name> <operator>=</operator> <call><name>wctob</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>num_read</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>el_push</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>el_wpush</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>ct_decode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>el_gets</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>el_wgets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nwread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nwread</name> <operator>+=</operator> <call><name>ct_enc_width</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nwread</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>el_parse</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wargv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wargv</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>ct_decode_argv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wargv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wparse</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>el_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>el</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EL_PROMPT</name></expr>:</case>
<case>case <expr><name>EL_RPROMPT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_pfunc_t</name></type> <name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_pfunc_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prompt_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_RESIZE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_zfunc_t</name></type> <name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_zfunc_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ch_resizefun</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_ALIAS_TEXT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_afunc_t</name></type> <name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_afunc_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ch_aliasfun</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_PROMPT_ESC</name></expr>:</case>
<case>case <expr><name>EL_RPROMPT_ESC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_pfunc_t</name></type> <name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_pfunc_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prompt_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_TERMINAL</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_EDITOR</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>ct_decode_string</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_SIGNAL</name></expr>:</case>
<case>case <expr><name>EL_EDITMODE</name></expr>:</case>
<case>case <expr><name>EL_SAFEREAD</name></expr>:</case>
<case>case <expr><name>EL_UNBUFFERED</name></expr>:</case>
<case>case <expr><name>EL_PREP_TERM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_BIND</name></expr>:</case>
<case>case <expr><name>EL_TELLTC</name></expr>:</case>
<case>case <expr><name>EL_SETTC</name></expr>:</case>
<case>case <expr><name>EL_ECHOTC</name></expr>:</case>
<case>case <expr><name>EL_SETTY</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wargv</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>__arraycount</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wargv</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>ct_decode_argv</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wargv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EL_BIND</name></expr>:</case>
<expr_stmt><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">L"bind"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_bind</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EL_TELLTC</name></expr>:</case>
<expr_stmt><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">L"telltc"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>terminal_telltc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EL_SETTC</name></expr>:</case>
<expr_stmt><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">L"settc"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>terminal_settc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EL_ECHOTC</name></expr>:</case>
<expr_stmt><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">L"echotc"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>terminal_echotc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EL_SETTY</name></expr>:</case>
<expr_stmt><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">L"setty"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tty_stty</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>EL_ADDFN</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_func_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wargv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_func_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wargv</name> <operator>=</operator> <call><name>ct_decode_argv</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wargv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_addfunc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>wcsdup</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wcsdup</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>EL_HIST</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>hist_fun_t</name></type> <name>fun</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>hist_fun_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hist_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>|=</operator> <name>NARROW_HISTORY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_GETCFN</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_rfunc_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_CLIENTDATA</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_SETFP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_REFRESH</name></expr>:</case>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>el_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>el</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EL_PROMPT</name></expr>:</case>
<case>case <expr><name>EL_RPROMPT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_pfunc_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_pfunc_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prompt_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_PROMPT_ESC</name></expr>:</case>
<case>case <expr><name>EL_RPROMPT_ESC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>el_pfunc_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_pfunc_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prompt_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>wc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_EDITOR</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name><operator>.</operator><name>csize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_TERMINAL</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_SIGNAL</name></expr>:</case>
<case>case <expr><name>EL_EDITMODE</name></expr>:</case>
<case>case <expr><name>EL_SAFEREAD</name></expr>:</case>
<case>case <expr><name>EL_UNBUFFERED</name></expr>:</case>
<case>case <expr><name>EL_PREP_TERM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_GETTC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>gettc</name><index>[]</index></name> <init>= <expr><literal type="string">"gettc"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>gettc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>terminal_gettc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>EL_GETCFN</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>el_rfunc_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_CLIENTDATA</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EL_GETFP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier><modifier>*</modifier></type><name>fpp</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>el_wget</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>fpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>LineInfo</name> <modifier>*</modifier></type>
<name>el_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LineInfoW</name> <modifier>*</modifier></type><name>winfo</name> <init>= <expr><call><name>el_wline</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcylinfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>winfo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>winfo</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>winfo</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ct_enc_width</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>winfo</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>winfo</name><operator>-&gt;</operator><name>lastchar</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ct_enc_width</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lastchar</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>el_insertstr</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>el_winsertstr</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><call><name>ct_decode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_lgcyconv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
