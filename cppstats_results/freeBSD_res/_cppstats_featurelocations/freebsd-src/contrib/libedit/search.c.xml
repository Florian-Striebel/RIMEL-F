<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/search.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)search.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: search.c,v 1.51 2020/03/30 06:56:38 ryo Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regexp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_CURSOR</name><parameter_list>(<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((el)-&gt;el_line.cursor + (((el)-&gt;el_map.type == MAP_VI) &amp;&amp; ((el)-&gt;el_map.current == (el)-&gt;el_map.alt)))</cpp:value></cpp:define>






<function><type><name>libedit_private</name> <name>int</name></type>
<name>search_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>EL_BUFSIZ</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patdir</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chacha</name></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chadir</name></name> <operator>=</operator> <name>CHAR_FWD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chatflg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>search_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>

<name>regerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>el_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>ct_buffer_t</name></type> <name>conv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>REGEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>regex_t</name></type> <name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>regexp</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>re_comp</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>re_exec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>wcsstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>re</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>re_comp</name><argument_list>(<argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>re_exec</name><argument_list>(<argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>c_hmatch</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"match `%ls' with `%ls'\n"</literal></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>el_match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>c_setpat</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>!=</operator> <name>ED_SEARCH_PREV_HISTORY</name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>!=</operator> <name>ED_SEARCH_NEXT_HISTORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>EL_CURSOR</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;=</operator> <name>EL_BUFSIZ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <name>EL_BUFSIZ</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"\neventno = %d\n"</literal></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"patlen = %ld\n"</literal></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"patbuf = \"%ls\"\n"</literal></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"cursor %ld lastchar %ld\n"</literal></expr></argument>,
<argument><expr><call><name>EL_CURSOR</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ce_inc_search</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>STRfwd</name><index>[]</index></name> <init>= <expr><literal type="string">L"fwd"</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>STRbck</name><index>[]</index></name> <init>= <expr><literal type="string">L"bck"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name>pchar</name> <init>= <expr><name>L</name><literal type="char">':'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>endcmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'\0'</literal></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ocursor</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></init></decl>, <decl><type ref="prev"/><name>oldpchar</name> <init>= <expr><name>pchar</name></expr></init></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>el_action_t</name></type> <name>ret</name> <init>= <expr><name>CC_NORM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ohisteventno</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>oldpatlen</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newdir</name> <init>= <expr><name>dir</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>, <decl><type ref="prev"/><name>redo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STRfwd</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pchar</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>redo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>newdir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name><operator>)</operator></expr> ?</condition><then> <expr><name>STRbck</name></expr> </then><else>: <expr><name>STRfwd</name></expr></else></ternary></expr>;</init>
<condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <name>pchar</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name>LEN</name></expr>]</index></name></expr>;</init>
<condition><expr><name>cp</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name></expr>;</condition>
<incr><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>el_wgetc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ed_end_of_file</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ED_INSERT</name></expr>:</case>
<case>case <expr><name>ED_DIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;=</operator> <name>EL_BUFSIZ</name> <operator>-</operator> <name>LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>EM_INC_SEARCH_NEXT</name></expr>:</case>
<expr_stmt><expr><name>newdir</name> <operator>=</operator> <name>ED_SEARCH_NEXT_HISTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redo</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EM_INC_SEARCH_PREV</name></expr>:</case>
<expr_stmt><expr><name>newdir</name> <operator>=</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redo</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EM_DELETE_PREV_CHAR</name></expr>:</case>
<case>case <expr><name>ED_DELETE_PREV_CHAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;</operator> <name>LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0007</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CC_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0027</literal></expr>:</case>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name>LEN</name></expr>]</index></name></expr>;</init><condition>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[
<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>+=</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>-</operator> <name>LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>c__next_word</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ce__isword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name>cp</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;=</operator>
<name>EL_BUFSIZ</name> <operator>-</operator> <name>LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator>
<operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ocursor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isglob</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>endcmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_wpush</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>endcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><literal type="number">0033</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CC_REFRESH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<while>while <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator>
<expr><name>ch</name> <operator>=</operator> <name>L</name><literal type="char">']'</literal></expr>;</init>
<condition><expr><name>cp</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name>LEN</name></expr>]</index></name></expr>;</condition>
<incr><expr><name>cp</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>&gt;</operator> <name>LEN</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>L</name><literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>redo</name> <operator>&amp;&amp;</operator> <name>newdir</name> <operator>==</operator> <name>dir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pchar</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator>
<ternary><condition><expr><name>newdir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x7fffffff</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <ternary><condition><expr><name>newdir</name> <operator>==</operator>
<name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then>
<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr> </then><else>:
<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>+=</operator>
<ternary><condition><expr><name>newdir</name> <operator>==</operator>
<name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then>
<expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<literal type="char">'*'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name> <operator>=</operator>
<literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>||</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ce_search_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>newdir</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>CC_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>=</operator>
<operator>(</operator><name>el_action_t</name><operator>)</operator> <name>newdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>el_action_t</name><operator>)</operator>
<operator>(</operator><ternary><condition><expr><name>newdir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then>
<expr><call><name>ed_search_prev_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>ed_search_next_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CC_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <ternary><condition><expr><name>newdir</name> <operator>==</operator>
<name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then>
<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr> </then><else>:
<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ce_search_line</name><argument_list>(<argument><expr><name>el</name></expr></argument>,
<argument><expr><name>newdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>-=</operator> <name>LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name> <operator>=</operator>
<literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>!=</operator>
<name>ohisteventno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator>
<name>ohisteventno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ocursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pchar</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pchar</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ce_inc_search</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>newdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>CC_ERROR</name> <operator>&amp;&amp;</operator> <name>pchar</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>oldpchar</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CC_NORM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>CC_NORM</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <name>CC_ERROR</name> <operator>&amp;&amp;</operator> <name>oldpatlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pchar</name> <operator>=</operator> <name>oldpchar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <name>oldpatlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>!=</operator> <name>ohisteventno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <name>ohisteventno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hist_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>ocursor</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name>CC_NORM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>cv_search</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>tmpbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>tmplen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <name>LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patdir</name></name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <call><name>c_gets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmpbuf</name><index>[<expr><name>LEN</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then> <expr><literal type="string">L"\n/"</literal></expr> </then><else>: <expr><literal type="string">L"\n?"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmplen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_REFRESH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmplen</name> <operator>+=</operator> <name>LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>tmpbuf</name><index>[<expr><name>tmplen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><name>tmplen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmplen</name> <operator>==</operator> <name>LEN</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmpbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>,
<argument><expr><name>EL_BUFSIZ</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><name>tmplen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><name>tmplen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><name>tmplen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>EL_BUFSIZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>tmplen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>=</operator> <operator>(</operator><name>el_action_t</name><operator>)</operator> <name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr> ?</condition><then> <expr><call><name>ed_search_prev_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>ed_search_next_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>CC_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0033</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ed_newline</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>ce_search_line</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>oc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ocp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANCHOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ocp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oc</name> <operator>=</operator> <operator>*</operator><name>ocp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ocp</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ocp</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oc</name> <operator>=</operator> <operator>*</operator><name>ocp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>ED_SEARCH_PREV_HISTORY</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>cp</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</condition> <incr><expr><name>cp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>el_match</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ocp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ocp</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>ocp</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>limit</name></name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>el_match</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ocp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ocp</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<return>return <expr><name>CC_NORM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>ocp</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>cv_repeat_srch</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ct_buffer_t</name></type> <name>conv</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>, <argument><expr><literal type="string">"dir %d patlen %ld patbuf %s\n"</literal></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patlen</name></name></expr></argument>, <argument><expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>patbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>=</operator> <operator>(</operator><name>el_action_t</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ED_SEARCH_NEXT_HISTORY</name></expr>:</case>
<return>return <expr><call><name>ed_search_next_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>ED_SEARCH_PREV_HISTORY</name></expr>:</case>
<return>return <expr><call><name>ed_search_prev_history</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>CC_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>cv_csearch</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>(</operator><name>wint_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>el_wgetc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ed_end_of_file</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chacha</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chadir</name></name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_search</name><operator>.</operator><name>chatflg</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>tflag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wint_t</name><operator>)</operator><operator>*</operator><name>cp</name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>direction</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr><expr><name>cp</name> <operator>+=</operator> <name>direction</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wint_t</name><operator>)</operator><operator>*</operator><name>cp</name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>-=</operator> <name>direction</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cv_delfini</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CC_CURSOR</name></expr>;</return>
</block_content>}</block></function>
</unit>
