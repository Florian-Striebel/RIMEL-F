<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/chared.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_h_el_chared</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_h_el_chared</name></cpp:macro></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI_MOVE</name></cpp:macro></cpp:define>




<typedef>typedef <type><struct>struct <name>c_undo_t</name> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>c_undo_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>c_redo_t</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
}</block></struct></type> <name>c_redo_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>c_vcmd_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>c_vcmd_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>c_kill_t</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>
}</block></struct></type> <name>c_kill_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>el_zfunc_t</name>)<parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>el_afunc_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <type><struct>struct <name>el_chared_t</name> <block>{
<decl_stmt><decl><type><name>c_undo_t</name></type> <name>c_undo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c_kill_t</name></type> <name>c_kill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c_redo_t</name></type> <name>c_redo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>c_vcmd_t</name></type> <name>c_vcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_zfunc_t</name></type> <name>c_resizefun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_afunc_t</name></type> <name>c_aliasfun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>c_resizearg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>c_aliasarg</name></decl>;</decl_stmt>
}</block></struct></type> <name>el_chared_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRQQ</name></cpp:macro> <cpp:value>"\"\""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isglob</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strchr("*[]?", (a)) != NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELETE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YANK</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_FWD</name></cpp:macro> <cpp:value>(+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_BACK</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_INSERT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_REPLACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_REPLACE_1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>cv__isword</name><parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>cv__isWord</name><parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>cv_delfini</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>cv__endword</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ce__isword</name><parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>cv_undo</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>cv_yank</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>cv_next_word</name><parameter_list>(<parameter><decl><type><name>EditLine</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>cv_prev_word</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>c__next_word</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type><name>c__prev_word</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>c_insert</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>c_delbefore</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>c_delbefore1</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>c_delafter</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>c_delafter1</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>c_gets</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>c_hpos</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ch_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>ch_reset</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ch_resizefun</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>el_zfunc_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ch_aliasfun</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>el_afunc_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ch_enlargebufs</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>void</name></type> <name>ch_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
