<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/map.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)map.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: map.c,v 1.54 2021/08/29 09:41:59 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emacs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_print_key</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_print_some_keys</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_print_all_keys</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_init_nls</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_init_meta</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>el_action_t</name></type> <name><name>el_map_emacs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>EM_SET_MARK</name></expr>,
<expr><name>ED_MOVE_TO_BEG</name></expr>,
<expr><name>ED_PREV_CHAR</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>EM_DELETE_OR_LIST</name></expr>,
<expr><name>ED_MOVE_TO_END</name></expr>,
<expr><name>ED_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_KILL_LINE</name></expr>,
<expr><name>ED_CLEAR_SCREEN</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_NEXT_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_PREV_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>EM_INC_SEARCH_PREV</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_TRANSPOSE_CHARS</name></expr>,
<expr><name>EM_KILL_LINE</name></expr>,
<expr><name>ED_QUOTED_INSERT</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>EM_YANK</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>EM_META_NEXT</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_DIGIT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>EM_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_CLEAR_SCREEN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_COPY_PREV_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_PREV_WORD</name></expr>,
<expr><name>EM_CAPITOL_CASE</name></expr>,
<expr><name>EM_DELETE_NEXT_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_NEXT_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_LOWER_CASE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEARCH_NEXT_HISTORY</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>ED_SEARCH_PREV_HISTORY</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_UPPER_CASE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_COPY_REGION</name></expr>,
<expr><name>ED_COMMAND</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_PREV_WORD</name></expr>,
<expr><name>EM_CAPITOL_CASE</name></expr>,
<expr><name>EM_DELETE_NEXT_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_NEXT_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_LOWER_CASE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEARCH_NEXT_HISTORY</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEARCH_PREV_HISTORY</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_UPPER_CASE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_COPY_REGION</name></expr>,
<expr><name>ED_COMMAND</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>

}</block></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>el_action_t</name></type> <name><name>el_map_vi_insert</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KSHVI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>VI_LIST_OR_EOF</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>VI_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>VI_KILL_LINE_PREV</name></expr>,
<expr><name>ED_QUOTED_INSERT</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>,

<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>VI_COMMAND_MODE</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_MOVE_TO_BEG</name></expr>,
<expr><name>ED_PREV_CHAR</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>VI_LIST_OR_EOF</name></expr>,
<expr><name>ED_MOVE_TO_END</name></expr>,
<expr><name>ED_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_KILL_LINE</name></expr>,
<expr><name>ED_CLEAR_SCREEN</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_NEXT_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_PREV_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_REDISPLAY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_TRANSPOSE_CHARS</name></expr>,
<expr><name>VI_KILL_LINE_PREV</name></expr>,
<expr><name>ED_QUOTED_INSERT</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>VI_COMMAND_MODE</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>VI_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>,
<expr><name>ED_INSERT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>el_action_t</name></type> <name><name>el_map_vi_command</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_MOVE_TO_BEG</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_MOVE_TO_END</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_KILL_LINE</name></expr>,
<expr><name>ED_CLEAR_SCREEN</name></expr>,
<expr><name>ED_NEWLINE</name></expr>,
<expr><name>ED_NEXT_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_PREV_HISTORY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_REDISPLAY</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_KILL_LINE_PREV</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_DELETE_PREV_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>EM_META_NEXT</name></expr>,
<expr><name>ED_IGNORE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_COMMENT_OUT</name></expr>,
<expr><name>ED_MOVE_TO_END</name></expr>,
<expr><name>VI_MATCH</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_NEXT_HISTORY</name></expr>,
<expr><name>VI_REPEAT_PREV_CHAR</name></expr>,
<expr><name>ED_PREV_HISTORY</name></expr>,
<expr><name>VI_REDO</name></expr>,
<expr><name>VI_SEARCH_PREV</name></expr>,
<expr><name>VI_ZERO</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_ARGUMENT_DIGIT</name></expr>,
<expr><name>ED_COMMAND</name></expr>,
<expr><name>VI_REPEAT_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_SEARCH_NEXT</name></expr>,
<expr><name>VI_ALIAS</name></expr>,
<expr><name>VI_ADD_AT_EOL</name></expr>,
<expr><name>VI_PREV_BIG_WORD</name></expr>,
<expr><name>VI_CHANGE_TO_EOL</name></expr>,
<expr><name>ED_KILL_LINE</name></expr>,
<expr><name>VI_END_BIG_WORD</name></expr>,
<expr><name>VI_PREV_CHAR</name></expr>,
<expr><name>VI_TO_HISTORY_LINE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_INSERT_AT_BOL</name></expr>,
<expr><name>ED_SEARCH_NEXT_HISTORY</name></expr>,
<expr><name>ED_SEARCH_PREV_HISTORY</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_REPEAT_SEARCH_PREV</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>VI_PASTE_PREV</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_REPLACE_MODE</name></expr>,
<expr><name>VI_SUBSTITUTE_LINE</name></expr>,
<expr><name>VI_TO_PREV_CHAR</name></expr>,
<expr><name>VI_UNDO_LINE</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_NEXT_BIG_WORD</name></expr>,
<expr><name>ED_DELETE_PREV_CHAR</name></expr>,
<expr><name>VI_YANK_END</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_MOVE_TO_BEG</name></expr>,
<expr><name>VI_HISTORY_WORD</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_ADD</name></expr>,
<expr><name>VI_PREV_WORD</name></expr>,
<expr><name>VI_CHANGE_META</name></expr>,
<expr><name>VI_DELETE_META</name></expr>,
<expr><name>VI_END_WORD</name></expr>,
<expr><name>VI_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_PREV_CHAR</name></expr>,
<expr><name>VI_INSERT</name></expr>,
<expr><name>ED_NEXT_HISTORY</name></expr>,
<expr><name>ED_PREV_HISTORY</name></expr>,
<expr><name>ED_NEXT_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_REPEAT_SEARCH_NEXT</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_PASTE_NEXT</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_REPLACE_CHAR</name></expr>,
<expr><name>VI_SUBSTITUTE_CHAR</name></expr>,
<expr><name>VI_TO_NEXT_CHAR</name></expr>,
<expr><name>VI_UNDO</name></expr>,
<expr><name>VI_HISTEDIT</name></expr>,
<expr><name>VI_NEXT_WORD</name></expr>,
<expr><name>ED_DELETE_NEXT_CHAR</name></expr>,
<expr><name>VI_YANK</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_TO_COLUMN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>VI_CHANGE_CASE</name></expr>,
<expr><name>ED_DELETE_PREV_CHAR</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_SEQUENCE_LEAD_IN</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>,
<expr><name>ED_UNASSIGNED</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>map_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>el_map_emacs</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <name>N_KEYS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>el_action_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Emacs map incorrect\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>el_map_vi_command</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <name>N_KEYS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>el_action_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Vi command map incorrect\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>el_map_vi_insert</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <name>N_KEYS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>el_action_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Vi insert map incorrect\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>N_KEYS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>N_KEYS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>emacs</name></name> <operator>=</operator> <name>el_map_emacs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vic</name></name> <operator>=</operator> <name>el_map_vi_command</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vii</name></name> <operator>=</operator> <name>el_map_vi_insert</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>EL_NUM_FCNS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>, <argument><expr><name>el_func_help</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>EL_NUM_FCNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>EL_NUM_FCNS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>, <argument><expr><name>el_func</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></sizeof>
<operator>*</operator> <name>EL_NUM_FCNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name> <operator>=</operator> <name>EL_NUM_FCNS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIDEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>map_init_vi</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>map_init_emacs</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>map_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>emacs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vii</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_init_nls</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0200</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswprint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ED_INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_init_meta</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>alt</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0377</literal> <operator>&amp;&amp;</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>EM_META_NEXT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0377</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0377</literal> <operator>&amp;&amp;</operator> <name><name>alt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>EM_META_NEXT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0377</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">033</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0200</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ED_INSERT</name></expr>:</case>
<case>case <expr><name>ED_UNASSIGNED</name></expr>:</case>
<case>case <expr><name>ED_SEQUENCE_LEAD_IN</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">0177</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>keymacro_map_cmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XK_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>map_init_vi</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>alt</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>el_action_t</name> <modifier>*</modifier></type><name>vii</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vii</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>el_action_t</name> <modifier>*</modifier></type><name>vic</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>vic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAP_VI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>keymacro_reset</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vii</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>map_init_meta</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>map_init_nls</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tty_bind_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_bind_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>map_init_emacs</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>alt</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>el_action_t</name> <modifier>*</modifier></type><name>emacs</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>emacs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAP_EMACS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_reset</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>emacs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ED_UNASSIGNED</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>map_init_meta</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>map_init_nls</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>keymacro_map_cmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EM_EXCHANGE_MARK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XK_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tty_bind_char</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_bind_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>map_set_editor</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>editor</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><literal type="string">L"emacs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>map_init_emacs</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><literal type="string">L"vi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>map_init_vi</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>map_get_editor</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>editor</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>editor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MAP_EMACS</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>editor</name> <operator>=</operator> <literal type="string">L"emacs"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>MAP_VI</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>editor</name> <operator>=</operator> <literal type="string">L"vi"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_print_key</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>outbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_bindings_t</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr>;</init> <condition><expr><name>bp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%s\t-&gt;\t%ls\n"</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keymacro_print</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_print_some_keys</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_bindings_t</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>firstbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lastbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unparsbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>extrabuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>firstbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><name>first</name></expr>]</index></name> <operator>==</operator> <name>ED_UNASSIGNED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%-15s-&gt; is undefined\n"</literal></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr>;</init> <condition><expr><name>bp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name><name>map</name><index>[<expr><name>first</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"%-15s-&gt; %ls\n"</literal></expr></argument>,
<argument><expr><name>unparsbuf</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>lastbuf</name></expr></argument>, <argument><expr><name>extrabuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extrabuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%-4s to %-7s-&gt; %ls\n"</literal></expr></argument>,
<argument><expr><name>unparsbuf</name></expr></argument>, <argument><expr><name>extrabuf</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"BUG!!! %s isn't bound to anything.\n"</literal></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"el-&gt;el_map.key[%d] == %d\n"</literal></expr></argument>,
<argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro__decode_str</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>STRQQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"BUG!!! %s isn't bound to anything.\n"</literal></expr></argument>, <argument><expr><name>unparsbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"el-&gt;el_map.alt[%d] == %d\n"</literal></expr></argument>,
<argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Error printing keys\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_print_all_keys</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"Standard key bindings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>map_print_some_keys</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>map_print_some_keys</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"Alternative key bindings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>map_print_some_keys</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>map_print_some_keys</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"Multi-character bindings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keymacro_print</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">L""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"Arrow key bindings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_print_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><literal type="string">L""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>map_bind</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntype</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>inbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>outbuf</name><index>[<expr><name>EL_BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_bindings_t</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ntype</name> <operator>=</operator> <name>XK_CMD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>rem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>alt</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>ntype</name> <operator>=</operator> <name>XK_STR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><call><name>map_init_vi</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><call><name>map_init_emacs</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr>;</init> <condition><expr><name>bp</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls\n\t%ls\n"</literal></expr></argument>,
<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Invalid switch `%lc'.\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>map_print_all_keys</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>in</name> <operator>=</operator> <call><name>parse__string</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Invalid \\ or ^ in instring.\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>terminal_clear_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro_delete</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name> <operator>==</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>keymacro_delete</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name> <operator>=</operator> <name>ED_UNASSIGNED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_print_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>map_print_key</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bindkeymacro_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XK_STR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>parse__string</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Invalid \\ or ^ in outstring.\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_set_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>keymacro_map_str</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>keymacro_map_str</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name> <operator>=</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XK_CMD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>parse_cmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name></expr></argument>,
<argument><expr><literal type="string">"%ls: Invalid command `%ls'.\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_set_arrow</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>keymacro_map_cmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>keymacro_add</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>keymacro_map_cmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name> <operator>=</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>keymacro_clear</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>in</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>el_action_t</name><operator>)</operator><name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>


<default>default:</default>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Bad XK_ type %d\n"</literal><operator>,</operator> <name>ntype</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>map_addfunc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>help</name></decl></parameter>,
<parameter><decl><type><name>el_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nf</name> <init>= <expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>help</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>el_realloc</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>, <argument><expr><name>nf</name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>el_realloc</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>, <argument><expr><name>nf</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nf</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name>nf</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name>nf</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>help</name><index>[<expr><name>nf</name></expr>]</index></name><operator>.</operator><name>description</name> <operator>=</operator> <name>help</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
