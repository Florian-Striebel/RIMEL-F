<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/prompt.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)prompt.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: prompt.c,v 1.27 2017/06/27 23:25:13 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>prompt_default</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>prompt_default_r</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>

<name>prompt_default</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">L"? "</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>

<name>prompt_default_r</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">L""</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>prompt_print</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_prompt_t</name> <modifier>*</modifier></type><name>elp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EL_PROMPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>elp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>elp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>elp</name><operator>-&gt;</operator><name>p_wide</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>elp</name><operator>-&gt;</operator><name>p_func</name></name>)<argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ct_decode_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call>(<modifier>*</modifier><name><name>elp</name><operator>-&gt;</operator><name>p_func</name></name>)<argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elp</name><operator>-&gt;</operator><name>p_ignore</name></name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>litstart</name> <init>= <expr><operator>++</operator><name>p</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name><name>elp</name><operator>-&gt;</operator><name>p_ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>re_putliteral</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>litstart</name></expr></argument>, <argument><expr><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>re_putc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>elp</name><operator>-&gt;</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elp</name><operator>-&gt;</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_refresh</name><operator>.</operator><name>r_cursor</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>prompt_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_func</name></name> <operator>=</operator> <name>prompt_default</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name><operator>.</operator><name>p_ignore</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_func</name></name> <operator>=</operator> <name>prompt_default_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name><operator>.</operator><name>p_ignore</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>libedit_private</name> <name>void</name></type>

<name>prompt_end</name><argument_list>(<argument><expr><name>EditLine</name> <operator>*</operator><name>el</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
</block_content>}</block></decl></decl_stmt>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>prompt_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>el_pfunc_t</name></type> <name>prf</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wide</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_prompt_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EL_PROMPT</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>EL_PROMPT_ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EL_PROMPT</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>EL_PROMPT_ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_func</name></name> <operator>=</operator> <name>prompt_default</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_func</name></name> <operator>=</operator> <name>prompt_default_r</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_func</name></name> <operator>=</operator> <name>prf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_ignore</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pos</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_wide</name></name> <operator>=</operator> <name>wide</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>prompt_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>el_pfunc_t</name> <modifier>*</modifier></type><name>prf</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_prompt_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EL_PROMPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_prompt</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_rprompt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>prf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_func</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_ignore</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
