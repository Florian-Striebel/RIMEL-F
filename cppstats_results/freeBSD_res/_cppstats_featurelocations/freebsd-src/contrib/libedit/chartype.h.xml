<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/chartype.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_h_chartype_f</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_h_chartype_f</name></cpp:macro></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:error>#<cpp:directive>error</cpp:directive> wchar_t must store ISO 10646 characters</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WCHAR_MAX</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Build environment does not support non-BMP characters</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><struct>struct <name>ct_buffer_t</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>csize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>ct_buffer_t</name>;</typedef>


<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ct_encode_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ct_buffer_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ct_decode_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ct_buffer_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ct_decode_argv</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>char</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>ct_buffer_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>libedit_private</name> <name>ssize_t</name></type> <name>ct_encode_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>libedit_private</name> <name>size_t</name></type> <name>ct_enc_width</name><parameter_list>(<parameter><decl><type><name>wchar_t</name></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISUAL_WIDTH_MAX</name></cpp:macro> <cpp:value>((size_t)8)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_FILL_CHAR</name></cpp:macro> <cpp:value>((wint_t)-1)</cpp:value></cpp:define>



<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ct_visual_width</name><parameter_list>(<parameter><decl><type><name>wchar_t</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>libedit_private</name> <name>ssize_t</name></type> <name>ct_visual_char</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>libedit_private</name> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>ct_visual_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ct_buffer_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHTYPE_PRINT</name></cpp:macro> <cpp:value>( 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHTYPE_ASCIICTL</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHTYPE_TAB</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHTYPE_NL</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHTYPE_NONPRINT</name></cpp:macro> <cpp:value>(-4)</cpp:value></cpp:define>

<function_decl><type><name>libedit_private</name> <name>int</name></type> <name>ct_chr_class</name><parameter_list>(<parameter><decl><type><name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
