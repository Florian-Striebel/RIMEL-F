<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/hist.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)hist.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: hist.c,v 1.34 2019/07/23 10:19:35 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vis.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>




<function><type><name>libedit_private</name> <name>int</name></type>
<name>hist_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>fun</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>EL_BUFSIZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name>EL_BUFSIZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>hist_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>hist_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>hist_fun_t</name></type> <name>fun</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>fun</name></name> <operator>=</operator> <name>fun</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>el_action_t</name></type>
<name>hist_get</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>hlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>+</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KSHVI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>HIST_FIRST</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CC_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>HIST_NEXT</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>limit</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hlen</name> <operator>&gt;</operator> <name>blen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ch_enlargebufs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>hlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name>hlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name>
<operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name>
<operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KSHVI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CC_REFRESH</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>eventno</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>CC_ERROR</name></expr>;</return>

</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>hist_command</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HistEventW</name></type> <name>ev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>wcscmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"list"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <call><name>HIST_LAST</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>str</name> <operator>=</operator> <call><name>HIST_PREV</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>=
<expr><call><name>ct_encode_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><call><name>el_realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strvis</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>VIS_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_outfile</name></name></expr></argument>, <argument><expr><literal type="string">"%d\t%s\n"</literal></expr></argument>,
<argument><expr><name>hno</name><operator>++</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcstol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>history_w</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>H_SETSIZE</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"unique"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>history_w</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>H_SETUNIQUE</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>

<name>hist_enlargebuf</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oldsz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>el_realloc</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>newsz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbuf</name><index>[<expr><name>oldsz</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><operator>(</operator><name>newsz</name> <operator>-</operator> <name>oldsz</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>newbuf</name> <operator>+</operator>
<operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_history</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name>newsz</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>libedit_private</name> <name>wchar_t</name> <modifier>*</modifier></type>
<name>hist_convert</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HistEventW</name></type> <name>ev</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>el</name><operator>)</operator><operator>-&gt;</operator><name><name>el_history</name><operator>.</operator><name>fun</name></name><operator>)</operator><operator>(</operator><operator>(</operator><name>el</name><operator>)</operator><operator>-&gt;</operator><name><name>el_history</name><operator>.</operator><name>ref</name></name><operator>,</operator> <operator>&amp;</operator><name>ev</name><operator>,</operator> <name>fn</name><operator>,</operator> <name>arg</name><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ct_decode_string</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>.</operator><name>str</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_scratch</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
