<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/sig.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)sig.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: sig.c,v 1.26 2016/05/09 21:46:56 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>EditLine</name> <modifier>*</modifier></type><name>sel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sighdl</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a),</cpp:value></cpp:define>
<expr><name>ALLSIGS</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_DO</name></cpp:undef>
<operator>-</operator> <literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>sig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>save_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>nset</name></decl>, <decl><type ref="prev"/><name>oset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sel</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_no</name></name> <operator>=</operator> <name>signo</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIGCONT</name></expr>:</case>
<expr_stmt><expr><call><name>tty_rawmode</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ed_redisplay</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_REFRESH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SIGWINCH</name></expr>:</case>
<expr_stmt><expr><call><name>el_resize</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>tty_cookedmode</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sel</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_handler</name> <operator>=</operator> <name>SIG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sel</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sel</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>kill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>sig_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>nset</name></decl>, <decl><type ref="prev"/><name>oset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name></name> <operator>=</operator> <call><name>el_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nset</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigemptyset</name><argument_list>(<argument><expr><name>nset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) sigaddset(nset, a);</cpp:value></cpp:define>
<macro><name>ALLSIGS</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_DO</name></cpp:undef>
<argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><name>nset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_handler</name> <operator>=</operator> <name>SIG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>sig_end</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>sig_set</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>oset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>osa</name></decl>, <decl><type ref="prev"/><name>nsa</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nsa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sig_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nsa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_set</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osa</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>osa</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>sig_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>osa</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <name>el</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>void</name></type>
<name>sig_clr</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>oset</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_set</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_handler</name> <operator>!=</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigaction</name><argument_list>(<argument><expr><name><name>sighdl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_action</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>sel</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
