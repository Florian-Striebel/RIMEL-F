<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libedit/read.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)read.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: read.c,v 1.107 2021/08/15 10:08:41 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"el.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"read.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL_MAXMACRO</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>macros</name> <block>{
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>el_read_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>macros</name></name></type> <name>macros</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_rfunc_t</name></type> <name>read_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_errno</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read__fixio</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_getcmd</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_clearmacros</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>noedit_wgets</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>libedit_private</name> <name>int</name></type>
<name>read_init</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type><name>ma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name></name> <operator>=</operator> <call><name>el_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ma</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>macros</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ma</name><operator>-&gt;</operator><name>macro</name></name> <operator>=</operator> <call><name>el_calloc</name><argument_list>(<argument><expr><name>EL_MAXMACRO</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ma</name><operator>-&gt;</operator><name>macro</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name> <operator>=</operator> <name>read_char</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>libedit_private</name> <name>void</name></type>
<name>read_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>el_read_t</name></name> <modifier>*</modifier></type><name>el_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>read_clearmacros</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el_read</name><operator>-&gt;</operator><name>macros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>el_read</name><operator>-&gt;</operator><name>macros</name><operator>.</operator><name>macro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el_read</name><operator>-&gt;</operator><name>macros</name><operator>.</operator><name>macro</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name>el_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libedit_private</name> <name>int</name></type>
<name>el_read_setfn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>el_read_t</name></name> <modifier>*</modifier></type><name>el_read</name></decl></parameter>, <parameter><decl><type><name>el_rfunc_t</name></type> <name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>EL_BUILTIN_GETCFN</name><operator>)</operator></expr> ?</condition><then> <expr><name>read_char</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>libedit_private</name> <name>el_rfunc_t</name></type>
<name>el_read_getfn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>el_read_t</name></name> <modifier>*</modifier></type><name>el_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name> <operator>==</operator> <name>read_char</name></expr> ?</condition><then>
<expr><name>EL_BUILTIN_GETCFN</name></expr> </then><else>: <expr><name><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>read__fixio</name><argument_list>(<argument><expr><name>int</name> <name>fd</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>e</name></expr></argument>)</argument_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EWOULDBLOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRY_AGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_AGAIN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EWOULDBLOCK</name> <operator>!=</operator> <name>EAGAIN</name></expr></cpp:if>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRY_AGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_AGAIN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_AGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_SETFL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>O_NDELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>e</name> <operator>&amp;</operator> <operator>~</operator><name>O_NDELAY</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONBIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

<case>case <expr><name>EINTR</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>





<function><type><name>void</name></type>
<name>el_wpush</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>macros</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ma</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>EL_MAXMACRO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <call><name>wcsdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_getcmd</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>el_action_t</name> <modifier>*</modifier></type><name>cmdnum</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name>meta</name> <init>= <expr><operator>(</operator><name>wchar_t</name><operator>)</operator><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>el_wgetc</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KANJI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ch</name> <operator>&amp;</operator> <name>meta</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>metanext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>CcViMap</name><index>[<expr><literal type="char">' '</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>metanext</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>metanext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>|=</operator> <name>meta</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ch</name> <operator>&gt;=</operator> <name>N_KEYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>ED_INSERT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>keymacro_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>keymacro_get</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XK_CMD</name></expr>:</case>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>cmd</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XK_STR</name></expr>:</case>
<expr_stmt><expr><call><name>el_wpush</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XK_NOD</name></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>EL_ABORT</name><argument_list>(<argument><expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_errfile</name></name><operator>,</operator> <literal type="string">"Bad XK_ type \n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>cmd</name> <operator>==</operator> <name>ED_SEQUENCE_LEAD_IN</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>cmdnum</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_char</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>num_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tried</name> <init>= <expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>FIXIO</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><name>MB_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cbp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<label><name>again</name>:</label>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_no</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>num_read</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>cbuf</name> <operator>+</operator> <name>cbp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_signal</name><operator>-&gt;</operator><name>sig_no</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIGCONT</name></expr>:</case>
<expr_stmt><expr><call><name>el_wset</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>EL_REFRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SIGWINCH</name></expr>:</case>
<expr_stmt><expr><call><name>sig_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tried</name> <operator>&amp;&amp;</operator> <call><name>read__fixio</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tried</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>mbs</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>cbp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>mbrtowc</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cbuf</name><index>[<expr><name>cbp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></else></if_stmt>
<case>case <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&gt;=</operator> <name>MB_LEN_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EILSEQ</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<goto>goto <name>again</name>;</goto>
<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type><name>ma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ma</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_clearmacros</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type><name>ma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>el_free</name><argument_list>(<argument><expr><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>el_wgetc</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>macros</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>macros</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_read</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ma</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_pop</name><argument_list>(<argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ma</name><operator>-&gt;</operator><name>macro</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ma</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_pop</name><argument_list>(<argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>tty_rawmode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_read</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name>)<argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libedit_private</name> <name>void</name></type>
<name>read_prepare</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>HANDLE_SIGNALS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sig_set</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>NO_TTY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNBUFFERED</name><operator>|</operator><name>EDIT_DISABLED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>UNBUFFERED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tty_rawmode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>el_resize</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_reset</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>libedit_private</name> <name>void</name></type>
<name>read_finish</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tty_cookedmode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>HANDLE_SIGNALS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sig_clr</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>noedit_wgets</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>el_line_t</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_char</name></name>)<argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>lp</name><operator>-&gt;</operator><name>limit</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ch_enlargebufs</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name> <operator>||</operator>
<name><name>lp</name><operator>-&gt;</operator><name>lastchar</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator>
<name><name>lp</name><operator>-&gt;</operator><name>lastchar</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>lastchar</name></name> <operator>-</operator> <name><name>lp</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>nread</name></expr> ?</condition><then> <expr><name><name>lp</name><operator>-&gt;</operator><name>buffer</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>el_wgets</name><parameter_list>(<parameter><decl><type><name>EditLine</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>el_action_t</name></type> <name>cmdnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>&amp;</operator><name>nrb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>NO_TTY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>noedit_wgets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_tty</name><operator>.</operator><name>t_mode</name></name> <operator>==</operator> <name>EX_IO</name> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>macros</name><operator>.</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_infd</name></name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chrs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tty_rawmode</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_prepare</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>EDIT_DISABLED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>noedit_wgets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_getcmd</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cmdnum</name> <operator>&gt;=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>nfunc</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>thiscmd</name></name> <operator>=</operator> <name>cmdnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>thisch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAP_VI</name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>key</name></name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>lim</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdnum</name> <operator>==</operator> <name>VI_DELETE_PREV_CHAR</name> <operator>&amp;&amp;</operator>
<name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>pos</name></name> <operator>!=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>buf</name></name>
<operator>&amp;&amp;</operator> <call><name>iswprint</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>pos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_redo</name><operator>.</operator><name>pos</name></name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>el</name><operator>-&gt;</operator><name>el_map</name><operator>.</operator><name>func</name></name><index>[<expr><name>cmdnum</name></expr>]</index>) <argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>lastcmd</name></name> <operator>=</operator> <name>cmdnum</name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>retval</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_CURSOR</name></expr>:</case>
<expr_stmt><expr><call><name>re_refresh_cursor</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CC_REDISPLAY</name></expr>:</case>
<expr_stmt><expr><call><name>re_clear_lines</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><name>CC_REFRESH</name></expr>:</case>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CC_REFRESH_BEEP</name></expr>:</case>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CC_NORM</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>CC_ARGHACK</name></expr>:</case>

<continue>continue;</continue>

<case>case <expr><name>CC_EOF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name><operator>++</operator> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CC_NEWLINE</name></expr>:</case>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CC_FATAL</name></expr>:</case>

<expr_stmt><expr><call><name>re_clear_display</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_reset</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_clearmacros</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>macros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_refresh</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CC_ERROR</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>terminal_beep</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>argument</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_state</name><operator>.</operator><name>doingarg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_chared</name><operator>.</operator><name>c_vcmd</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>terminal__flush</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_flags</name></name> <operator>&amp;</operator> <name>UNBUFFERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_finish</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <ternary><condition><expr><name>num</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>lastchar</name></name> <operator>-</operator> <name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_errno</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_read</name><operator>-&gt;</operator><name>read_errno</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>el</name><operator>-&gt;</operator><name>el_line</name><operator>.</operator><name>buffer</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
